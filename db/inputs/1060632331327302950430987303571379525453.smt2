(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.neg (fp.mul RNE x0 x6)) (fp.neg (fp.add RNE x20 x8))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x18 x20) (fp.mul RNE x14 x0)) (fp.div RNE (fp.div RNE x15 x3) (fp.add RNE x20 x13))))
(assert (fp.lt (fp.add RNE (fp.neg x0) (fp.mul RNE x8 x6)) (fp.mul RNE (fp.neg x19) (fp.mul RNE x2 x3))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x4 x6) (fp.div RNE x19 x20)) (fp.neg (fp.neg x9))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x8 x16) (fp.mul RNE x7 x15)) (fp.sub RNE (fp.sub RNE x1 x3) (fp.mul RNE x2 x4))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x17 x11) (fp.add RNE x7 x3)) (fp.div RNE (fp.div RNE x15 x15) (fp.mul RNE x17 x16))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x15 x11) (fp.mul RNE x5 x16)) (fp.div RNE (fp.sub RNE x11 x9) (fp.mul RNE x0 x20))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x16 x4) (fp.mul RNE x20 x5)) (fp.div RNE (fp.neg x4) (fp.div RNE x1 x2))))
(assert (fp.gt (fp.neg (fp.div RNE x3 x6)) (fp.add RNE (fp.add RNE x17 x6) (fp.div RNE x4 x17))))
(assert (fp.geq (fp.add RNE (fp.div RNE x1 x13) (fp.add RNE x11 x4)) (fp.add RNE (fp.add RNE x19 x5) (fp.mul RNE x17 x16))))
(assert (fp.eq (fp.add RNE (fp.add RNE x8 x4) (fp.add RNE x20 x8)) (fp.div RNE (fp.div RNE x0 x3) (fp.sub RNE x4 x1))))
(check-sat)
