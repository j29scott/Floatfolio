(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.add RNE (fp.sub RNE x17 x8) (fp.div RNE x6 x23)) (fp.neg (fp.neg x2))))
(assert (fp.gt (fp.neg (fp.add RNE x15 x20)) (fp.sub RNE (fp.mul RNE x22 x7) (fp.add RNE x19 x20))))
(assert (fp.lt (fp.mul RNE (fp.neg x20) (fp.div RNE x12 x20)) (fp.mul RNE (fp.neg x19) (fp.neg x20))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x11 x6) (fp.div RNE x14 x19)) (fp.add RNE (fp.div RNE x21 x14) (fp.neg x15))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE x13 x11) (fp.sub RNE x10 x5)) (fp.sub RNE (fp.add RNE x15 x13) (fp.add RNE x21 x12))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x1 x0) (fp.mul RNE x19 x16)) (fp.sub RNE (fp.div RNE x5 x17) (fp.mul RNE x9 x14))))
(assert (fp.eq (fp.mul RNE (fp.neg x20) (fp.sub RNE x21 x12)) (fp.add RNE (fp.add RNE x19 x23) (fp.mul RNE x23 x7))))
(assert (fp.eq (fp.neg (fp.add RNE x4 x3)) (fp.sub RNE (fp.neg x0) (fp.sub RNE x12 x9))))
(assert (fp.lt (fp.neg (fp.div RNE x22 x10)) (fp.add RNE (fp.sub RNE x5 x20) (fp.mul RNE x16 x8))))
(assert (fp.eq (fp.div RNE (fp.add RNE x4 x19) (fp.sub RNE x13 x20)) (fp.sub RNE (fp.mul RNE x5 x13) (fp.sub RNE x14 x21))))
(assert (fp.lt (fp.add RNE (fp.div RNE x16 x23) (fp.div RNE x4 x23)) (fp.add RNE (fp.mul RNE x5 x20) (fp.mul RNE x17 x9))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x10 x3) (fp.add RNE x19 x8)) (fp.neg (fp.add RNE x18 x7))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x2 x23) (fp.neg x4)) (fp.add RNE (fp.add RNE x8 x21) (fp.sub RNE x0 x12))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x7 x22) (fp.mul RNE x21 x6)) (fp.neg (fp.neg x14))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x19 x4) (fp.neg x10)) (fp.add RNE (fp.div RNE x11 x22) (fp.mul RNE x18 x19))))
(assert (fp.gt (fp.add RNE (fp.div RNE x6 x16) (fp.div RNE x5 x11)) (fp.div RNE (fp.neg x16) (fp.div RNE x23 x11))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x20 x22) (fp.div RNE x16 x17)) (fp.mul RNE (fp.neg x3) (fp.sub RNE x20 x19))))
(assert (fp.eq (fp.div RNE (fp.add RNE x9 x8) (fp.neg x5)) (fp.mul RNE (fp.mul RNE x3 x21) (fp.sub RNE x12 x22))))
(check-sat)
