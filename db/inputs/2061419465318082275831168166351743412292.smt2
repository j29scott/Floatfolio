(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.div RNE x10 x6) (fp.sub RNE x4 x3))) (fp.div RNE (fp.add RNE (fp.div RNE x1 x1) (fp.mul RNE x3 x6)) (fp.add RNE (fp.sub RNE x10 x1) (fp.add RNE x3 x3)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.mul RNE x0 x10) (fp.div RNE x4 x10)) (fp.sub RNE (fp.neg x3) (fp.neg x7))) (fp.neg (fp.add RNE (fp.div RNE x8 x6) (fp.neg x1)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.div RNE x10 x2)) (fp.mul RNE (fp.mul RNE x9 x8) (fp.add RNE x9 x8))) (fp.add RNE (fp.div RNE (fp.sub RNE x10 x2) (fp.sub RNE x5 x0)) (fp.div RNE (fp.sub RNE x8 x3) (fp.div RNE x8 x1)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.add RNE x8 x10) (fp.sub RNE x8 x2)) (fp.div RNE (fp.neg x0) (fp.sub RNE x0 x7))) (fp.add RNE (fp.div RNE (fp.neg x9) (fp.mul RNE x3 x8)) (fp.neg (fp.sub RNE x2 x7)))))
(check-sat)
