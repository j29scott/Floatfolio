(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.div RNE (fp.neg x1) (fp.neg x14)) (fp.mul RNE (fp.neg x10) (fp.neg x12))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x4 x11) (fp.sub RNE x7 x3)) (fp.neg (fp.div RNE x8 x14))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x0 x14) (fp.neg x7)) (fp.div RNE (fp.mul RNE x3 x5) (fp.add RNE x10 x11))))
(assert (fp.leq (fp.add RNE (fp.add RNE x14 x6) (fp.div RNE x10 x0)) (fp.add RNE (fp.sub RNE x13 x7) (fp.mul RNE x11 x2))))
(assert (fp.geq (fp.neg (fp.div RNE x2 x5)) (fp.add RNE (fp.add RNE x12 x4) (fp.add RNE x0 x9))))
(assert (fp.geq (fp.add RNE (fp.neg x14) (fp.mul RNE x14 x14)) (fp.sub RNE (fp.div RNE x5 x13) (fp.neg x6))))
(assert (fp.geq (fp.neg (fp.sub RNE x14 x5)) (fp.neg (fp.add RNE x7 x0))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x7 x5) (fp.add RNE x3 x7)) (fp.neg (fp.sub RNE x11 x5))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x6 x2) (fp.mul RNE x14 x3)) (fp.div RNE (fp.mul RNE x0 x4) (fp.div RNE x7 x12))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x1 x10) (fp.mul RNE x3 x2)) (fp.mul RNE (fp.div RNE x2 x8) (fp.div RNE x0 x5))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x8 x8) (fp.neg x4)) (fp.add RNE (fp.mul RNE x2 x13) (fp.sub RNE x2 x3))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x1 x14) (fp.div RNE x8 x4)) (fp.div RNE (fp.div RNE x1 x2) (fp.div RNE x3 x7))))
(assert (fp.geq (fp.add RNE (fp.div RNE x10 x2) (fp.add RNE x7 x0)) (fp.add RNE (fp.mul RNE x3 x6) (fp.sub RNE x11 x11))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x5 x1) (fp.div RNE x5 x4)) (fp.sub RNE (fp.neg x6) (fp.add RNE x4 x8))))
(assert (fp.gt (fp.neg (fp.neg x0)) (fp.sub RNE (fp.sub RNE x4 x6) (fp.neg x0))))
(check-sat)
