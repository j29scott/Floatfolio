(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.neg (fp.sub RNE x18 x7))) (fp.neg (fp.sub RNE (fp.mul RNE x8 x11) (fp.neg x3)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.mul RNE x14 x23) (fp.div RNE x20 x1)) (fp.div RNE (fp.mul RNE x10 x3) (fp.neg x13))) (fp.div RNE (fp.neg (fp.div RNE x8 x11)) (fp.neg (fp.div RNE x21 x2)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.div RNE x17 x23) (fp.sub RNE x20 x6))) (fp.neg (fp.div RNE (fp.mul RNE x5 x0) (fp.add RNE x10 x12)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.neg x8)) (fp.add RNE (fp.div RNE x17 x20) (fp.mul RNE x17 x16))) (fp.div RNE (fp.sub RNE (fp.neg x15) (fp.add RNE x2 x7)) (fp.add RNE (fp.div RNE x2 x19) (fp.sub RNE x3 x9)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.mul RNE x20 x14) (fp.add RNE x13 x1)) (fp.add RNE (fp.div RNE x16 x7) (fp.neg x8))) (fp.neg (fp.sub RNE (fp.neg x17) (fp.neg x4)))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.div RNE x18 x7) (fp.add RNE x7 x0)) (fp.sub RNE (fp.add RNE x10 x17) (fp.sub RNE x4 x16))) (fp.sub RNE (fp.div RNE (fp.sub RNE x8 x14) (fp.div RNE x2 x15)) (fp.sub RNE (fp.div RNE x23 x7) (fp.div RNE x15 x21)))))
(assert (fp.geq (fp.neg (fp.neg (fp.add RNE x18 x8))) (fp.mul RNE (fp.sub RNE (fp.div RNE x15 x19) (fp.sub RNE x20 x5)) (fp.mul RNE (fp.neg x14) (fp.mul RNE x18 x12)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x20 x4) (fp.add RNE x5 x8)) (fp.sub RNE (fp.mul RNE x0 x11) (fp.mul RNE x23 x13))) (fp.mul RNE (fp.neg (fp.mul RNE x4 x15)) (fp.mul RNE (fp.sub RNE x16 x13) (fp.mul RNE x21 x3)))))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.sub RNE x18 x4) (fp.div RNE x5 x10)) (fp.div RNE (fp.mul RNE x12 x1) (fp.mul RNE x3 x1))) (fp.neg (fp.neg (fp.neg x10)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.div RNE x17 x19)) (fp.div RNE (fp.mul RNE x16 x8) (fp.div RNE x17 x21))) (fp.sub RNE (fp.mul RNE (fp.add RNE x23 x11) (fp.sub RNE x3 x12)) (fp.div RNE (fp.add RNE x3 x8) (fp.mul RNE x9 x11)))))
(assert (fp.lt (fp.add RNE (fp.div RNE (fp.add RNE x15 x8) (fp.div RNE x18 x0)) (fp.div RNE (fp.neg x19) (fp.div RNE x14 x2))) (fp.div RNE (fp.add RNE (fp.mul RNE x10 x2) (fp.sub RNE x13 x19)) (fp.mul RNE (fp.mul RNE x8 x14) (fp.mul RNE x23 x18)))))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.mul RNE x5 x3) (fp.add RNE x7 x0)) (fp.div RNE (fp.sub RNE x6 x23) (fp.div RNE x2 x13))) (fp.mul RNE (fp.neg (fp.sub RNE x13 x6)) (fp.sub RNE (fp.sub RNE x7 x2) (fp.sub RNE x14 x2)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.sub RNE x21 x7) (fp.sub RNE x4 x14)) (fp.neg (fp.mul RNE x16 x7))) (fp.mul RNE (fp.add RNE (fp.neg x11) (fp.sub RNE x23 x8)) (fp.add RNE (fp.div RNE x4 x3) (fp.mul RNE x0 x17)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.neg x6) (fp.add RNE x19 x5)) (fp.div RNE (fp.neg x2) (fp.add RNE x13 x23))) (fp.sub RNE (fp.neg (fp.div RNE x19 x3)) (fp.neg (fp.add RNE x18 x15)))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.sub RNE x12 x9) (fp.sub RNE x9 x0))) (fp.sub RNE (fp.add RNE (fp.div RNE x14 x13) (fp.neg x2)) (fp.neg (fp.sub RNE x19 x20)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.add RNE x1 x21) (fp.add RNE x14 x2)) (fp.div RNE (fp.add RNE x16 x5) (fp.add RNE x11 x18))) (fp.div RNE (fp.div RNE (fp.sub RNE x18 x8) (fp.neg x3)) (fp.sub RNE (fp.div RNE x17 x11) (fp.div RNE x3 x15)))))
(check-sat)
