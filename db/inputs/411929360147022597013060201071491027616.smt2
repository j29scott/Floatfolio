(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.add RNE x11 x3) (fp.div RNE x5 x2)) (fp.div RNE (fp.div RNE x9 x4) (fp.neg x10))))
(assert (fp.gt (fp.add RNE (fp.add RNE x8 x6) (fp.div RNE x0 x3)) (fp.neg (fp.sub RNE x7 x1))))
(assert (fp.leq (fp.mul RNE (fp.neg x5) (fp.sub RNE x3 x10)) (fp.add RNE (fp.div RNE x12 x2) (fp.sub RNE x9 x5))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x0 x11) (fp.add RNE x5 x3)) (fp.mul RNE (fp.add RNE x2 x3) (fp.div RNE x10 x2))))
(assert (fp.lt (fp.mul RNE (fp.neg x8) (fp.div RNE x3 x10)) (fp.div RNE (fp.sub RNE x4 x2) (fp.div RNE x5 x6))))
(assert (fp.leq (fp.add RNE (fp.neg x12) (fp.mul RNE x2 x8)) (fp.neg (fp.neg x5))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x2 x3) (fp.sub RNE x10 x11)) (fp.mul RNE (fp.div RNE x1 x5) (fp.mul RNE x6 x5))))
(assert (fp.gt (fp.neg (fp.mul RNE x4 x11)) (fp.div RNE (fp.mul RNE x4 x8) (fp.div RNE x11 x0))))
(assert (fp.geq (fp.sub RNE (fp.neg x0) (fp.mul RNE x4 x9)) (fp.sub RNE (fp.neg x5) (fp.neg x12))))
(assert (fp.gt (fp.div RNE (fp.add RNE x5 x6) (fp.sub RNE x0 x4)) (fp.add RNE (fp.div RNE x4 x8) (fp.neg x12))))
(assert (fp.leq (fp.div RNE (fp.div RNE x8 x6) (fp.div RNE x7 x9)) (fp.add RNE (fp.mul RNE x6 x1) (fp.sub RNE x11 x4))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x11 x9) (fp.mul RNE x0 x8)) (fp.mul RNE (fp.mul RNE x4 x4) (fp.neg x10))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x0 x10) (fp.sub RNE x6 x12)) (fp.add RNE (fp.add RNE x2 x8) (fp.sub RNE x3 x10))))
(assert (fp.leq (fp.neg (fp.mul RNE x1 x1)) (fp.mul RNE (fp.sub RNE x10 x0) (fp.neg x5))))
(check-sat)
