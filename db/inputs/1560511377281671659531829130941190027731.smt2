(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x2 x6) (fp.add RNE x2 x2)) (fp.neg (fp.add RNE x10 x8))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x0 x1) (fp.mul RNE x10 x11)) (fp.add RNE (fp.mul RNE x10 x3) (fp.mul RNE x3 x4))))
(assert (fp.lt (fp.neg (fp.mul RNE x4 x4)) (fp.sub RNE (fp.mul RNE x8 x5) (fp.div RNE x0 x10))))
(assert (fp.lt (fp.neg (fp.mul RNE x0 x3)) (fp.neg (fp.add RNE x5 x8))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x10 x6) (fp.sub RNE x5 x5)) (fp.mul RNE (fp.div RNE x11 x8) (fp.add RNE x7 x8))))
(assert (fp.geq (fp.neg (fp.div RNE x5 x3)) (fp.add RNE (fp.add RNE x7 x11) (fp.add RNE x8 x4))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x1 x9) (fp.div RNE x9 x2)) (fp.neg (fp.neg x7))))
(assert (fp.eq (fp.add RNE (fp.div RNE x5 x2) (fp.div RNE x10 x2)) (fp.mul RNE (fp.add RNE x10 x8) (fp.add RNE x10 x3))))
(assert (fp.leq (fp.neg (fp.sub RNE x1 x9)) (fp.mul RNE (fp.neg x7) (fp.mul RNE x6 x5))))
(assert (fp.gt (fp.neg (fp.sub RNE x4 x3)) (fp.add RNE (fp.mul RNE x9 x9) (fp.sub RNE x3 x10))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x3 x3) (fp.add RNE x10 x4)) (fp.sub RNE (fp.add RNE x10 x3) (fp.mul RNE x5 x5))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x3 x0) (fp.sub RNE x5 x5)) (fp.neg (fp.add RNE x10 x0))))
(assert (fp.leq (fp.div RNE (fp.div RNE x5 x3) (fp.neg x2)) (fp.mul RNE (fp.add RNE x11 x5) (fp.mul RNE x11 x11))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x5 x0) (fp.div RNE x2 x11)) (fp.mul RNE (fp.div RNE x2 x8) (fp.add RNE x3 x1))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x4 x5) (fp.add RNE x2 x6)) (fp.neg (fp.add RNE x1 x7))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x4 x3) (fp.add RNE x5 x1)) (fp.add RNE (fp.sub RNE x1 x3) (fp.mul RNE x1 x9))))
(assert (fp.leq (fp.add RNE (fp.neg x1) (fp.neg x4)) (fp.sub RNE (fp.add RNE x0 x11) (fp.add RNE x6 x6))))
(check-sat)
