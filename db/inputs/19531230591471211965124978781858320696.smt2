(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.div RNE x10 x8)) (fp.add RNE (fp.div RNE x1 x18) (fp.neg x9))))
(assert (fp.eq (fp.div RNE (fp.add RNE x1 x15) (fp.div RNE x19 x5)) (fp.mul RNE (fp.neg x0) (fp.sub RNE x5 x17))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x0 x19) (fp.neg x0)) (fp.div RNE (fp.sub RNE x2 x11) (fp.sub RNE x10 x5))))
(assert (fp.gt (fp.div RNE (fp.sub RNE x11 x8) (fp.add RNE x19 x14)) (fp.mul RNE (fp.neg x16) (fp.add RNE x2 x3))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x2 x3) (fp.div RNE x1 x19)) (fp.add RNE (fp.sub RNE x19 x20) (fp.neg x4))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x7 x20) (fp.mul RNE x18 x9)) (fp.div RNE (fp.add RNE x7 x20) (fp.sub RNE x18 x4))))
(assert (fp.gt (fp.neg (fp.add RNE x19 x18)) (fp.div RNE (fp.sub RNE x15 x19) (fp.sub RNE x9 x8))))
(assert (fp.lt (fp.add RNE (fp.div RNE x11 x20) (fp.mul RNE x14 x9)) (fp.div RNE (fp.div RNE x16 x1) (fp.neg x18))))
(assert (fp.lt (fp.mul RNE (fp.neg x11) (fp.div RNE x13 x11)) (fp.neg (fp.add RNE x16 x4))))
(assert (fp.leq (fp.add RNE (fp.add RNE x12 x3) (fp.div RNE x5 x1)) (fp.div RNE (fp.add RNE x10 x16) (fp.neg x20))))
(assert (fp.gt (fp.neg (fp.div RNE x11 x19)) (fp.div RNE (fp.sub RNE x0 x1) (fp.add RNE x4 x1))))
(check-sat)
