(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.div RNE (fp.neg (fp.sub RNE x9 x10)) (fp.add RNE (fp.mul RNE x9 x9) (fp.mul RNE x4 x4))) (fp.div RNE (fp.add RNE (fp.neg x11) (fp.neg x14)) (fp.div RNE (fp.neg x16) (fp.mul RNE x2 x0)))))
(assert (fp.geq (fp.sub RNE (fp.add RNE (fp.mul RNE x9 x7) (fp.div RNE x17 x7)) (fp.mul RNE (fp.sub RNE x2 x4) (fp.neg x3))) (fp.neg (fp.neg (fp.mul RNE x12 x10)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.add RNE x5 x14)) (fp.sub RNE (fp.add RNE x16 x4) (fp.div RNE x15 x0))) (fp.neg (fp.sub RNE (fp.neg x7) (fp.sub RNE x11 x14)))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.neg x8) (fp.mul RNE x12 x0)) (fp.neg (fp.neg x6))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x15 x1) (fp.sub RNE x1 x3)) (fp.add RNE (fp.div RNE x7 x6) (fp.mul RNE x4 x3)))))
(assert (fp.geq (fp.neg (fp.neg (fp.sub RNE x16 x12))) (fp.mul RNE (fp.neg (fp.mul RNE x17 x14)) (fp.neg (fp.neg x0)))))
(assert (fp.eq (fp.neg (fp.neg (fp.sub RNE x12 x5))) (fp.mul RNE (fp.sub RNE (fp.neg x16) (fp.neg x12)) (fp.mul RNE (fp.neg x11) (fp.div RNE x1 x2)))))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.neg x2) (fp.div RNE x16 x0)) (fp.div RNE (fp.add RNE x5 x11) (fp.sub RNE x1 x7))) (fp.add RNE (fp.add RNE (fp.neg x16) (fp.sub RNE x6 x1)) (fp.sub RNE (fp.mul RNE x4 x0) (fp.sub RNE x12 x2)))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE (fp.add RNE x6 x5) (fp.neg x1)) (fp.sub RNE (fp.neg x13) (fp.add RNE x7 x0))) (fp.sub RNE (fp.neg (fp.neg x5)) (fp.mul RNE (fp.neg x8) (fp.sub RNE x8 x10)))))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.add RNE x6 x17) (fp.div RNE x5 x14)) (fp.mul RNE (fp.sub RNE x1 x4) (fp.div RNE x7 x4))) (fp.mul RNE (fp.mul RNE (fp.add RNE x0 x2) (fp.div RNE x0 x1)) (fp.sub RNE (fp.neg x1) (fp.neg x4)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.mul RNE x11 x1) (fp.sub RNE x13 x7)) (fp.mul RNE (fp.sub RNE x9 x4) (fp.add RNE x16 x9))) (fp.neg (fp.sub RNE (fp.mul RNE x11 x16) (fp.add RNE x9 x1)))))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.neg x13) (fp.sub RNE x15 x9)) (fp.neg (fp.sub RNE x7 x8))) (fp.div RNE (fp.sub RNE (fp.div RNE x6 x16) (fp.div RNE x3 x3)) (fp.div RNE (fp.mul RNE x3 x5) (fp.add RNE x15 x15)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.mul RNE x16 x16) (fp.sub RNE x13 x10))) (fp.div RNE (fp.add RNE (fp.add RNE x6 x4) (fp.add RNE x17 x12)) (fp.sub RNE (fp.add RNE x4 x13) (fp.mul RNE x17 x14)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.div RNE x14 x12)) (fp.add RNE (fp.neg x17) (fp.neg x9))) (fp.sub RNE (fp.sub RNE (fp.div RNE x4 x12) (fp.mul RNE x9 x7)) (fp.mul RNE (fp.neg x6) (fp.div RNE x15 x2)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.div RNE x6 x12) (fp.neg x5)) (fp.sub RNE (fp.sub RNE x14 x2) (fp.mul RNE x14 x14))) (fp.div RNE (fp.mul RNE (fp.sub RNE x0 x16) (fp.add RNE x0 x5)) (fp.sub RNE (fp.div RNE x7 x8) (fp.mul RNE x2 x9)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.mul RNE x9 x5) (fp.mul RNE x0 x15))) (fp.add RNE (fp.mul RNE (fp.mul RNE x5 x17) (fp.mul RNE x14 x0)) (fp.div RNE (fp.neg x9) (fp.neg x17)))))
(assert (fp.geq (fp.mul RNE (fp.neg (fp.add RNE x13 x3)) (fp.sub RNE (fp.div RNE x2 x15) (fp.neg x12))) (fp.div RNE (fp.mul RNE (fp.neg x10) (fp.div RNE x12 x1)) (fp.div RNE (fp.div RNE x8 x6) (fp.neg x8)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.add RNE x17 x5)) (fp.neg (fp.sub RNE x4 x7))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x4 x4) (fp.neg x6)) (fp.add RNE (fp.add RNE x0 x5) (fp.sub RNE x8 x8)))))
(check-sat)
