(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.neg x19) (fp.div RNE x11 x4)) (fp.neg (fp.mul RNE x9 x18))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x4 x5) (fp.add RNE x16 x19)) (fp.div RNE (fp.mul RNE x19 x15) (fp.div RNE x13 x16))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x13 x15) (fp.add RNE x17 x10)) (fp.mul RNE (fp.sub RNE x15 x4) (fp.add RNE x8 x5))))
(assert (fp.leq (fp.neg (fp.neg x19)) (fp.add RNE (fp.add RNE x18 x15) (fp.sub RNE x0 x6))))
(assert (fp.gt (fp.add RNE (fp.div RNE x0 x11) (fp.div RNE x19 x2)) (fp.neg (fp.mul RNE x1 x6))))
(assert (fp.eq (fp.add RNE (fp.neg x17) (fp.mul RNE x4 x7)) (fp.mul RNE (fp.mul RNE x5 x8) (fp.add RNE x9 x9))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x17 x4) (fp.neg x10)) (fp.add RNE (fp.mul RNE x16 x8) (fp.sub RNE x16 x14))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x7 x8) (fp.sub RNE x14 x16)) (fp.sub RNE (fp.sub RNE x17 x7) (fp.neg x7))))
(assert (fp.geq (fp.neg (fp.mul RNE x12 x17)) (fp.div RNE (fp.mul RNE x7 x5) (fp.div RNE x2 x2))))
(assert (fp.gt (fp.div RNE (fp.add RNE x1 x13) (fp.sub RNE x11 x16)) (fp.sub RNE (fp.div RNE x6 x0) (fp.div RNE x8 x18))))
(assert (fp.eq (fp.neg (fp.neg x16)) (fp.neg (fp.mul RNE x1 x2))))
(assert (fp.lt (fp.neg (fp.sub RNE x4 x14)) (fp.mul RNE (fp.sub RNE x6 x0) (fp.add RNE x19 x13))))
(check-sat)
