(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x14 x11) (fp.div RNE x5 x0)) (fp.mul RNE (fp.add RNE x2 x13) (fp.mul RNE x12 x9))))
(assert (fp.lt (fp.add RNE (fp.neg x5) (fp.neg x8)) (fp.sub RNE (fp.neg x13) (fp.neg x2))))
(assert (fp.eq (fp.div RNE (fp.add RNE x11 x3) (fp.div RNE x5 x8)) (fp.add RNE (fp.div RNE x0 x12) (fp.div RNE x15 x14))))
(assert (fp.leq (fp.add RNE (fp.div RNE x14 x7) (fp.div RNE x6 x14)) (fp.neg (fp.mul RNE x10 x4))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x8 x1) (fp.div RNE x0 x0)) (fp.div RNE (fp.add RNE x6 x9) (fp.sub RNE x4 x2))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x1 x5) (fp.div RNE x9 x6)) (fp.sub RNE (fp.neg x11) (fp.add RNE x4 x7))))
(assert (fp.lt (fp.neg (fp.add RNE x5 x9)) (fp.mul RNE (fp.sub RNE x9 x10) (fp.sub RNE x6 x0))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x7 x15) (fp.mul RNE x7 x5)) (fp.mul RNE (fp.neg x1) (fp.div RNE x2 x14))))
(assert (fp.lt (fp.div RNE (fp.neg x8) (fp.sub RNE x11 x10)) (fp.add RNE (fp.neg x3) (fp.add RNE x6 x12))))
(assert (fp.gt (fp.sub RNE (fp.neg x10) (fp.neg x3)) (fp.sub RNE (fp.div RNE x13 x9) (fp.mul RNE x2 x15))))
(assert (fp.geq (fp.sub RNE (fp.neg x1) (fp.neg x15)) (fp.add RNE (fp.add RNE x2 x12) (fp.neg x9))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x10 x4) (fp.sub RNE x4 x0)) (fp.neg (fp.mul RNE x11 x14))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x11 x6) (fp.sub RNE x10 x3)) (fp.neg (fp.div RNE x3 x1))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x6 x1) (fp.sub RNE x6 x11)) (fp.mul RNE (fp.mul RNE x14 x0) (fp.neg x14))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x4 x12) (fp.div RNE x8 x15)) (fp.sub RNE (fp.neg x3) (fp.sub RNE x1 x3))))
(check-sat)
