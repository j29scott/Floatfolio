(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.add RNE x15 x15) (fp.div RNE x14 x5)) (fp.div RNE (fp.neg x6) (fp.neg x6))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x1 x13) (fp.mul RNE x0 x18)) (fp.neg (fp.div RNE x13 x15))))
(assert (fp.gt (fp.mul RNE (fp.neg x6) (fp.add RNE x10 x16)) (fp.mul RNE (fp.sub RNE x3 x11) (fp.neg x16))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x10 x9) (fp.sub RNE x12 x10)) (fp.sub RNE (fp.add RNE x15 x17) (fp.mul RNE x6 x6))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x19 x14) (fp.neg x15)) (fp.add RNE (fp.add RNE x0 x21) (fp.mul RNE x3 x11))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x18 x17) (fp.sub RNE x18 x11)) (fp.neg (fp.neg x8))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x16 x18) (fp.sub RNE x9 x20)) (fp.neg (fp.div RNE x9 x10))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x14 x6) (fp.div RNE x13 x0)) (fp.neg (fp.mul RNE x15 x4))))
(assert (fp.eq (fp.neg (fp.mul RNE x0 x0)) (fp.mul RNE (fp.div RNE x19 x9) (fp.sub RNE x19 x20))))
(assert (fp.leq (fp.add RNE (fp.add RNE x22 x20) (fp.div RNE x9 x7)) (fp.mul RNE (fp.sub RNE x21 x13) (fp.sub RNE x14 x2))))
(assert (fp.leq (fp.div RNE (fp.add RNE x12 x5) (fp.div RNE x13 x19)) (fp.neg (fp.neg x5))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x11 x2) (fp.add RNE x2 x2)) (fp.neg (fp.neg x1))))
(check-sat)
