(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.mul RNE x3 x21) (fp.mul RNE x6 x6)) (fp.neg (fp.neg x19))) (fp.mul RNE (fp.div RNE (fp.mul RNE x11 x3) (fp.add RNE x8 x18)) (fp.mul RNE (fp.sub RNE x13 x7) (fp.sub RNE x10 x11)))))
(assert (fp.leq (fp.neg (fp.neg (fp.neg x11))) (fp.div RNE (fp.div RNE (fp.div RNE x7 x20) (fp.neg x9)) (fp.div RNE (fp.add RNE x17 x7) (fp.sub RNE x20 x14)))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.neg x12) (fp.neg x18)) (fp.neg (fp.neg x2))) (fp.sub RNE (fp.add RNE (fp.mul RNE x16 x16) (fp.neg x3)) (fp.div RNE (fp.neg x5) (fp.sub RNE x6 x11)))))
(assert (fp.geq (fp.neg (fp.neg (fp.sub RNE x17 x5))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x13 x3) (fp.div RNE x12 x6)) (fp.div RNE (fp.add RNE x8 x9) (fp.neg x7)))))
(assert (fp.geq (fp.add RNE (fp.neg (fp.sub RNE x19 x21)) (fp.sub RNE (fp.div RNE x11 x7) (fp.add RNE x2 x9))) (fp.mul RNE (fp.add RNE (fp.div RNE x13 x17) (fp.add RNE x13 x10)) (fp.mul RNE (fp.sub RNE x17 x4) (fp.div RNE x11 x7)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.neg x21)) (fp.div RNE (fp.div RNE x0 x13) (fp.mul RNE x6 x13))) (fp.sub RNE (fp.add RNE (fp.sub RNE x19 x18) (fp.sub RNE x19 x9)) (fp.div RNE (fp.add RNE x2 x14) (fp.neg x0)))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.sub RNE x17 x6) (fp.mul RNE x8 x6)) (fp.neg (fp.add RNE x5 x9))) (fp.div RNE (fp.add RNE (fp.add RNE x12 x16) (fp.add RNE x11 x12)) (fp.div RNE (fp.add RNE x9 x10) (fp.add RNE x12 x15)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.mul RNE x2 x20) (fp.sub RNE x1 x21)) (fp.neg (fp.mul RNE x4 x12))) (fp.add RNE (fp.div RNE (fp.div RNE x20 x7) (fp.add RNE x13 x1)) (fp.sub RNE (fp.add RNE x10 x3) (fp.sub RNE x7 x20)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.neg x3) (fp.add RNE x3 x19)) (fp.sub RNE (fp.sub RNE x18 x13) (fp.sub RNE x0 x20))) (fp.mul RNE (fp.neg (fp.mul RNE x19 x17)) (fp.sub RNE (fp.div RNE x20 x5) (fp.div RNE x11 x17)))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.sub RNE x13 x12) (fp.add RNE x16 x14)) (fp.mul RNE (fp.div RNE x20 x19) (fp.neg x16))) (fp.div RNE (fp.add RNE (fp.div RNE x4 x17) (fp.div RNE x6 x13)) (fp.sub RNE (fp.neg x5) (fp.mul RNE x21 x4)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.add RNE x18 x10)) (fp.mul RNE (fp.mul RNE x12 x0) (fp.add RNE x21 x0))) (fp.div RNE (fp.mul RNE (fp.mul RNE x7 x9) (fp.sub RNE x19 x14)) (fp.add RNE (fp.div RNE x17 x16) (fp.mul RNE x7 x0)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.neg x5) (fp.mul RNE x12 x7)) (fp.sub RNE (fp.neg x6) (fp.sub RNE x2 x14))) (fp.sub RNE (fp.add RNE (fp.sub RNE x6 x9) (fp.sub RNE x2 x13)) (fp.mul RNE (fp.add RNE x21 x11) (fp.neg x14)))))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.div RNE x8 x3) (fp.neg x5)) (fp.mul RNE (fp.mul RNE x6 x20) (fp.mul RNE x2 x7))) (fp.mul RNE (fp.neg (fp.neg x17)) (fp.neg (fp.sub RNE x15 x7)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.add RNE x0 x7) (fp.div RNE x20 x4)) (fp.neg (fp.div RNE x4 x17))) (fp.sub RNE (fp.mul RNE (fp.neg x10) (fp.mul RNE x7 x18)) (fp.div RNE (fp.sub RNE x5 x7) (fp.neg x11)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.sub RNE x13 x10) (fp.neg x17)) (fp.add RNE (fp.sub RNE x14 x16) (fp.add RNE x16 x12))) (fp.neg (fp.sub RNE (fp.div RNE x16 x2) (fp.div RNE x1 x0)))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.neg x13) (fp.neg x3)) (fp.mul RNE (fp.add RNE x7 x9) (fp.sub RNE x0 x18))) (fp.div RNE (fp.add RNE (fp.add RNE x3 x4) (fp.add RNE x21 x8)) (fp.mul RNE (fp.sub RNE x3 x2) (fp.sub RNE x18 x17)))))
(check-sat)
