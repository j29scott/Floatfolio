(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.neg (fp.mul RNE x12 x1))) (fp.add RNE (fp.add RNE (fp.div RNE x16 x8) (fp.neg x10)) (fp.div RNE (fp.add RNE x1 x11) (fp.mul RNE x9 x1)))) (fp.div RNE (fp.neg (fp.div RNE (fp.add RNE x9 x2) (fp.div RNE x9 x6))) (fp.add RNE (fp.div RNE (fp.sub RNE x3 x8) (fp.div RNE x20 x15)) (fp.add RNE (fp.mul RNE x2 x12) (fp.add RNE x19 x8))))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.div RNE (fp.sub RNE x12 x2) (fp.add RNE x6 x2)) (fp.sub RNE (fp.div RNE x8 x12) (fp.sub RNE x5 x1))) (fp.neg (fp.neg (fp.add RNE x3 x16)))) (fp.mul RNE (fp.add RNE (fp.neg (fp.add RNE x13 x7)) (fp.div RNE (fp.neg x2) (fp.add RNE x20 x15))) (fp.mul RNE (fp.sub RNE (fp.add RNE x15 x3) (fp.add RNE x18 x20)) (fp.neg (fp.neg x1))))))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.sub RNE (fp.add RNE x5 x3) (fp.sub RNE x3 x19)) (fp.div RNE (fp.neg x5) (fp.sub RNE x10 x17))) (fp.add RNE (fp.sub RNE (fp.neg x11) (fp.add RNE x7 x12)) (fp.div RNE (fp.neg x19) (fp.mul RNE x3 x6)))) (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x17 x13) (fp.add RNE x11 x1)) (fp.sub RNE (fp.neg x17) (fp.neg x0))) (fp.sub RNE (fp.add RNE (fp.mul RNE x18 x20) (fp.div RNE x1 x12)) (fp.neg (fp.div RNE x8 x16))))))
(assert (fp.geq (fp.neg (fp.div RNE (fp.sub RNE (fp.sub RNE x8 x13) (fp.add RNE x2 x9)) (fp.mul RNE (fp.neg x16) (fp.sub RNE x10 x20)))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.div RNE x9 x14) (fp.div RNE x11 x9)) (fp.mul RNE (fp.mul RNE x18 x11) (fp.div RNE x2 x16))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x4 x17) (fp.sub RNE x9 x8)) (fp.add RNE (fp.add RNE x3 x8) (fp.div RNE x11 x16))))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.div RNE (fp.neg x17) (fp.mul RNE x20 x4)) (fp.sub RNE (fp.add RNE x12 x2) (fp.div RNE x7 x9)))) (fp.mul RNE (fp.neg (fp.sub RNE (fp.mul RNE x10 x10) (fp.mul RNE x4 x14))) (fp.div RNE (fp.add RNE (fp.mul RNE x5 x7) (fp.add RNE x8 x7)) (fp.sub RNE (fp.add RNE x6 x12) (fp.add RNE x1 x20))))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.mul RNE (fp.sub RNE x12 x14) (fp.mul RNE x18 x0))) (fp.sub RNE (fp.div RNE (fp.neg x10) (fp.mul RNE x15 x18)) (fp.neg (fp.neg x1)))) (fp.mul RNE (fp.div RNE (fp.add RNE (fp.sub RNE x18 x15) (fp.add RNE x6 x0)) (fp.mul RNE (fp.neg x19) (fp.sub RNE x16 x0))) (fp.mul RNE (fp.div RNE (fp.add RNE x2 x6) (fp.sub RNE x20 x5)) (fp.add RNE (fp.div RNE x0 x18) (fp.neg x7))))))
(check-sat)
