(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.mul RNE (fp.add RNE x2 x2) (fp.div RNE x3 x15)) (fp.div RNE (fp.add RNE x8 x7) (fp.add RNE x9 x6))))
(assert (fp.lt (fp.add RNE (fp.add RNE x12 x17) (fp.mul RNE x15 x7)) (fp.mul RNE (fp.sub RNE x2 x16) (fp.neg x7))))
(assert (fp.leq (fp.add RNE (fp.div RNE x16 x9) (fp.mul RNE x17 x4)) (fp.add RNE (fp.sub RNE x2 x2) (fp.div RNE x3 x1))))
(assert (fp.gt (fp.neg (fp.add RNE x2 x17)) (fp.mul RNE (fp.div RNE x8 x1) (fp.sub RNE x15 x1))))
(assert (fp.gt (fp.neg (fp.add RNE x2 x10)) (fp.add RNE (fp.neg x8) (fp.add RNE x8 x0))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x16 x14) (fp.mul RNE x2 x2)) (fp.add RNE (fp.neg x14) (fp.sub RNE x4 x4))))
(assert (fp.leq (fp.neg (fp.mul RNE x13 x10)) (fp.mul RNE (fp.sub RNE x6 x13) (fp.div RNE x16 x7))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x12 x2) (fp.sub RNE x9 x17)) (fp.mul RNE (fp.add RNE x9 x3) (fp.div RNE x6 x15))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x10 x9) (fp.neg x16)) (fp.div RNE (fp.neg x13) (fp.add RNE x13 x9))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x5 x8) (fp.mul RNE x1 x5)) (fp.neg (fp.neg x17))))
(assert (fp.gt (fp.add RNE (fp.neg x5) (fp.add RNE x7 x8)) (fp.div RNE (fp.neg x6) (fp.add RNE x15 x17))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x3 x5) (fp.add RNE x12 x0)) (fp.add RNE (fp.mul RNE x12 x6) (fp.add RNE x17 x10))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x6 x0) (fp.div RNE x16 x10)) (fp.sub RNE (fp.div RNE x5 x7) (fp.add RNE x10 x2))))
(assert (fp.leq (fp.add RNE (fp.add RNE x3 x14) (fp.neg x2)) (fp.neg (fp.neg x4))))
(check-sat)
