(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.sub RNE (fp.neg x10) (fp.mul RNE x9 x6)) (fp.div RNE (fp.sub RNE x9 x16) (fp.mul RNE x11 x10))) (fp.div RNE (fp.sub RNE (fp.sub RNE x11 x12) (fp.mul RNE x16 x15)) (fp.sub RNE (fp.neg x13) (fp.add RNE x0 x2)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.add RNE x7 x12) (fp.mul RNE x12 x6))) (fp.div RNE (fp.div RNE (fp.div RNE x9 x0) (fp.sub RNE x3 x9)) (fp.div RNE (fp.div RNE x6 x13) (fp.add RNE x13 x14)))))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.sub RNE x16 x12) (fp.mul RNE x6 x4)) (fp.add RNE (fp.add RNE x4 x3) (fp.div RNE x9 x8))) (fp.add RNE (fp.add RNE (fp.sub RNE x11 x2) (fp.sub RNE x14 x0)) (fp.sub RNE (fp.add RNE x1 x8) (fp.div RNE x1 x5)))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.mul RNE x1 x3) (fp.add RNE x8 x15)) (fp.div RNE (fp.add RNE x16 x16) (fp.add RNE x8 x5))) (fp.sub RNE (fp.div RNE (fp.neg x6) (fp.add RNE x12 x12)) (fp.add RNE (fp.neg x6) (fp.mul RNE x8 x15)))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE x5 x10)) (fp.add RNE (fp.div RNE x0 x11) (fp.sub RNE x3 x3))) (fp.neg (fp.sub RNE (fp.sub RNE x8 x11) (fp.sub RNE x13 x14)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.add RNE x11 x12) (fp.add RNE x9 x3)) (fp.div RNE (fp.mul RNE x14 x1) (fp.mul RNE x6 x11))) (fp.sub RNE (fp.mul RNE (fp.div RNE x3 x5) (fp.div RNE x7 x9)) (fp.neg (fp.neg x11)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.div RNE x6 x8) (fp.div RNE x9 x12)) (fp.neg (fp.div RNE x7 x15))) (fp.mul RNE (fp.div RNE (fp.add RNE x12 x13) (fp.add RNE x4 x1)) (fp.sub RNE (fp.div RNE x14 x16) (fp.add RNE x14 x7)))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.neg x9) (fp.add RNE x7 x12)) (fp.mul RNE (fp.neg x9) (fp.neg x6))) (fp.add RNE (fp.div RNE (fp.add RNE x10 x1) (fp.add RNE x2 x6)) (fp.div RNE (fp.add RNE x11 x5) (fp.neg x13)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.neg x16) (fp.add RNE x1 x16)) (fp.neg (fp.sub RNE x15 x6))) (fp.neg (fp.mul RNE (fp.mul RNE x14 x1) (fp.div RNE x15 x14)))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.mul RNE x14 x2) (fp.sub RNE x6 x2)) (fp.div RNE (fp.neg x12) (fp.div RNE x3 x15))) (fp.add RNE (fp.sub RNE (fp.mul RNE x7 x12) (fp.neg x16)) (fp.mul RNE (fp.add RNE x6 x6) (fp.div RNE x16 x11)))))
(assert (fp.lt (fp.neg (fp.add RNE (fp.mul RNE x8 x12) (fp.div RNE x12 x0))) (fp.add RNE (fp.sub RNE (fp.sub RNE x11 x1) (fp.add RNE x13 x7)) (fp.add RNE (fp.mul RNE x10 x4) (fp.add RNE x1 x15)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.sub RNE x7 x6) (fp.neg x11)) (fp.div RNE (fp.mul RNE x11 x14) (fp.add RNE x3 x16))) (fp.sub RNE (fp.sub RNE (fp.add RNE x5 x16) (fp.sub RNE x5 x6)) (fp.mul RNE (fp.sub RNE x3 x7) (fp.mul RNE x9 x8)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.neg x12) (fp.div RNE x4 x4)) (fp.mul RNE (fp.div RNE x13 x14) (fp.mul RNE x16 x5))) (fp.sub RNE (fp.neg (fp.sub RNE x11 x5)) (fp.add RNE (fp.div RNE x13 x10) (fp.neg x4)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.add RNE x12 x12) (fp.sub RNE x5 x6)) (fp.add RNE (fp.add RNE x7 x15) (fp.sub RNE x1 x0))) (fp.neg (fp.neg (fp.mul RNE x10 x14)))))
(assert (fp.geq (fp.sub RNE (fp.div RNE (fp.div RNE x13 x8) (fp.mul RNE x3 x4)) (fp.div RNE (fp.neg x13) (fp.div RNE x13 x7))) (fp.neg (fp.mul RNE (fp.sub RNE x8 x0) (fp.mul RNE x14 x15)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.add RNE x12 x6) (fp.div RNE x8 x0)) (fp.sub RNE (fp.neg x0) (fp.div RNE x16 x4))) (fp.add RNE (fp.add RNE (fp.div RNE x0 x1) (fp.mul RNE x4 x10)) (fp.mul RNE (fp.sub RNE x1 x9) (fp.sub RNE x11 x6)))))
(check-sat)
