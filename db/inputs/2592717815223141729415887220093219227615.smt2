(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.div RNE x8 x16) (fp.mul RNE x15 x1)) (fp.sub RNE (fp.sub RNE x9 x4) (fp.add RNE x5 x2))) (fp.div RNE (fp.sub RNE (fp.sub RNE x11 x4) (fp.sub RNE x10 x15)) (fp.sub RNE (fp.neg x5) (fp.div RNE x3 x7)))))
(assert (fp.lt (fp.neg (fp.add RNE (fp.neg x9) (fp.div RNE x12 x9))) (fp.add RNE (fp.mul RNE (fp.sub RNE x7 x14) (fp.mul RNE x15 x5)) (fp.add RNE (fp.mul RNE x7 x10) (fp.neg x12)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.add RNE x2 x16) (fp.mul RNE x7 x0)) (fp.div RNE (fp.neg x2) (fp.neg x2))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x11 x13) (fp.sub RNE x3 x16)) (fp.add RNE (fp.sub RNE x9 x12) (fp.sub RNE x14 x11)))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.add RNE x7 x15) (fp.sub RNE x10 x14)) (fp.neg (fp.mul RNE x7 x13))) (fp.div RNE (fp.mul RNE (fp.mul RNE x5 x9) (fp.mul RNE x12 x15)) (fp.neg (fp.neg x15)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.neg x16) (fp.neg x2)) (fp.sub RNE (fp.mul RNE x0 x1) (fp.neg x6))) (fp.add RNE (fp.div RNE (fp.mul RNE x3 x16) (fp.mul RNE x10 x13)) (fp.mul RNE (fp.mul RNE x6 x15) (fp.add RNE x10 x0)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.mul RNE x8 x0)) (fp.mul RNE (fp.add RNE x2 x7) (fp.mul RNE x12 x5))) (fp.sub RNE (fp.neg (fp.neg x3)) (fp.add RNE (fp.neg x3) (fp.neg x8)))))
(check-sat)
