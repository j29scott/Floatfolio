(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.neg (fp.mul RNE x12 x1)) (fp.neg (fp.mul RNE x19 x8))) (fp.div RNE (fp.add RNE (fp.sub RNE x2 x14) (fp.neg x3)) (fp.neg (fp.sub RNE x18 x1)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.sub RNE x13 x11) (fp.mul RNE x5 x0)) (fp.mul RNE (fp.sub RNE x0 x6) (fp.sub RNE x2 x1))) (fp.neg (fp.add RNE (fp.neg x10) (fp.add RNE x7 x6)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.div RNE x19 x4) (fp.mul RNE x3 x17)) (fp.mul RNE (fp.add RNE x1 x3) (fp.add RNE x19 x6))) (fp.sub RNE (fp.neg (fp.mul RNE x13 x6)) (fp.add RNE (fp.mul RNE x9 x13) (fp.neg x9)))))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.div RNE x9 x15) (fp.sub RNE x15 x15)) (fp.add RNE (fp.mul RNE x11 x17) (fp.div RNE x2 x17))) (fp.sub RNE (fp.add RNE (fp.neg x12) (fp.neg x14)) (fp.div RNE (fp.div RNE x9 x0) (fp.sub RNE x19 x7)))))
(assert (fp.lt (fp.neg (fp.add RNE (fp.div RNE x17 x8) (fp.sub RNE x1 x15))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x5 x8) (fp.neg x5)) (fp.neg (fp.neg x13)))))
(assert (fp.geq (fp.neg (fp.neg (fp.add RNE x4 x6))) (fp.sub RNE (fp.neg (fp.sub RNE x11 x3)) (fp.mul RNE (fp.div RNE x1 x2) (fp.mul RNE x19 x0)))))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.div RNE x11 x19) (fp.mul RNE x11 x1)) (fp.add RNE (fp.div RNE x2 x1) (fp.div RNE x11 x19))) (fp.neg (fp.neg (fp.sub RNE x3 x12)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.mul RNE x14 x9) (fp.mul RNE x11 x15))) (fp.neg (fp.add RNE (fp.add RNE x17 x17) (fp.div RNE x11 x12)))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.sub RNE x19 x17) (fp.sub RNE x14 x6)) (fp.add RNE (fp.sub RNE x1 x9) (fp.mul RNE x9 x4))) (fp.neg (fp.neg (fp.neg x1)))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.sub RNE x3 x9) (fp.div RNE x6 x3)) (fp.neg (fp.sub RNE x11 x0))) (fp.sub RNE (fp.add RNE (fp.sub RNE x17 x12) (fp.sub RNE x5 x2)) (fp.add RNE (fp.add RNE x14 x16) (fp.div RNE x15 x19)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.neg x15) (fp.div RNE x5 x2)) (fp.neg (fp.sub RNE x0 x0))) (fp.sub RNE (fp.add RNE (fp.mul RNE x12 x10) (fp.neg x14)) (fp.div RNE (fp.add RNE x9 x14) (fp.neg x18)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.mul RNE x14 x9) (fp.div RNE x18 x8)) (fp.div RNE (fp.mul RNE x6 x1) (fp.div RNE x5 x9))) (fp.neg (fp.div RNE (fp.div RNE x2 x1) (fp.mul RNE x8 x2)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.sub RNE x6 x14) (fp.div RNE x0 x3))) (fp.neg (fp.div RNE (fp.neg x3) (fp.mul RNE x9 x12)))))
(assert (fp.leq (fp.neg (fp.neg (fp.neg x9))) (fp.div RNE (fp.sub RNE (fp.div RNE x8 x3) (fp.div RNE x15 x8)) (fp.mul RNE (fp.neg x17) (fp.sub RNE x16 x15)))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE x1 x3)) (fp.mul RNE (fp.neg x1) (fp.neg x7))) (fp.add RNE (fp.neg (fp.div RNE x4 x4)) (fp.add RNE (fp.mul RNE x14 x15) (fp.add RNE x7 x18)))))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.div RNE x18 x0) (fp.add RNE x9 x16)) (fp.neg (fp.div RNE x8 x8))) (fp.neg (fp.add RNE (fp.div RNE x8 x1) (fp.sub RNE x15 x4)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.sub RNE x4 x18) (fp.div RNE x19 x6))) (fp.neg (fp.neg (fp.div RNE x4 x3)))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.div RNE x15 x5) (fp.add RNE x0 x8)) (fp.neg (fp.div RNE x10 x4))) (fp.div RNE (fp.add RNE (fp.sub RNE x11 x11) (fp.neg x16)) (fp.add RNE (fp.neg x15) (fp.sub RNE x4 x17)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.add RNE x18 x13) (fp.div RNE x18 x5))) (fp.neg (fp.neg (fp.sub RNE x4 x17)))))
(check-sat)
