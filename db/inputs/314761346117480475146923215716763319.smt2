(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.neg x13)) (fp.add RNE (fp.neg x15) (fp.sub RNE x8 x6))) (fp.mul RNE (fp.add RNE (fp.add RNE x2 x16) (fp.add RNE x9 x14)) (fp.mul RNE (fp.div RNE x16 x15) (fp.neg x16)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.add RNE x3 x13) (fp.sub RNE x3 x5))) (fp.add RNE (fp.add RNE (fp.div RNE x10 x3) (fp.div RNE x5 x2)) (fp.neg (fp.div RNE x12 x5)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.div RNE x9 x0) (fp.sub RNE x12 x4)) (fp.add RNE (fp.mul RNE x4 x14) (fp.neg x13))) (fp.div RNE (fp.sub RNE (fp.neg x11) (fp.div RNE x11 x5)) (fp.mul RNE (fp.div RNE x7 x10) (fp.sub RNE x0 x4)))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE (fp.sub RNE x11 x2) (fp.neg x4)) (fp.sub RNE (fp.div RNE x13 x13) (fp.neg x2))) (fp.sub RNE (fp.sub RNE (fp.neg x7) (fp.add RNE x1 x6)) (fp.neg (fp.sub RNE x5 x8)))))
(assert (fp.leq (fp.neg (fp.neg (fp.div RNE x5 x0))) (fp.add RNE (fp.div RNE (fp.mul RNE x12 x2) (fp.div RNE x7 x6)) (fp.div RNE (fp.neg x10) (fp.div RNE x10 x1)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.div RNE x15 x4) (fp.add RNE x13 x8))) (fp.neg (fp.div RNE (fp.add RNE x6 x6) (fp.neg x12)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.mul RNE x16 x8) (fp.sub RNE x6 x16)) (fp.mul RNE (fp.neg x5) (fp.neg x2))) (fp.div RNE (fp.div RNE (fp.neg x12) (fp.neg x9)) (fp.neg (fp.sub RNE x10 x11)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.sub RNE x5 x15)) (fp.div RNE (fp.div RNE x2 x14) (fp.neg x11))) (fp.mul RNE (fp.mul RNE (fp.neg x12) (fp.div RNE x3 x16)) (fp.sub RNE (fp.add RNE x13 x12) (fp.neg x0)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.sub RNE x3 x10) (fp.div RNE x0 x8)) (fp.mul RNE (fp.mul RNE x4 x6) (fp.div RNE x8 x0))) (fp.sub RNE (fp.mul RNE (fp.div RNE x6 x4) (fp.div RNE x14 x1)) (fp.sub RNE (fp.div RNE x3 x3) (fp.sub RNE x13 x16)))))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.mul RNE x8 x11) (fp.add RNE x15 x0)) (fp.add RNE (fp.sub RNE x0 x1) (fp.div RNE x7 x15))) (fp.div RNE (fp.mul RNE (fp.add RNE x14 x2) (fp.div RNE x6 x5)) (fp.neg (fp.sub RNE x16 x9)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.mul RNE x8 x1)) (fp.neg (fp.div RNE x11 x12))) (fp.mul RNE (fp.sub RNE (fp.div RNE x10 x1) (fp.mul RNE x13 x14)) (fp.mul RNE (fp.neg x11) (fp.add RNE x0 x12)))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.sub RNE x14 x1) (fp.mul RNE x10 x6))) (fp.neg (fp.add RNE (fp.sub RNE x11 x16) (fp.mul RNE x5 x7)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.add RNE x6 x4) (fp.div RNE x14 x1))) (fp.sub RNE (fp.add RNE (fp.add RNE x8 x1) (fp.mul RNE x7 x16)) (fp.add RNE (fp.div RNE x6 x5) (fp.neg x10)))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.neg x2) (fp.mul RNE x14 x3))) (fp.add RNE (fp.add RNE (fp.neg x0) (fp.neg x2)) (fp.div RNE (fp.neg x5) (fp.mul RNE x5 x2)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.div RNE x1 x6) (fp.div RNE x8 x0)) (fp.div RNE (fp.add RNE x3 x4) (fp.div RNE x14 x1))) (fp.div RNE (fp.div RNE (fp.mul RNE x12 x7) (fp.mul RNE x2 x0)) (fp.sub RNE (fp.sub RNE x10 x14) (fp.div RNE x13 x13)))))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.div RNE x13 x11) (fp.neg x1)) (fp.mul RNE (fp.add RNE x12 x2) (fp.mul RNE x6 x1))) (fp.neg (fp.mul RNE (fp.add RNE x6 x14) (fp.sub RNE x15 x2)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.neg x6) (fp.sub RNE x10 x7)) (fp.div RNE (fp.div RNE x13 x12) (fp.div RNE x5 x12))) (fp.mul RNE (fp.neg (fp.div RNE x2 x1)) (fp.div RNE (fp.div RNE x13 x11) (fp.sub RNE x9 x10)))))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.div RNE x4 x0) (fp.neg x14)) (fp.neg (fp.sub RNE x2 x15))) (fp.sub RNE (fp.add RNE (fp.mul RNE x13 x3) (fp.neg x13)) (fp.div RNE (fp.sub RNE x4 x7) (fp.add RNE x15 x6)))))
(check-sat)
