(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.add RNE x13 x2) (fp.div RNE x11 x4)) (fp.add RNE (fp.add RNE x9 x20) (fp.sub RNE x21 x4))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x16 x15) (fp.div RNE x14 x16)) (fp.sub RNE (fp.sub RNE x0 x13) (fp.add RNE x8 x9))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x6 x8) (fp.add RNE x12 x0)) (fp.div RNE (fp.div RNE x17 x4) (fp.neg x3))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x0 x16) (fp.add RNE x7 x6)) (fp.neg (fp.div RNE x18 x13))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x13 x13) (fp.neg x13)) (fp.div RNE (fp.mul RNE x16 x10) (fp.mul RNE x22 x10))))
(assert (fp.geq (fp.neg (fp.mul RNE x16 x12)) (fp.sub RNE (fp.add RNE x21 x11) (fp.neg x6))))
(assert (fp.eq (fp.div RNE (fp.div RNE x15 x6) (fp.mul RNE x21 x19)) (fp.sub RNE (fp.add RNE x13 x3) (fp.sub RNE x17 x22))))
(assert (fp.gt (fp.div RNE (fp.neg x6) (fp.add RNE x21 x0)) (fp.sub RNE (fp.mul RNE x0 x3) (fp.sub RNE x21 x20))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x18 x4) (fp.sub RNE x22 x4)) (fp.add RNE (fp.div RNE x12 x4) (fp.sub RNE x9 x16))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x2 x14) (fp.add RNE x1 x1)) (fp.div RNE (fp.add RNE x15 x22) (fp.sub RNE x21 x13))))
(assert (fp.geq (fp.sub RNE (fp.neg x3) (fp.mul RNE x22 x3)) (fp.div RNE (fp.sub RNE x20 x18) (fp.neg x21))))
(check-sat)
