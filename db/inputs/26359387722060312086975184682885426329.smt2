(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(declare-const x26 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.div RNE x0 x26) (fp.div RNE x20 x10))) (fp.div RNE (fp.add RNE (fp.add RNE x17 x5) (fp.div RNE x6 x13)) (fp.add RNE (fp.add RNE x16 x20) (fp.mul RNE x0 x4)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.mul RNE x26 x13) (fp.div RNE x18 x22)) (fp.div RNE (fp.sub RNE x6 x7) (fp.mul RNE x0 x2))) (fp.sub RNE (fp.add RNE (fp.div RNE x20 x24) (fp.sub RNE x12 x23)) (fp.neg (fp.neg x12)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.add RNE x5 x5) (fp.mul RNE x5 x19)) (fp.neg (fp.neg x7))) (fp.sub RNE (fp.neg (fp.sub RNE x16 x22)) (fp.mul RNE (fp.div RNE x11 x13) (fp.mul RNE x15 x2)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.mul RNE x21 x18) (fp.sub RNE x21 x18)) (fp.neg (fp.neg x0))) (fp.sub RNE (fp.neg (fp.mul RNE x22 x1)) (fp.add RNE (fp.sub RNE x7 x9) (fp.neg x25)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.mul RNE x3 x8) (fp.add RNE x19 x8)) (fp.div RNE (fp.mul RNE x7 x15) (fp.neg x6))) (fp.div RNE (fp.mul RNE (fp.div RNE x26 x10) (fp.add RNE x17 x5)) (fp.mul RNE (fp.neg x20) (fp.add RNE x17 x20)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.div RNE x8 x13)) (fp.add RNE (fp.div RNE x2 x19) (fp.mul RNE x10 x15))) (fp.add RNE (fp.sub RNE (fp.mul RNE x12 x6) (fp.div RNE x21 x16)) (fp.mul RNE (fp.div RNE x11 x25) (fp.mul RNE x13 x3)))))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.neg x19) (fp.add RNE x13 x22)) (fp.div RNE (fp.neg x14) (fp.neg x12))) (fp.mul RNE (fp.neg (fp.sub RNE x24 x14)) (fp.neg (fp.neg x21)))))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.div RNE x1 x3) (fp.div RNE x3 x10)) (fp.mul RNE (fp.sub RNE x1 x12) (fp.sub RNE x20 x0))) (fp.sub RNE (fp.neg (fp.neg x4)) (fp.add RNE (fp.div RNE x2 x14) (fp.add RNE x21 x16)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.neg x24)) (fp.sub RNE (fp.mul RNE x8 x6) (fp.neg x26))) (fp.mul RNE (fp.div RNE (fp.mul RNE x10 x9) (fp.div RNE x9 x15)) (fp.div RNE (fp.sub RNE x21 x26) (fp.div RNE x8 x12)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.div RNE x4 x8) (fp.div RNE x24 x12))) (fp.add RNE (fp.mul RNE (fp.div RNE x5 x11) (fp.mul RNE x0 x25)) (fp.add RNE (fp.add RNE x17 x5) (fp.sub RNE x7 x7)))))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.add RNE x23 x6) (fp.mul RNE x19 x11)) (fp.div RNE (fp.mul RNE x19 x5) (fp.sub RNE x12 x11))) (fp.div RNE (fp.mul RNE (fp.add RNE x17 x17) (fp.div RNE x5 x4)) (fp.neg (fp.sub RNE x14 x15)))))
(check-sat)
