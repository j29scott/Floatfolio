(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.neg x8) (fp.neg x13)) (fp.sub RNE (fp.mul RNE x13 x9) (fp.add RNE x5 x0))) (fp.neg (fp.add RNE (fp.sub RNE x5 x10) (fp.div RNE x6 x13)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.neg x11)) (fp.add RNE (fp.neg x7) (fp.neg x8))) (fp.neg (fp.neg (fp.add RNE x4 x9)))))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.div RNE x10 x10) (fp.neg x2)) (fp.neg (fp.div RNE x9 x4))) (fp.div RNE (fp.sub RNE (fp.div RNE x1 x8) (fp.div RNE x3 x3)) (fp.mul RNE (fp.sub RNE x0 x1) (fp.neg x2)))))
(check-sat)
