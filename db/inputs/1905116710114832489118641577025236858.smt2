(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.add RNE x8 x5) (fp.div RNE x21 x20)) (fp.add RNE (fp.mul RNE x8 x13) (fp.neg x8))))
(assert (fp.eq (fp.div RNE (fp.div RNE x15 x14) (fp.add RNE x11 x17)) (fp.neg (fp.add RNE x13 x5))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x5 x3) (fp.add RNE x14 x20)) (fp.mul RNE (fp.mul RNE x3 x7) (fp.sub RNE x6 x8))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x6 x6) (fp.sub RNE x18 x3)) (fp.neg (fp.mul RNE x16 x21))))
(assert (fp.eq (fp.add RNE (fp.div RNE x8 x5) (fp.sub RNE x11 x2)) (fp.div RNE (fp.sub RNE x20 x1) (fp.neg x16))))
(assert (fp.leq (fp.add RNE (fp.neg x7) (fp.neg x10)) (fp.add RNE (fp.neg x3) (fp.add RNE x0 x8))))
(assert (fp.geq (fp.sub RNE (fp.neg x0) (fp.add RNE x13 x7)) (fp.neg (fp.neg x16))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x13 x14) (fp.add RNE x21 x18)) (fp.mul RNE (fp.mul RNE x13 x3) (fp.add RNE x4 x21))))
(assert (fp.gt (fp.mul RNE (fp.neg x0) (fp.mul RNE x14 x2)) (fp.div RNE (fp.div RNE x4 x18) (fp.mul RNE x14 x19))))
(assert (fp.lt (fp.div RNE (fp.div RNE x1 x13) (fp.sub RNE x0 x5)) (fp.neg (fp.sub RNE x19 x17))))
(assert (fp.lt (fp.div RNE (fp.add RNE x12 x17) (fp.div RNE x3 x17)) (fp.neg (fp.sub RNE x21 x10))))
(check-sat)
