(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.sub RNE (fp.add RNE x15 x2) (fp.div RNE x6 x13)) (fp.add RNE (fp.sub RNE x9 x14) (fp.neg x9))))
(assert (fp.gt (fp.neg (fp.neg x1)) (fp.neg (fp.neg x6))))
(assert (fp.eq (fp.neg (fp.add RNE x3 x9)) (fp.add RNE (fp.neg x9) (fp.div RNE x11 x4))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x11 x4) (fp.add RNE x14 x1)) (fp.add RNE (fp.sub RNE x0 x12) (fp.div RNE x7 x10))))
(assert (fp.lt (fp.add RNE (fp.add RNE x6 x15) (fp.neg x3)) (fp.div RNE (fp.div RNE x4 x2) (fp.mul RNE x2 x3))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x13 x1) (fp.mul RNE x3 x14)) (fp.add RNE (fp.add RNE x12 x4) (fp.mul RNE x14 x8))))
(assert (fp.geq (fp.mul RNE (fp.neg x12) (fp.neg x13)) (fp.sub RNE (fp.div RNE x12 x3) (fp.neg x11))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x5 x0) (fp.sub RNE x3 x9)) (fp.sub RNE (fp.mul RNE x8 x1) (fp.mul RNE x8 x13))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x4 x15) (fp.sub RNE x5 x6)) (fp.div RNE (fp.neg x3) (fp.mul RNE x1 x1))))
(assert (fp.geq (fp.mul RNE (fp.neg x6) (fp.mul RNE x1 x1)) (fp.sub RNE (fp.sub RNE x7 x5) (fp.div RNE x12 x10))))
(assert (fp.lt (fp.neg (fp.add RNE x10 x14)) (fp.div RNE (fp.neg x5) (fp.neg x1))))
(assert (fp.lt (fp.mul RNE (fp.neg x3) (fp.neg x6)) (fp.div RNE (fp.mul RNE x2 x5) (fp.mul RNE x7 x15))))
(assert (fp.geq (fp.neg (fp.div RNE x3 x6)) (fp.neg (fp.sub RNE x7 x7))))
(assert (fp.geq (fp.div RNE (fp.neg x6) (fp.sub RNE x3 x5)) (fp.neg (fp.neg x9))))
(assert (fp.gt (fp.neg (fp.add RNE x7 x5)) (fp.mul RNE (fp.add RNE x6 x7) (fp.div RNE x7 x10))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x11 x4) (fp.add RNE x0 x10)) (fp.add RNE (fp.add RNE x15 x9) (fp.add RNE x8 x15))))
(check-sat)
