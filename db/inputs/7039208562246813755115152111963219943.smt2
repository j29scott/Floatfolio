(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x4 x8) (fp.sub RNE x19 x21)) (fp.add RNE (fp.add RNE x3 x24) (fp.neg x2))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x17 x19) (fp.mul RNE x16 x11)) (fp.sub RNE (fp.mul RNE x5 x19) (fp.add RNE x1 x18))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x19 x22) (fp.neg x19)) (fp.div RNE (fp.div RNE x17 x18) (fp.sub RNE x10 x23))))
(assert (fp.gt (fp.mul RNE (fp.neg x15) (fp.div RNE x17 x4)) (fp.div RNE (fp.neg x2) (fp.add RNE x17 x7))))
(assert (fp.lt (fp.add RNE (fp.div RNE x11 x12) (fp.neg x11)) (fp.neg (fp.add RNE x4 x5))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x16 x13) (fp.neg x2)) (fp.sub RNE (fp.sub RNE x1 x12) (fp.mul RNE x14 x9))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x10 x6) (fp.div RNE x13 x23)) (fp.div RNE (fp.mul RNE x3 x9) (fp.neg x14))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x10 x15) (fp.add RNE x2 x19)) (fp.div RNE (fp.add RNE x0 x12) (fp.neg x22))))
(assert (fp.lt (fp.div RNE (fp.neg x13) (fp.div RNE x13 x23)) (fp.mul RNE (fp.sub RNE x2 x1) (fp.div RNE x20 x13))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x19 x20) (fp.add RNE x8 x12)) (fp.neg (fp.div RNE x7 x5))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x2 x20) (fp.sub RNE x11 x18)) (fp.sub RNE (fp.div RNE x24 x17) (fp.div RNE x6 x1))))
(check-sat)
