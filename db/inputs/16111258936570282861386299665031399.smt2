(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.add RNE (fp.add RNE x7 x6) (fp.neg x0))) (fp.add RNE (fp.mul RNE (fp.div RNE x10 x8) (fp.mul RNE x9 x7)) (fp.sub RNE (fp.add RNE x4 x10) (fp.div RNE x0 x3)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.neg x12) (fp.mul RNE x13 x5))) (fp.mul RNE (fp.sub RNE (fp.div RNE x4 x5) (fp.div RNE x5 x9)) (fp.div RNE (fp.div RNE x4 x10) (fp.add RNE x6 x12)))))
(assert (fp.lt (fp.div RNE (fp.add RNE (fp.div RNE x11 x9) (fp.mul RNE x2 x5)) (fp.mul RNE (fp.neg x8) (fp.add RNE x3 x3))) (fp.neg (fp.add RNE (fp.div RNE x1 x0) (fp.div RNE x7 x8)))))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.add RNE x7 x13) (fp.div RNE x13 x13)) (fp.mul RNE (fp.neg x6) (fp.sub RNE x11 x5))) (fp.div RNE (fp.mul RNE (fp.neg x2) (fp.mul RNE x13 x14)) (fp.sub RNE (fp.mul RNE x14 x6) (fp.neg x1)))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.mul RNE x13 x3)) (fp.mul RNE (fp.neg x11) (fp.neg x2))) (fp.neg (fp.neg (fp.sub RNE x13 x13)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.mul RNE x2 x9) (fp.div RNE x0 x12)) (fp.neg (fp.mul RNE x9 x12))) (fp.neg (fp.neg (fp.mul RNE x9 x11)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.neg x10)) (fp.div RNE (fp.sub RNE x8 x11) (fp.neg x4))) (fp.mul RNE (fp.mul RNE (fp.add RNE x11 x6) (fp.add RNE x2 x14)) (fp.mul RNE (fp.div RNE x3 x1) (fp.neg x9)))))
(assert (fp.lt (fp.neg (fp.add RNE (fp.sub RNE x14 x14) (fp.add RNE x12 x0))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x10 x0) (fp.mul RNE x9 x3)) (fp.sub RNE (fp.div RNE x0 x8) (fp.neg x3)))))
(check-sat)
