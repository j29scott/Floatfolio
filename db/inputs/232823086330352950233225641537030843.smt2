(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.neg (fp.sub RNE (fp.mul RNE x22 x8) (fp.neg x17))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x12 x6) (fp.add RNE x21 x15)) (fp.sub RNE (fp.div RNE x20 x23) (fp.neg x20)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.add RNE x13 x22) (fp.add RNE x16 x14)) (fp.div RNE (fp.add RNE x18 x16) (fp.add RNE x20 x10))) (fp.neg (fp.sub RNE (fp.mul RNE x7 x7) (fp.add RNE x11 x4)))))
(assert (fp.lt (fp.add RNE (fp.div RNE (fp.div RNE x21 x21) (fp.div RNE x11 x4)) (fp.neg (fp.div RNE x21 x3))) (fp.add RNE (fp.mul RNE (fp.div RNE x9 x21) (fp.mul RNE x3 x19)) (fp.sub RNE (fp.neg x13) (fp.div RNE x16 x17)))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.mul RNE x19 x11) (fp.div RNE x16 x15)) (fp.sub RNE (fp.div RNE x8 x24) (fp.add RNE x11 x9))) (fp.mul RNE (fp.div RNE (fp.add RNE x18 x9) (fp.div RNE x0 x24)) (fp.div RNE (fp.add RNE x12 x23) (fp.neg x14)))))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.mul RNE x16 x5) (fp.neg x13)) (fp.mul RNE (fp.div RNE x3 x16) (fp.add RNE x7 x9))) (fp.add RNE (fp.div RNE (fp.add RNE x6 x8) (fp.mul RNE x1 x17)) (fp.neg (fp.sub RNE x4 x22)))))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.neg x15)) (fp.add RNE (fp.add RNE x10 x22) (fp.sub RNE x1 x6))) (fp.mul RNE (fp.add RNE (fp.add RNE x22 x14) (fp.mul RNE x21 x9)) (fp.add RNE (fp.sub RNE x10 x4) (fp.div RNE x9 x5)))))
(assert (fp.lt (fp.div RNE (fp.neg (fp.sub RNE x4 x10)) (fp.sub RNE (fp.sub RNE x4 x11) (fp.neg x2))) (fp.neg (fp.mul RNE (fp.add RNE x2 x2) (fp.neg x16)))))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.mul RNE x21 x21) (fp.neg x7)) (fp.mul RNE (fp.add RNE x12 x23) (fp.add RNE x19 x10))) (fp.mul RNE (fp.sub RNE (fp.add RNE x1 x21) (fp.add RNE x19 x3)) (fp.sub RNE (fp.div RNE x22 x7) (fp.mul RNE x1 x4)))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.sub RNE x12 x17) (fp.neg x13))) (fp.mul RNE (fp.div RNE (fp.mul RNE x10 x9) (fp.div RNE x8 x15)) (fp.div RNE (fp.mul RNE x14 x12) (fp.neg x9)))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.add RNE x17 x2) (fp.div RNE x13 x13)) (fp.mul RNE (fp.mul RNE x10 x9) (fp.div RNE x20 x6))) (fp.add RNE (fp.mul RNE (fp.div RNE x3 x18) (fp.neg x2)) (fp.add RNE (fp.div RNE x3 x0) (fp.add RNE x17 x22)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.div RNE x5 x24)) (fp.add RNE (fp.add RNE x6 x5) (fp.mul RNE x3 x21))) (fp.add RNE (fp.add RNE (fp.neg x14) (fp.add RNE x23 x9)) (fp.div RNE (fp.neg x6) (fp.add RNE x5 x15)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.sub RNE x14 x17)) (fp.neg (fp.mul RNE x21 x17))) (fp.add RNE (fp.div RNE (fp.neg x5) (fp.add RNE x7 x12)) (fp.sub RNE (fp.div RNE x14 x17) (fp.div RNE x6 x8)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.sub RNE x5 x16) (fp.neg x3)) (fp.sub RNE (fp.div RNE x12 x23) (fp.sub RNE x6 x20))) (fp.add RNE (fp.add RNE (fp.div RNE x21 x24) (fp.div RNE x8 x23)) (fp.sub RNE (fp.mul RNE x23 x15) (fp.mul RNE x24 x21)))))
(assert (fp.geq (fp.neg (fp.div RNE (fp.mul RNE x20 x24) (fp.mul RNE x21 x5))) (fp.sub RNE (fp.neg (fp.mul RNE x21 x3)) (fp.add RNE (fp.div RNE x3 x11) (fp.sub RNE x23 x17)))))
(assert (fp.gt (fp.neg (fp.neg (fp.neg x7))) (fp.div RNE (fp.neg (fp.add RNE x24 x11)) (fp.add RNE (fp.div RNE x5 x3) (fp.sub RNE x0 x24)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.sub RNE x11 x21) (fp.div RNE x5 x3))) (fp.neg (fp.neg (fp.neg x5)))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.div RNE x24 x6) (fp.sub RNE x7 x8)) (fp.mul RNE (fp.add RNE x8 x1) (fp.neg x3))) (fp.div RNE (fp.add RNE (fp.mul RNE x6 x9) (fp.neg x19)) (fp.mul RNE (fp.mul RNE x0 x23) (fp.mul RNE x13 x2)))))
(assert (fp.gt (fp.neg (fp.sub RNE (fp.mul RNE x1 x12) (fp.add RNE x2 x9))) (fp.sub RNE (fp.neg (fp.mul RNE x3 x7)) (fp.add RNE (fp.sub RNE x0 x17) (fp.sub RNE x18 x18)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.add RNE x9 x19) (fp.mul RNE x10 x16))) (fp.sub RNE (fp.neg (fp.neg x18)) (fp.div RNE (fp.div RNE x4 x1) (fp.add RNE x2 x2)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.mul RNE x1 x5)) (fp.div RNE (fp.sub RNE x2 x18) (fp.neg x18))) (fp.add RNE (fp.neg (fp.mul RNE x1 x18)) (fp.sub RNE (fp.div RNE x1 x16) (fp.sub RNE x15 x3)))))
(check-sat)
