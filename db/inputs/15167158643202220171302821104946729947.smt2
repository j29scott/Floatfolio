(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.sub RNE x4 x1) (fp.sub RNE x0 x13)) (fp.sub RNE (fp.div RNE x7 x13) (fp.mul RNE x3 x4))) (fp.div RNE (fp.div RNE (fp.mul RNE x16 x3) (fp.mul RNE x2 x6)) (fp.mul RNE (fp.neg x16) (fp.sub RNE x11 x6)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.neg x11) (fp.sub RNE x3 x16)) (fp.mul RNE (fp.div RNE x13 x4) (fp.mul RNE x1 x5))) (fp.sub RNE (fp.mul RNE (fp.neg x14) (fp.neg x15)) (fp.sub RNE (fp.mul RNE x3 x15) (fp.add RNE x2 x7)))))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.add RNE x6 x5) (fp.add RNE x15 x12)) (fp.div RNE (fp.sub RNE x4 x2) (fp.neg x5))) (fp.mul RNE (fp.sub RNE (fp.div RNE x11 x16) (fp.add RNE x15 x15)) (fp.mul RNE (fp.sub RNE x10 x13) (fp.div RNE x1 x9)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.mul RNE x7 x9) (fp.div RNE x6 x10)) (fp.div RNE (fp.sub RNE x14 x13) (fp.add RNE x12 x2))) (fp.div RNE (fp.neg (fp.mul RNE x10 x8)) (fp.neg (fp.mul RNE x1 x4)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.neg x1) (fp.add RNE x14 x9)) (fp.neg (fp.neg x9))) (fp.mul RNE (fp.add RNE (fp.sub RNE x8 x11) (fp.neg x9)) (fp.div RNE (fp.add RNE x16 x4) (fp.add RNE x2 x12)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.neg x15)) (fp.div RNE (fp.neg x15) (fp.mul RNE x10 x6))) (fp.div RNE (fp.neg (fp.mul RNE x12 x8)) (fp.mul RNE (fp.sub RNE x12 x8) (fp.sub RNE x10 x12)))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.neg x14) (fp.add RNE x15 x4)) (fp.div RNE (fp.div RNE x2 x3) (fp.mul RNE x10 x0))) (fp.mul RNE (fp.neg (fp.add RNE x14 x11)) (fp.sub RNE (fp.sub RNE x9 x8) (fp.neg x10)))))
(check-sat)
