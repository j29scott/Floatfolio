(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.add RNE x10 x14) (fp.sub RNE x5 x10)) (fp.neg (fp.sub RNE x11 x3))) (fp.mul RNE (fp.div RNE (fp.mul RNE x10 x5) (fp.div RNE x4 x7)) (fp.mul RNE (fp.div RNE x9 x1) (fp.div RNE x6 x14)))))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.add RNE x10 x3) (fp.neg x12)) (fp.sub RNE (fp.mul RNE x13 x13) (fp.div RNE x13 x11))) (fp.neg (fp.mul RNE (fp.sub RNE x2 x3) (fp.neg x11)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.neg x10) (fp.div RNE x12 x3)) (fp.div RNE (fp.mul RNE x3 x9) (fp.add RNE x12 x7))) (fp.neg (fp.add RNE (fp.mul RNE x7 x0) (fp.sub RNE x6 x11)))))
(assert (fp.geq (fp.sub RNE (fp.add RNE (fp.sub RNE x14 x10) (fp.neg x11)) (fp.div RNE (fp.div RNE x12 x1) (fp.mul RNE x0 x4))) (fp.add RNE (fp.add RNE (fp.sub RNE x4 x12) (fp.div RNE x7 x6)) (fp.div RNE (fp.add RNE x13 x12) (fp.mul RNE x10 x7)))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE (fp.sub RNE x8 x14) (fp.sub RNE x7 x11)) (fp.neg (fp.mul RNE x3 x5))) (fp.div RNE (fp.neg (fp.neg x11)) (fp.div RNE (fp.div RNE x0 x7) (fp.add RNE x9 x12)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.sub RNE x14 x3) (fp.add RNE x8 x5)) (fp.add RNE (fp.add RNE x0 x6) (fp.div RNE x13 x12))) (fp.neg (fp.neg (fp.neg x1)))))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.div RNE x1 x12)) (fp.add RNE (fp.div RNE x7 x6) (fp.div RNE x4 x7))) (fp.neg (fp.sub RNE (fp.neg x9) (fp.neg x10)))))
(assert (fp.lt (fp.neg (fp.add RNE (fp.sub RNE x6 x13) (fp.mul RNE x1 x4))) (fp.div RNE (fp.neg (fp.add RNE x11 x0)) (fp.add RNE (fp.neg x12) (fp.mul RNE x13 x2)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.neg x3) (fp.add RNE x2 x2)) (fp.add RNE (fp.mul RNE x12 x1) (fp.sub RNE x4 x7))) (fp.div RNE (fp.add RNE (fp.add RNE x4 x13) (fp.neg x9)) (fp.mul RNE (fp.neg x6) (fp.neg x4)))))
(check-sat)
