(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.mul RNE (fp.neg x10) (fp.mul RNE x7 x5)) (fp.div RNE (fp.sub RNE x3 x10) (fp.sub RNE x7 x9))))
(assert (fp.eq (fp.add RNE (fp.add RNE x7 x6) (fp.sub RNE x3 x4)) (fp.neg (fp.div RNE x6 x5))))
(assert (fp.gt (fp.div RNE (fp.div RNE x6 x9) (fp.neg x1)) (fp.mul RNE (fp.mul RNE x11 x1) (fp.neg x7))))
(assert (fp.lt (fp.sub RNE (fp.neg x4) (fp.add RNE x11 x10)) (fp.neg (fp.neg x7))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x11 x12) (fp.mul RNE x1 x12)) (fp.add RNE (fp.div RNE x2 x5) (fp.div RNE x13 x9))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x1 x3) (fp.neg x8)) (fp.neg (fp.mul RNE x12 x11))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x13 x5) (fp.neg x6)) (fp.neg (fp.div RNE x12 x5))))
(assert (fp.lt (fp.div RNE (fp.add RNE x12 x0) (fp.mul RNE x7 x8)) (fp.mul RNE (fp.sub RNE x7 x13) (fp.mul RNE x8 x10))))
(assert (fp.eq (fp.add RNE (fp.div RNE x12 x8) (fp.add RNE x3 x12)) (fp.sub RNE (fp.mul RNE x5 x10) (fp.div RNE x4 x1))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x0 x6) (fp.sub RNE x0 x11)) (fp.add RNE (fp.neg x1) (fp.neg x8))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE x5 x4) (fp.neg x10)) (fp.div RNE (fp.neg x11) (fp.add RNE x9 x1))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x2 x10) (fp.add RNE x13 x12)) (fp.neg (fp.mul RNE x5 x9))))
(assert (fp.lt (fp.sub RNE (fp.neg x9) (fp.sub RNE x4 x4)) (fp.sub RNE (fp.sub RNE x3 x11) (fp.mul RNE x7 x8))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x2 x11) (fp.div RNE x9 x12)) (fp.mul RNE (fp.add RNE x4 x5) (fp.neg x2))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x5 x9) (fp.neg x1)) (fp.div RNE (fp.neg x2) (fp.div RNE x4 x13))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x7 x2) (fp.mul RNE x5 x3)) (fp.sub RNE (fp.sub RNE x5 x13) (fp.add RNE x0 x1))))
(assert (fp.eq (fp.add RNE (fp.div RNE x11 x1) (fp.mul RNE x0 x9)) (fp.sub RNE (fp.neg x6) (fp.neg x2))))
(check-sat)
