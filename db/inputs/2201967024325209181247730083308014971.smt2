(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.div RNE x4 x14)) (fp.add RNE (fp.sub RNE x3 x0) (fp.neg x16))) (fp.div RNE (fp.mul RNE (fp.neg x23) (fp.neg x15)) (fp.div RNE (fp.div RNE x25 x22) (fp.mul RNE x4 x8)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.div RNE x20 x25) (fp.sub RNE x1 x14))) (fp.mul RNE (fp.sub RNE (fp.add RNE x3 x16) (fp.sub RNE x6 x17)) (fp.neg (fp.div RNE x2 x16)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.neg x2) (fp.div RNE x6 x24)) (fp.add RNE (fp.div RNE x23 x0) (fp.neg x18))) (fp.div RNE (fp.neg (fp.mul RNE x3 x19)) (fp.sub RNE (fp.neg x6) (fp.sub RNE x13 x6)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.mul RNE x1 x17) (fp.div RNE x2 x8)) (fp.add RNE (fp.mul RNE x13 x17) (fp.add RNE x15 x25))) (fp.div RNE (fp.add RNE (fp.sub RNE x6 x3) (fp.div RNE x15 x10)) (fp.sub RNE (fp.neg x5) (fp.sub RNE x11 x8)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.mul RNE x19 x16) (fp.mul RNE x22 x17)) (fp.neg (fp.mul RNE x8 x10))) (fp.div RNE (fp.sub RNE (fp.add RNE x18 x13) (fp.div RNE x13 x13)) (fp.neg (fp.neg x22)))))
(assert (fp.lt (fp.div RNE (fp.add RNE (fp.div RNE x1 x23) (fp.div RNE x20 x12)) (fp.div RNE (fp.sub RNE x15 x9) (fp.add RNE x24 x6))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x9 x11) (fp.neg x24)) (fp.sub RNE (fp.sub RNE x7 x24) (fp.add RNE x22 x19)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.neg x12)) (fp.add RNE (fp.neg x9) (fp.mul RNE x21 x7))) (fp.mul RNE (fp.div RNE (fp.sub RNE x6 x3) (fp.add RNE x0 x6)) (fp.sub RNE (fp.add RNE x19 x21) (fp.mul RNE x14 x1)))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE x6 x19)) (fp.add RNE (fp.neg x9) (fp.sub RNE x1 x17))) (fp.sub RNE (fp.neg (fp.add RNE x16 x15)) (fp.neg (fp.div RNE x1 x19)))))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.mul RNE x25 x2) (fp.neg x8)) (fp.neg (fp.div RNE x12 x8))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x8 x24) (fp.add RNE x12 x11)) (fp.div RNE (fp.neg x23) (fp.div RNE x18 x0)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.mul RNE x25 x13) (fp.sub RNE x8 x19)) (fp.div RNE (fp.add RNE x16 x18) (fp.sub RNE x12 x2))) (fp.mul RNE (fp.add RNE (fp.mul RNE x25 x10) (fp.sub RNE x0 x3)) (fp.mul RNE (fp.mul RNE x13 x4) (fp.add RNE x23 x3)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.sub RNE x23 x11) (fp.neg x16)) (fp.add RNE (fp.mul RNE x11 x24) (fp.neg x15))) (fp.mul RNE (fp.add RNE (fp.mul RNE x13 x13) (fp.mul RNE x7 x6)) (fp.mul RNE (fp.sub RNE x10 x24) (fp.add RNE x25 x6)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.div RNE x4 x23) (fp.div RNE x7 x18)) (fp.mul RNE (fp.neg x8) (fp.mul RNE x21 x18))) (fp.sub RNE (fp.add RNE (fp.sub RNE x17 x4) (fp.div RNE x15 x11)) (fp.neg (fp.neg x19)))))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.mul RNE x22 x9) (fp.add RNE x7 x20)) (fp.add RNE (fp.mul RNE x18 x19) (fp.add RNE x4 x23))) (fp.add RNE (fp.add RNE (fp.mul RNE x23 x5) (fp.div RNE x9 x7)) (fp.add RNE (fp.mul RNE x8 x13) (fp.sub RNE x14 x2)))))
(assert (fp.gt (fp.neg (fp.neg (fp.mul RNE x5 x25))) (fp.add RNE (fp.neg (fp.sub RNE x10 x20)) (fp.mul RNE (fp.mul RNE x20 x4) (fp.neg x6)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.sub RNE x14 x16) (fp.sub RNE x3 x5)) (fp.div RNE (fp.add RNE x8 x5) (fp.mul RNE x21 x19))) (fp.add RNE (fp.sub RNE (fp.neg x22) (fp.sub RNE x19 x7)) (fp.sub RNE (fp.add RNE x7 x9) (fp.mul RNE x14 x11)))))
(check-sat)
