(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.add RNE (fp.neg x3) (fp.div RNE x6 x1)) (fp.sub RNE (fp.add RNE x8 x10) (fp.mul RNE x3 x7))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x5 x10) (fp.sub RNE x2 x5)) (fp.sub RNE (fp.neg x7) (fp.sub RNE x11 x4))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x4 x5) (fp.neg x9)) (fp.sub RNE (fp.div RNE x9 x10) (fp.div RNE x9 x2))))
(assert (fp.lt (fp.div RNE (fp.neg x9) (fp.mul RNE x0 x6)) (fp.sub RNE (fp.div RNE x3 x8) (fp.add RNE x7 x4))))
(assert (fp.lt (fp.div RNE (fp.div RNE x2 x0) (fp.div RNE x7 x3)) (fp.div RNE (fp.mul RNE x0 x5) (fp.div RNE x7 x1))))
(assert (fp.eq (fp.mul RNE (fp.neg x2) (fp.mul RNE x10 x9)) (fp.neg (fp.sub RNE x3 x3))))
(assert (fp.gt (fp.div RNE (fp.div RNE x7 x10) (fp.mul RNE x6 x10)) (fp.mul RNE (fp.sub RNE x11 x6) (fp.sub RNE x6 x5))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x3 x6) (fp.mul RNE x6 x0)) (fp.sub RNE (fp.add RNE x2 x4) (fp.add RNE x10 x2))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x6 x9) (fp.mul RNE x3 x3)) (fp.neg (fp.add RNE x2 x10))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x5 x5) (fp.add RNE x6 x5)) (fp.sub RNE (fp.add RNE x11 x2) (fp.mul RNE x4 x6))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x9 x6) (fp.sub RNE x5 x5)) (fp.div RNE (fp.div RNE x10 x11) (fp.neg x3))))
(assert (fp.geq (fp.div RNE (fp.add RNE x8 x5) (fp.sub RNE x9 x11)) (fp.add RNE (fp.mul RNE x5 x2) (fp.div RNE x8 x0))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x11 x1) (fp.div RNE x9 x6)) (fp.neg (fp.mul RNE x4 x9))))
(assert (fp.eq (fp.neg (fp.mul RNE x6 x4)) (fp.mul RNE (fp.div RNE x1 x1) (fp.add RNE x2 x2))))
(assert (fp.geq (fp.div RNE (fp.div RNE x5 x8) (fp.div RNE x4 x8)) (fp.sub RNE (fp.add RNE x0 x10) (fp.add RNE x9 x11))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x6 x9) (fp.sub RNE x9 x3)) (fp.div RNE (fp.add RNE x6 x10) (fp.neg x3))))
(assert (fp.leq (fp.div RNE (fp.neg x4) (fp.div RNE x7 x0)) (fp.add RNE (fp.div RNE x6 x5) (fp.mul RNE x8 x3))))
(assert (fp.leq (fp.neg (fp.mul RNE x11 x7)) (fp.sub RNE (fp.neg x9) (fp.neg x2))))
(assert (fp.lt (fp.neg (fp.add RNE x11 x2)) (fp.add RNE (fp.mul RNE x2 x2) (fp.sub RNE x9 x2))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x3 x0) (fp.mul RNE x2 x1)) (fp.mul RNE (fp.neg x4) (fp.div RNE x3 x0))))
(check-sat)
