(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.neg x4) (fp.sub RNE x9 x9)) (fp.add RNE (fp.sub RNE x13 x6) (fp.div RNE x12 x6))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x11 x20) (fp.div RNE x5 x3)) (fp.div RNE (fp.add RNE x6 x19) (fp.mul RNE x0 x13))))
(assert (fp.geq (fp.add RNE (fp.add RNE x18 x5) (fp.add RNE x9 x8)) (fp.div RNE (fp.div RNE x4 x5) (fp.add RNE x1 x18))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x11 x22) (fp.sub RNE x20 x12)) (fp.add RNE (fp.add RNE x21 x9) (fp.mul RNE x0 x7))))
(assert (fp.leq (fp.div RNE (fp.neg x0) (fp.add RNE x1 x3)) (fp.sub RNE (fp.neg x11) (fp.div RNE x19 x1))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x11 x0) (fp.neg x12)) (fp.div RNE (fp.mul RNE x10 x14) (fp.div RNE x17 x21))))
(assert (fp.eq (fp.div RNE (fp.add RNE x3 x8) (fp.neg x9)) (fp.add RNE (fp.neg x0) (fp.div RNE x4 x1))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x9 x8) (fp.add RNE x20 x4)) (fp.sub RNE (fp.div RNE x3 x4) (fp.div RNE x4 x16))))
(assert (fp.gt (fp.add RNE (fp.div RNE x11 x4) (fp.sub RNE x10 x6)) (fp.sub RNE (fp.sub RNE x3 x0) (fp.neg x17))))
(assert (fp.leq (fp.neg (fp.sub RNE x4 x4)) (fp.sub RNE (fp.mul RNE x16 x2) (fp.add RNE x4 x1))))
(check-sat)
