(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x6 x4) (fp.add RNE x9 x1)) (fp.div RNE (fp.div RNE x12 x0) (fp.sub RNE x2 x5))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x3 x10) (fp.neg x7)) (fp.sub RNE (fp.mul RNE x3 x10) (fp.neg x5))))
(assert (fp.lt (fp.neg (fp.div RNE x5 x2)) (fp.sub RNE (fp.add RNE x9 x12) (fp.neg x1))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x9 x8) (fp.add RNE x5 x6)) (fp.mul RNE (fp.sub RNE x7 x7) (fp.add RNE x12 x2))))
(assert (fp.gt (fp.neg (fp.mul RNE x1 x10)) (fp.div RNE (fp.neg x5) (fp.neg x9))))
(assert (fp.lt (fp.add RNE (fp.add RNE x9 x10) (fp.mul RNE x9 x2)) (fp.div RNE (fp.add RNE x8 x4) (fp.mul RNE x8 x11))))
(assert (fp.lt (fp.div RNE (fp.div RNE x0 x0) (fp.add RNE x4 x3)) (fp.neg (fp.sub RNE x6 x11))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x5 x6) (fp.mul RNE x3 x0)) (fp.div RNE (fp.add RNE x1 x11) (fp.div RNE x7 x5))))
(assert (fp.geq (fp.neg (fp.neg x0)) (fp.sub RNE (fp.sub RNE x3 x4) (fp.sub RNE x3 x3))))
(assert (fp.lt (fp.div RNE (fp.div RNE x9 x10) (fp.mul RNE x3 x4)) (fp.sub RNE (fp.add RNE x11 x1) (fp.sub RNE x7 x10))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x12 x6) (fp.neg x8)) (fp.neg (fp.add RNE x7 x2))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x4 x4) (fp.sub RNE x9 x7)) (fp.sub RNE (fp.div RNE x4 x2) (fp.div RNE x8 x8))))
(assert (fp.gt (fp.div RNE (fp.add RNE x2 x12) (fp.div RNE x5 x11)) (fp.sub RNE (fp.div RNE x7 x0) (fp.neg x10))))
(assert (fp.leq (fp.neg (fp.add RNE x8 x5)) (fp.sub RNE (fp.div RNE x7 x10) (fp.add RNE x12 x4))))
(assert (fp.lt (fp.add RNE (fp.div RNE x6 x11) (fp.add RNE x7 x5)) (fp.sub RNE (fp.neg x8) (fp.add RNE x0 x12))))
(check-sat)
