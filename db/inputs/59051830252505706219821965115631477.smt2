(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.sub RNE (fp.neg x12) (fp.mul RNE x3 x10)) (fp.add RNE (fp.add RNE x17 x14) (fp.neg x14))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x9 x14) (fp.div RNE x8 x16)) (fp.mul RNE (fp.mul RNE x0 x12) (fp.div RNE x9 x4))))
(assert (fp.eq (fp.add RNE (fp.div RNE x5 x16) (fp.sub RNE x12 x7)) (fp.add RNE (fp.neg x12) (fp.div RNE x13 x1))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x0 x7) (fp.div RNE x12 x6)) (fp.sub RNE (fp.neg x7) (fp.sub RNE x2 x0))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x17 x12) (fp.neg x12)) (fp.sub RNE (fp.mul RNE x7 x8) (fp.neg x6))))
(assert (fp.eq (fp.add RNE (fp.neg x1) (fp.sub RNE x12 x0)) (fp.add RNE (fp.div RNE x13 x3) (fp.add RNE x6 x6))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x4 x3) (fp.div RNE x12 x4)) (fp.div RNE (fp.mul RNE x6 x16) (fp.add RNE x14 x0))))
(assert (fp.geq (fp.div RNE (fp.add RNE x16 x7) (fp.div RNE x10 x4)) (fp.mul RNE (fp.mul RNE x5 x8) (fp.div RNE x6 x7))))
(assert (fp.lt (fp.neg (fp.mul RNE x0 x6)) (fp.div RNE (fp.mul RNE x4 x0) (fp.neg x0))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x17 x6) (fp.sub RNE x13 x9)) (fp.sub RNE (fp.neg x1) (fp.neg x17))))
(assert (fp.leq (fp.sub RNE (fp.neg x12) (fp.mul RNE x10 x0)) (fp.sub RNE (fp.div RNE x17 x16) (fp.mul RNE x12 x8))))
(assert (fp.geq (fp.div RNE (fp.div RNE x16 x0) (fp.mul RNE x7 x12)) (fp.add RNE (fp.mul RNE x16 x12) (fp.neg x6))))
(check-sat)
