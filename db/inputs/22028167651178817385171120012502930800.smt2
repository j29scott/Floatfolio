(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.mul RNE x3 x5) (fp.neg x2)) (fp.mul RNE (fp.add RNE x0 x4) (fp.neg x10))))
(assert (fp.lt (fp.neg (fp.mul RNE x7 x6)) (fp.add RNE (fp.add RNE x11 x10) (fp.mul RNE x10 x0))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x1 x7) (fp.div RNE x12 x9)) (fp.mul RNE (fp.div RNE x12 x4) (fp.neg x8))))
(assert (fp.eq (fp.mul RNE (fp.neg x10) (fp.div RNE x6 x4)) (fp.mul RNE (fp.mul RNE x7 x4) (fp.add RNE x5 x11))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x10 x2) (fp.div RNE x11 x0)) (fp.div RNE (fp.neg x9) (fp.div RNE x8 x1))))
(assert (fp.geq (fp.add RNE (fp.add RNE x5 x8) (fp.sub RNE x5 x3)) (fp.add RNE (fp.add RNE x1 x9) (fp.neg x10))))
(assert (fp.lt (fp.div RNE (fp.div RNE x5 x7) (fp.div RNE x3 x11)) (fp.mul RNE (fp.mul RNE x5 x5) (fp.sub RNE x7 x12))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x8 x5) (fp.sub RNE x2 x2)) (fp.sub RNE (fp.mul RNE x3 x11) (fp.add RNE x6 x1))))
(assert (fp.eq (fp.div RNE (fp.add RNE x10 x1) (fp.add RNE x7 x7)) (fp.mul RNE (fp.sub RNE x4 x0) (fp.add RNE x8 x9))))
(assert (fp.lt (fp.div RNE (fp.add RNE x2 x0) (fp.div RNE x3 x7)) (fp.div RNE (fp.neg x9) (fp.sub RNE x4 x4))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x0 x10) (fp.sub RNE x3 x8)) (fp.add RNE (fp.sub RNE x2 x4) (fp.neg x4))))
(assert (fp.gt (fp.neg (fp.neg x1)) (fp.mul RNE (fp.add RNE x11 x0) (fp.sub RNE x4 x8))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x3 x0) (fp.add RNE x7 x1)) (fp.add RNE (fp.mul RNE x2 x8) (fp.neg x12))))
(assert (fp.leq (fp.neg (fp.sub RNE x4 x5)) (fp.sub RNE (fp.neg x9) (fp.sub RNE x4 x9))))
(assert (fp.leq (fp.mul RNE (fp.neg x1) (fp.add RNE x5 x9)) (fp.mul RNE (fp.div RNE x12 x4) (fp.sub RNE x3 x6))))
(check-sat)
