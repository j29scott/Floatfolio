(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.sub RNE (fp.mul RNE x7 x8) (fp.add RNE x4 x2)) (fp.mul RNE (fp.div RNE x0 x6) (fp.mul RNE x4 x3))) (fp.neg (fp.div RNE (fp.add RNE x6 x12) (fp.mul RNE x2 x8)))) (fp.mul RNE (fp.neg (fp.sub RNE (fp.add RNE x9 x0) (fp.add RNE x12 x8))) (fp.neg (fp.sub RNE (fp.sub RNE x7 x5) (fp.neg x7))))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.div RNE (fp.add RNE x11 x0) (fp.div RNE x10 x2)) (fp.sub RNE (fp.neg x0) (fp.sub RNE x11 x8)))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.mul RNE x5 x4) (fp.neg x9)) (fp.sub RNE (fp.sub RNE x6 x10) (fp.neg x5))) (fp.div RNE (fp.div RNE (fp.mul RNE x10 x9) (fp.sub RNE x0 x0)) (fp.add RNE (fp.sub RNE x2 x3) (fp.add RNE x5 x3))))))
(check-sat)
