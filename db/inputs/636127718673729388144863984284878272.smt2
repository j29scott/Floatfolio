(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.mul RNE (fp.div RNE x12 x2) (fp.neg x13)) (fp.mul RNE (fp.neg x7) (fp.sub RNE x8 x8))))
(assert (fp.lt (fp.div RNE (fp.div RNE x9 x4) (fp.add RNE x14 x4)) (fp.mul RNE (fp.neg x14) (fp.sub RNE x0 x14))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x12 x6) (fp.sub RNE x1 x16)) (fp.add RNE (fp.div RNE x16 x6) (fp.neg x11))))
(assert (fp.lt (fp.neg (fp.mul RNE x7 x4)) (fp.sub RNE (fp.mul RNE x3 x5) (fp.mul RNE x4 x2))))
(assert (fp.lt (fp.add RNE (fp.neg x5) (fp.sub RNE x7 x3)) (fp.neg (fp.div RNE x2 x1))))
(assert (fp.lt (fp.sub RNE (fp.neg x6) (fp.add RNE x1 x6)) (fp.sub RNE (fp.div RNE x6 x6) (fp.neg x9))))
(assert (fp.eq (fp.neg (fp.mul RNE x14 x8)) (fp.div RNE (fp.mul RNE x5 x7) (fp.sub RNE x10 x16))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x7 x4) (fp.add RNE x0 x12)) (fp.div RNE (fp.add RNE x15 x4) (fp.div RNE x12 x16))))
(assert (fp.gt (fp.add RNE (fp.div RNE x14 x15) (fp.sub RNE x16 x5)) (fp.div RNE (fp.sub RNE x1 x0) (fp.add RNE x15 x3))))
(assert (fp.geq (fp.div RNE (fp.neg x16) (fp.div RNE x12 x7)) (fp.mul RNE (fp.neg x15) (fp.div RNE x15 x7))))
(assert (fp.eq (fp.div RNE (fp.div RNE x8 x8) (fp.neg x15)) (fp.mul RNE (fp.div RNE x7 x8) (fp.neg x11))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x10 x7) (fp.neg x13)) (fp.mul RNE (fp.add RNE x9 x2) (fp.sub RNE x9 x3))))
(assert (fp.geq (fp.mul RNE (fp.neg x1) (fp.sub RNE x0 x13)) (fp.div RNE (fp.div RNE x0 x6) (fp.neg x15))))
(check-sat)
