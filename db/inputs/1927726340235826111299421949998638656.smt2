(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.neg x3)) (fp.div RNE (fp.mul RNE x12 x4) (fp.neg x6))) (fp.div RNE (fp.add RNE (fp.mul RNE x0 x9) (fp.add RNE x12 x8)) (fp.div RNE (fp.neg x7) (fp.neg x11)))))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.sub RNE x6 x8) (fp.neg x2)) (fp.mul RNE (fp.neg x10) (fp.add RNE x13 x14))) (fp.neg (fp.add RNE (fp.div RNE x9 x14) (fp.mul RNE x9 x2)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.neg x6) (fp.add RNE x5 x6)) (fp.sub RNE (fp.mul RNE x10 x3) (fp.neg x1))) (fp.mul RNE (fp.div RNE (fp.neg x12) (fp.div RNE x4 x6)) (fp.div RNE (fp.mul RNE x4 x5) (fp.sub RNE x9 x12)))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.div RNE x3 x5) (fp.sub RNE x7 x3)) (fp.mul RNE (fp.div RNE x8 x10) (fp.mul RNE x9 x4))) (fp.sub RNE (fp.sub RNE (fp.div RNE x3 x6) (fp.neg x4)) (fp.sub RNE (fp.mul RNE x2 x5) (fp.div RNE x7 x8)))))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.mul RNE x14 x8) (fp.div RNE x11 x7)) (fp.div RNE (fp.mul RNE x12 x8) (fp.add RNE x10 x5))) (fp.div RNE (fp.add RNE (fp.div RNE x4 x11) (fp.add RNE x12 x13)) (fp.mul RNE (fp.mul RNE x14 x9) (fp.div RNE x4 x3)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.add RNE x7 x13) (fp.sub RNE x3 x0))) (fp.add RNE (fp.add RNE (fp.mul RNE x12 x10) (fp.mul RNE x9 x0)) (fp.sub RNE (fp.add RNE x14 x10) (fp.div RNE x4 x0)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.div RNE x10 x6) (fp.div RNE x5 x8))) (fp.mul RNE (fp.neg (fp.add RNE x10 x6)) (fp.div RNE (fp.div RNE x0 x12) (fp.sub RNE x0 x0)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.sub RNE x8 x9) (fp.div RNE x13 x4))) (fp.sub RNE (fp.sub RNE (fp.neg x3) (fp.neg x3)) (fp.div RNE (fp.div RNE x9 x13) (fp.neg x5)))))
(check-sat)
