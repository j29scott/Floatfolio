(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.div RNE (fp.add RNE x2 x9) (fp.sub RNE x17 x0)) (fp.div RNE (fp.add RNE x4 x17) (fp.sub RNE x4 x6))))
(assert (fp.leq (fp.neg (fp.sub RNE x5 x21)) (fp.add RNE (fp.div RNE x7 x20) (fp.mul RNE x15 x8))))
(assert (fp.geq (fp.neg (fp.sub RNE x7 x17)) (fp.neg (fp.div RNE x2 x16))))
(assert (fp.leq (fp.sub RNE (fp.neg x19) (fp.div RNE x8 x19)) (fp.div RNE (fp.neg x17) (fp.div RNE x5 x6))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x0 x8) (fp.mul RNE x0 x12)) (fp.mul RNE (fp.mul RNE x12 x2) (fp.neg x0))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x8 x0) (fp.sub RNE x20 x2)) (fp.neg (fp.add RNE x13 x1))))
(assert (fp.eq (fp.neg (fp.div RNE x3 x17)) (fp.div RNE (fp.add RNE x1 x9) (fp.sub RNE x20 x9))))
(assert (fp.leq (fp.neg (fp.mul RNE x14 x13)) (fp.neg (fp.sub RNE x6 x8))))
(assert (fp.lt (fp.neg (fp.add RNE x11 x10)) (fp.mul RNE (fp.neg x6) (fp.sub RNE x14 x14))))
(assert (fp.eq (fp.neg (fp.mul RNE x18 x8)) (fp.sub RNE (fp.add RNE x17 x1) (fp.mul RNE x14 x6))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x1 x1) (fp.mul RNE x8 x19)) (fp.neg (fp.div RNE x10 x19))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x13 x4) (fp.add RNE x14 x12)) (fp.neg (fp.neg x18))))
(assert (fp.geq (fp.neg (fp.mul RNE x1 x13)) (fp.sub RNE (fp.add RNE x18 x21) (fp.add RNE x20 x8))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x10 x12) (fp.neg x2)) (fp.div RNE (fp.add RNE x7 x16) (fp.neg x0))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x10 x5) (fp.div RNE x12 x17)) (fp.add RNE (fp.neg x21) (fp.neg x9))))
(assert (fp.eq (fp.add RNE (fp.neg x20) (fp.neg x6)) (fp.neg (fp.add RNE x6 x4))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x5 x18) (fp.div RNE x13 x7)) (fp.add RNE (fp.neg x8) (fp.mul RNE x9 x13))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x1 x19) (fp.div RNE x4 x10)) (fp.mul RNE (fp.neg x19) (fp.mul RNE x18 x2))))
(assert (fp.leq (fp.div RNE (fp.div RNE x5 x1) (fp.mul RNE x20 x3)) (fp.neg (fp.div RNE x11 x6))))
(check-sat)
