(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.div RNE (fp.sub RNE x4 x5) (fp.neg x0)) (fp.mul RNE (fp.neg x2) (fp.neg x5))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE x10 x8) (fp.div RNE x8 x10)) (fp.sub RNE (fp.div RNE x9 x4) (fp.neg x13))))
(assert (fp.gt (fp.neg (fp.sub RNE x5 x2)) (fp.div RNE (fp.mul RNE x8 x6) (fp.div RNE x11 x6))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x7 x5) (fp.div RNE x1 x8)) (fp.sub RNE (fp.neg x10) (fp.mul RNE x3 x7))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x3 x3) (fp.sub RNE x8 x5)) (fp.mul RNE (fp.mul RNE x12 x13) (fp.mul RNE x9 x10))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x6 x12) (fp.mul RNE x2 x10)) (fp.add RNE (fp.add RNE x1 x9) (fp.add RNE x2 x9))))
(assert (fp.gt (fp.neg (fp.sub RNE x8 x8)) (fp.div RNE (fp.div RNE x13 x4) (fp.div RNE x5 x7))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x3 x7) (fp.neg x10)) (fp.add RNE (fp.div RNE x6 x5) (fp.mul RNE x2 x11))))
(assert (fp.geq (fp.div RNE (fp.neg x7) (fp.div RNE x1 x3)) (fp.sub RNE (fp.mul RNE x6 x10) (fp.div RNE x2 x1))))
(assert (fp.lt (fp.neg (fp.mul RNE x11 x13)) (fp.div RNE (fp.sub RNE x7 x0) (fp.neg x3))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x13 x4) (fp.div RNE x11 x2)) (fp.div RNE (fp.add RNE x12 x7) (fp.div RNE x10 x0))))
(assert (fp.geq (fp.div RNE (fp.div RNE x12 x13) (fp.mul RNE x7 x10)) (fp.sub RNE (fp.add RNE x13 x11) (fp.div RNE x11 x11))))
(assert (fp.lt (fp.mul RNE (fp.neg x9) (fp.sub RNE x5 x7)) (fp.add RNE (fp.div RNE x6 x0) (fp.add RNE x6 x10))))
(assert (fp.eq (fp.div RNE (fp.div RNE x13 x8) (fp.add RNE x3 x4)) (fp.sub RNE (fp.add RNE x9 x11) (fp.neg x9))))
(check-sat)
