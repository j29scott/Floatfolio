(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.sub RNE (fp.div RNE x0 x9) (fp.add RNE x7 x7)) (fp.neg (fp.sub RNE x3 x3))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x0 x6) (fp.neg x3)) (fp.add RNE (fp.mul RNE x6 x6) (fp.add RNE x2 x3))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x3 x1) (fp.add RNE x3 x2)) (fp.sub RNE (fp.neg x9) (fp.div RNE x11 x7))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x3 x2) (fp.add RNE x11 x5)) (fp.sub RNE (fp.div RNE x1 x0) (fp.add RNE x5 x0))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x1 x11) (fp.add RNE x4 x7)) (fp.neg (fp.neg x7))))
(assert (fp.lt (fp.neg (fp.neg x0)) (fp.sub RNE (fp.sub RNE x6 x0) (fp.div RNE x3 x4))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x7 x5) (fp.neg x7)) (fp.add RNE (fp.mul RNE x11 x2) (fp.neg x7))))
(assert (fp.lt (fp.div RNE (fp.div RNE x8 x0) (fp.div RNE x10 x8)) (fp.add RNE (fp.neg x5) (fp.neg x0))))
(assert (fp.eq (fp.div RNE (fp.div RNE x3 x0) (fp.add RNE x4 x4)) (fp.mul RNE (fp.sub RNE x6 x1) (fp.div RNE x11 x6))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x8 x7) (fp.sub RNE x1 x5)) (fp.mul RNE (fp.mul RNE x2 x5) (fp.add RNE x7 x7))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x9 x5) (fp.neg x7)) (fp.neg (fp.neg x1))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x8 x4) (fp.mul RNE x9 x8)) (fp.mul RNE (fp.mul RNE x10 x3) (fp.mul RNE x0 x4))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x9 x0) (fp.div RNE x1 x10)) (fp.sub RNE (fp.neg x7) (fp.add RNE x2 x10))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x9 x6) (fp.sub RNE x1 x11)) (fp.mul RNE (fp.div RNE x6 x7) (fp.sub RNE x3 x8))))
(assert (fp.lt (fp.sub RNE (fp.div RNE x8 x7) (fp.sub RNE x6 x7)) (fp.sub RNE (fp.div RNE x1 x3) (fp.add RNE x10 x1))))
(assert (fp.geq (fp.add RNE (fp.div RNE x8 x4) (fp.sub RNE x3 x6)) (fp.mul RNE (fp.neg x4) (fp.sub RNE x7 x8))))
(check-sat)
