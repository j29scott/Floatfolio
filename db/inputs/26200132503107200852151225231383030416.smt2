(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.neg x14) (fp.mul RNE x1 x5)) (fp.neg (fp.sub RNE x11 x6))) (fp.div RNE (fp.sub RNE (fp.sub RNE x6 x7) (fp.neg x2)) (fp.add RNE (fp.mul RNE x2 x4) (fp.neg x3)))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.neg x10) (fp.mul RNE x11 x19)) (fp.neg (fp.sub RNE x21 x2))) (fp.add RNE (fp.neg (fp.mul RNE x8 x5)) (fp.sub RNE (fp.mul RNE x17 x16) (fp.mul RNE x21 x13)))))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.div RNE x19 x20)) (fp.neg (fp.add RNE x14 x12))) (fp.div RNE (fp.add RNE (fp.div RNE x4 x17) (fp.neg x15)) (fp.sub RNE (fp.neg x18) (fp.div RNE x15 x4)))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.sub RNE x0 x5)) (fp.div RNE (fp.neg x5) (fp.sub RNE x18 x0))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x16 x20) (fp.sub RNE x18 x15)) (fp.sub RNE (fp.div RNE x11 x11) (fp.neg x15)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.mul RNE x5 x11) (fp.mul RNE x11 x12)) (fp.mul RNE (fp.neg x4) (fp.sub RNE x13 x11))) (fp.mul RNE (fp.add RNE (fp.div RNE x13 x1) (fp.add RNE x8 x5)) (fp.add RNE (fp.mul RNE x20 x15) (fp.neg x0)))))
(assert (fp.eq (fp.neg (fp.neg (fp.neg x3))) (fp.neg (fp.sub RNE (fp.sub RNE x19 x15) (fp.add RNE x21 x20)))))
(assert (fp.leq (fp.neg (fp.neg (fp.add RNE x5 x1))) (fp.add RNE (fp.add RNE (fp.mul RNE x7 x2) (fp.neg x18)) (fp.mul RNE (fp.mul RNE x6 x7) (fp.div RNE x10 x7)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.neg x16)) (fp.div RNE (fp.mul RNE x9 x20) (fp.add RNE x18 x10))) (fp.add RNE (fp.mul RNE (fp.div RNE x5 x2) (fp.sub RNE x8 x20)) (fp.div RNE (fp.add RNE x8 x4) (fp.neg x15)))))
(check-sat)
