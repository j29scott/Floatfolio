(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.div RNE x12 x0) (fp.neg x1)) (fp.mul RNE (fp.add RNE x9 x1) (fp.add RNE x18 x3))) (fp.neg (fp.neg (fp.mul RNE x0 x9)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.sub RNE x8 x5) (fp.sub RNE x5 x7)) (fp.sub RNE (fp.sub RNE x18 x9) (fp.sub RNE x2 x6))) (fp.neg (fp.neg (fp.div RNE x15 x2)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.div RNE x10 x16) (fp.div RNE x15 x4)) (fp.div RNE (fp.div RNE x9 x4) (fp.sub RNE x16 x9))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x1 x6) (fp.add RNE x0 x4)) (fp.add RNE (fp.add RNE x17 x1) (fp.div RNE x8 x4)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.mul RNE x11 x15) (fp.sub RNE x0 x16)) (fp.mul RNE (fp.sub RNE x15 x10) (fp.div RNE x17 x18))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x9 x15) (fp.mul RNE x5 x5)) (fp.sub RNE (fp.sub RNE x5 x4) (fp.div RNE x6 x9)))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.add RNE x13 x12) (fp.neg x13)) (fp.neg (fp.div RNE x16 x12))) (fp.mul RNE (fp.add RNE (fp.div RNE x15 x15) (fp.neg x10)) (fp.neg (fp.add RNE x11 x16)))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.mul RNE x15 x5) (fp.mul RNE x13 x8)) (fp.sub RNE (fp.mul RNE x17 x5) (fp.sub RNE x0 x10))) (fp.div RNE (fp.mul RNE (fp.add RNE x12 x11) (fp.div RNE x10 x1)) (fp.neg (fp.add RNE x13 x6)))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.div RNE x1 x7) (fp.mul RNE x14 x17)) (fp.sub RNE (fp.add RNE x14 x18) (fp.add RNE x4 x5))) (fp.neg (fp.div RNE (fp.mul RNE x15 x11) (fp.sub RNE x8 x15)))))
(assert (fp.geq (fp.add RNE (fp.neg (fp.div RNE x7 x7)) (fp.neg (fp.div RNE x13 x7))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x10 x3) (fp.div RNE x18 x11)) (fp.sub RNE (fp.mul RNE x6 x15) (fp.sub RNE x8 x9)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.sub RNE x2 x10) (fp.neg x4)) (fp.add RNE (fp.mul RNE x17 x2) (fp.add RNE x18 x8))) (fp.mul RNE (fp.neg (fp.div RNE x18 x18)) (fp.mul RNE (fp.mul RNE x14 x17) (fp.div RNE x4 x9)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.neg x15) (fp.mul RNE x8 x3)) (fp.neg (fp.sub RNE x14 x17))) (fp.neg (fp.neg (fp.mul RNE x0 x18)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.sub RNE x4 x10) (fp.add RNE x1 x4)) (fp.div RNE (fp.div RNE x1 x17) (fp.neg x14))) (fp.neg (fp.neg (fp.mul RNE x7 x0)))))
(check-sat)
