(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.neg x13) (fp.sub RNE x10 x12)) (fp.div RNE (fp.neg x14) (fp.div RNE x0 x17))) (fp.div RNE (fp.mul RNE (fp.neg x17) (fp.div RNE x7 x4)) (fp.sub RNE (fp.neg x4) (fp.sub RNE x5 x9)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x16 x7) (fp.div RNE x10 x2)) (fp.sub RNE (fp.sub RNE x16 x7) (fp.mul RNE x12 x18))) (fp.neg (fp.neg (fp.add RNE x4 x0)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x17 x0) (fp.add RNE x14 x17)) (fp.sub RNE (fp.sub RNE x12 x11) (fp.neg x19))) (fp.div RNE (fp.div RNE (fp.add RNE x1 x8) (fp.neg x11)) (fp.mul RNE (fp.neg x11) (fp.neg x14)))))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.add RNE x5 x14) (fp.neg x6)) (fp.neg (fp.div RNE x7 x8))) (fp.sub RNE (fp.neg (fp.mul RNE x7 x6)) (fp.mul RNE (fp.div RNE x11 x15) (fp.mul RNE x2 x1)))))
(assert (fp.gt (fp.neg (fp.neg (fp.add RNE x13 x11))) (fp.add RNE (fp.sub RNE (fp.neg x7) (fp.mul RNE x16 x5)) (fp.div RNE (fp.mul RNE x0 x7) (fp.add RNE x8 x16)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.sub RNE x19 x17)) (fp.sub RNE (fp.sub RNE x19 x7) (fp.neg x7))) (fp.mul RNE (fp.neg (fp.div RNE x13 x6)) (fp.add RNE (fp.neg x0) (fp.sub RNE x2 x2)))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE (fp.add RNE x7 x12) (fp.sub RNE x5 x17)) (fp.add RNE (fp.add RNE x12 x12) (fp.sub RNE x18 x13))) (fp.neg (fp.mul RNE (fp.add RNE x3 x16) (fp.neg x4)))))
(check-sat)
