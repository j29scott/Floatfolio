(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.mul RNE x3 x9) (fp.mul RNE x19 x9)) (fp.add RNE (fp.mul RNE x2 x1) (fp.sub RNE x11 x9))) (fp.neg (fp.neg (fp.mul RNE x4 x5)))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.neg x18) (fp.mul RNE x11 x16))) (fp.sub RNE (fp.mul RNE (fp.neg x7) (fp.sub RNE x3 x3)) (fp.add RNE (fp.mul RNE x2 x1) (fp.neg x14)))))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.neg x14) (fp.neg x12)) (fp.neg (fp.div RNE x4 x12))) (fp.mul RNE (fp.div RNE (fp.sub RNE x19 x7) (fp.neg x8)) (fp.neg (fp.add RNE x5 x19)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.add RNE x17 x6)) (fp.mul RNE (fp.mul RNE x19 x11) (fp.div RNE x15 x0))) (fp.mul RNE (fp.neg (fp.mul RNE x1 x19)) (fp.mul RNE (fp.div RNE x13 x0) (fp.sub RNE x11 x2)))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.neg x12) (fp.sub RNE x0 x19)) (fp.div RNE (fp.add RNE x3 x1) (fp.sub RNE x14 x6))) (fp.add RNE (fp.neg (fp.mul RNE x6 x1)) (fp.mul RNE (fp.neg x15) (fp.mul RNE x1 x19)))))
(assert (fp.geq (fp.neg (fp.neg (fp.sub RNE x6 x14))) (fp.neg (fp.sub RNE (fp.add RNE x15 x18) (fp.add RNE x13 x2)))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.neg x17)) (fp.div RNE (fp.neg x15) (fp.mul RNE x14 x6))) (fp.div RNE (fp.add RNE (fp.sub RNE x3 x15) (fp.add RNE x8 x2)) (fp.mul RNE (fp.div RNE x6 x12) (fp.neg x13)))))
(check-sat)
