(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.div RNE (fp.neg x7) (fp.neg x12)) (fp.div RNE (fp.sub RNE x8 x8) (fp.div RNE x5 x11))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x2 x2) (fp.mul RNE x8 x8)) (fp.add RNE (fp.sub RNE x2 x2) (fp.mul RNE x8 x3))))
(assert (fp.gt (fp.sub RNE (fp.neg x9) (fp.neg x4)) (fp.sub RNE (fp.mul RNE x13 x7) (fp.sub RNE x11 x1))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x10 x1) (fp.sub RNE x13 x6)) (fp.add RNE (fp.mul RNE x4 x5) (fp.div RNE x9 x11))))
(assert (fp.leq (fp.neg (fp.sub RNE x9 x5)) (fp.neg (fp.neg x11))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x11 x7) (fp.add RNE x1 x8)) (fp.div RNE (fp.sub RNE x8 x4) (fp.neg x10))))
(assert (fp.geq (fp.mul RNE (fp.neg x10) (fp.add RNE x1 x4)) (fp.neg (fp.neg x13))))
(assert (fp.leq (fp.neg (fp.mul RNE x10 x13)) (fp.mul RNE (fp.neg x12) (fp.sub RNE x5 x0))))
(assert (fp.eq (fp.add RNE (fp.neg x2) (fp.neg x1)) (fp.neg (fp.neg x0))))
(assert (fp.eq (fp.sub RNE (fp.neg x5) (fp.neg x0)) (fp.div RNE (fp.sub RNE x8 x1) (fp.sub RNE x8 x8))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x1 x5) (fp.mul RNE x7 x2)) (fp.div RNE (fp.add RNE x7 x8) (fp.mul RNE x8 x12))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x11 x9) (fp.mul RNE x4 x13)) (fp.neg (fp.neg x6))))
(assert (fp.leq (fp.neg (fp.sub RNE x9 x5)) (fp.div RNE (fp.neg x6) (fp.neg x12))))
(assert (fp.eq (fp.neg (fp.add RNE x13 x4)) (fp.div RNE (fp.div RNE x1 x8) (fp.mul RNE x4 x1))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x2 x5) (fp.neg x1)) (fp.sub RNE (fp.mul RNE x1 x10) (fp.div RNE x2 x0))))
(assert (fp.eq (fp.div RNE (fp.add RNE x8 x6) (fp.add RNE x10 x11)) (fp.sub RNE (fp.mul RNE x10 x8) (fp.add RNE x6 x1))))
(check-sat)
