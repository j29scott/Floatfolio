(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.sub RNE x20 x16) (fp.sub RNE x13 x17)) (fp.mul RNE (fp.div RNE x14 x18) (fp.add RNE x9 x15))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x9 x21) (fp.neg x13)) (fp.neg (fp.div RNE x0 x0)))))
(assert (fp.geq (fp.mul RNE (fp.neg (fp.add RNE x15 x13)) (fp.sub RNE (fp.neg x3) (fp.add RNE x1 x13))) (fp.add RNE (fp.neg (fp.sub RNE x21 x5)) (fp.add RNE (fp.div RNE x14 x5) (fp.mul RNE x11 x21)))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.div RNE x17 x2) (fp.sub RNE x1 x3)) (fp.div RNE (fp.div RNE x15 x20) (fp.div RNE x19 x15))) (fp.neg (fp.div RNE (fp.neg x16) (fp.mul RNE x10 x16)))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.div RNE x15 x20) (fp.sub RNE x5 x3)) (fp.mul RNE (fp.div RNE x18 x14) (fp.mul RNE x0 x8))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x8 x21) (fp.sub RNE x1 x19)) (fp.div RNE (fp.add RNE x11 x19) (fp.add RNE x15 x1)))))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.add RNE x6 x20) (fp.add RNE x5 x10)) (fp.mul RNE (fp.neg x1) (fp.add RNE x6 x13))) (fp.sub RNE (fp.div RNE (fp.sub RNE x4 x15) (fp.neg x0)) (fp.mul RNE (fp.div RNE x0 x15) (fp.sub RNE x5 x14)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.neg x7) (fp.add RNE x8 x19)) (fp.neg (fp.div RNE x0 x13))) (fp.mul RNE (fp.add RNE (fp.add RNE x10 x18) (fp.mul RNE x14 x15)) (fp.div RNE (fp.neg x8) (fp.div RNE x9 x0)))))
(assert (fp.geq (fp.neg (fp.div RNE (fp.sub RNE x19 x19) (fp.div RNE x6 x8))) (fp.sub RNE (fp.div RNE (fp.add RNE x8 x1) (fp.mul RNE x19 x14)) (fp.div RNE (fp.mul RNE x15 x6) (fp.div RNE x21 x16)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.neg x19) (fp.add RNE x4 x2)) (fp.sub RNE (fp.sub RNE x1 x8) (fp.add RNE x18 x1))) (fp.add RNE (fp.add RNE (fp.div RNE x9 x7) (fp.add RNE x16 x1)) (fp.sub RNE (fp.mul RNE x5 x16) (fp.neg x1)))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.sub RNE x1 x16) (fp.mul RNE x5 x19)) (fp.mul RNE (fp.add RNE x15 x18) (fp.div RNE x2 x17))) (fp.neg (fp.mul RNE (fp.div RNE x20 x5) (fp.sub RNE x10 x19)))))
(assert (fp.eq (fp.neg (fp.neg (fp.neg x19))) (fp.neg (fp.add RNE (fp.div RNE x15 x3) (fp.neg x0)))))
(check-sat)
