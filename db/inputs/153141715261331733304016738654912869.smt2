(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.mul RNE x8 x1) (fp.mul RNE x10 x3)) (fp.div RNE (fp.sub RNE x8 x4) (fp.neg x0))) (fp.add RNE (fp.add RNE (fp.mul RNE x9 x0) (fp.neg x10)) (fp.add RNE (fp.neg x11) (fp.sub RNE x8 x4)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.mul RNE x6 x11) (fp.sub RNE x4 x5)) (fp.div RNE (fp.mul RNE x1 x11) (fp.neg x10))) (fp.neg (fp.div RNE (fp.add RNE x6 x1) (fp.add RNE x5 x2)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.neg x8) (fp.mul RNE x14 x10)) (fp.mul RNE (fp.add RNE x9 x2) (fp.neg x1))) (fp.add RNE (fp.neg (fp.sub RNE x2 x14)) (fp.neg (fp.add RNE x11 x11)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.neg x4) (fp.mul RNE x7 x5)) (fp.add RNE (fp.sub RNE x12 x1) (fp.sub RNE x5 x11))) (fp.neg (fp.div RNE (fp.div RNE x7 x1) (fp.neg x12)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.add RNE x1 x4)) (fp.neg (fp.neg x1))) (fp.sub RNE (fp.add RNE (fp.div RNE x1 x10) (fp.sub RNE x7 x0)) (fp.add RNE (fp.mul RNE x13 x8) (fp.sub RNE x13 x9)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.sub RNE x14 x12) (fp.sub RNE x4 x6)) (fp.sub RNE (fp.div RNE x0 x6) (fp.mul RNE x3 x8))) (fp.mul RNE (fp.div RNE (fp.sub RNE x12 x11) (fp.mul RNE x14 x6)) (fp.sub RNE (fp.mul RNE x5 x0) (fp.sub RNE x12 x5)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.neg x12) (fp.div RNE x6 x10))) (fp.sub RNE (fp.mul RNE (fp.div RNE x14 x8) (fp.mul RNE x8 x3)) (fp.sub RNE (fp.neg x5) (fp.neg x10)))))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.div RNE x2 x3) (fp.add RNE x6 x10)) (fp.div RNE (fp.neg x12) (fp.sub RNE x11 x5))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x13 x12) (fp.add RNE x0 x4)) (fp.mul RNE (fp.div RNE x13 x10) (fp.div RNE x2 x11)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.mul RNE x0 x11) (fp.div RNE x4 x11)) (fp.sub RNE (fp.neg x14) (fp.add RNE x4 x5))) (fp.sub RNE (fp.add RNE (fp.div RNE x3 x1) (fp.add RNE x2 x13)) (fp.mul RNE (fp.neg x13) (fp.neg x8)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.div RNE x5 x7) (fp.sub RNE x11 x0))) (fp.sub RNE (fp.mul RNE (fp.div RNE x5 x8) (fp.mul RNE x8 x0)) (fp.sub RNE (fp.div RNE x3 x4) (fp.sub RNE x10 x4)))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.mul RNE x6 x6) (fp.mul RNE x8 x13)) (fp.div RNE (fp.div RNE x8 x13) (fp.div RNE x5 x6))) (fp.div RNE (fp.add RNE (fp.div RNE x1 x4) (fp.neg x9)) (fp.sub RNE (fp.mul RNE x2 x8) (fp.sub RNE x14 x2)))))
(assert (fp.geq (fp.sub RNE (fp.add RNE (fp.add RNE x14 x6) (fp.mul RNE x13 x10)) (fp.mul RNE (fp.neg x5) (fp.neg x0))) (fp.mul RNE (fp.sub RNE (fp.neg x7) (fp.mul RNE x0 x0)) (fp.neg (fp.mul RNE x8 x6)))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.mul RNE x7 x5) (fp.neg x9)) (fp.div RNE (fp.mul RNE x12 x7) (fp.mul RNE x6 x12))) (fp.mul RNE (fp.add RNE (fp.add RNE x9 x3) (fp.add RNE x12 x10)) (fp.neg (fp.neg x11)))))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.sub RNE x7 x4) (fp.add RNE x11 x14)) (fp.mul RNE (fp.mul RNE x10 x0) (fp.add RNE x14 x8))) (fp.add RNE (fp.sub RNE (fp.neg x5) (fp.sub RNE x10 x11)) (fp.neg (fp.mul RNE x0 x8)))))
(check-sat)
