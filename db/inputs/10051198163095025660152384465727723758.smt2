(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.add RNE x4 x3) (fp.sub RNE x3 x0)) (fp.div RNE (fp.div RNE x12 x3) (fp.div RNE x1 x2))))
(assert (fp.leq (fp.neg (fp.div RNE x12 x3)) (fp.neg (fp.neg x12))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x3 x11) (fp.div RNE x4 x7)) (fp.mul RNE (fp.add RNE x3 x12) (fp.neg x1))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x8 x11) (fp.neg x0)) (fp.div RNE (fp.add RNE x9 x4) (fp.neg x2))))
(assert (fp.geq (fp.add RNE (fp.add RNE x2 x3) (fp.sub RNE x6 x7)) (fp.mul RNE (fp.add RNE x12 x6) (fp.mul RNE x1 x5))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x8 x0) (fp.add RNE x5 x0)) (fp.sub RNE (fp.neg x5) (fp.neg x5))))
(assert (fp.geq (fp.div RNE (fp.neg x4) (fp.add RNE x1 x2)) (fp.sub RNE (fp.sub RNE x8 x12) (fp.div RNE x3 x7))))
(assert (fp.leq (fp.sub RNE (fp.neg x1) (fp.neg x1)) (fp.neg (fp.add RNE x12 x12))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x5 x12) (fp.mul RNE x5 x9)) (fp.neg (fp.sub RNE x5 x11))))
(assert (fp.geq (fp.neg (fp.add RNE x11 x8)) (fp.mul RNE (fp.add RNE x8 x1) (fp.div RNE x3 x8))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x1 x2) (fp.sub RNE x8 x2)) (fp.mul RNE (fp.sub RNE x0 x8) (fp.div RNE x8 x5))))
(assert (fp.eq (fp.sub RNE (fp.neg x9) (fp.div RNE x0 x3)) (fp.sub RNE (fp.sub RNE x7 x10) (fp.sub RNE x2 x7))))
(assert (fp.geq (fp.neg (fp.div RNE x9 x11)) (fp.div RNE (fp.div RNE x6 x11) (fp.add RNE x10 x9))))
(assert (fp.lt (fp.div RNE (fp.add RNE x1 x1) (fp.neg x11)) (fp.sub RNE (fp.div RNE x0 x10) (fp.neg x10))))
(assert (fp.eq (fp.div RNE (fp.neg x0) (fp.sub RNE x8 x8)) (fp.neg (fp.div RNE x1 x2))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x11 x9) (fp.add RNE x10 x12)) (fp.sub RNE (fp.add RNE x6 x10) (fp.mul RNE x11 x1))))
(assert (fp.gt (fp.div RNE (fp.neg x8) (fp.mul RNE x5 x4)) (fp.mul RNE (fp.sub RNE x0 x9) (fp.add RNE x2 x9))))
(assert (fp.lt (fp.neg (fp.mul RNE x10 x9)) (fp.neg (fp.div RNE x9 x11))))
(check-sat)
