(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.add RNE x6 x14) (fp.sub RNE x16 x11)) (fp.mul RNE (fp.neg x6) (fp.sub RNE x1 x9))) (fp.mul RNE (fp.neg (fp.div RNE x7 x3)) (fp.add RNE (fp.sub RNE x15 x5) (fp.neg x4)))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.div RNE x3 x18) (fp.sub RNE x4 x4)) (fp.add RNE (fp.add RNE x17 x13) (fp.div RNE x9 x9))) (fp.div RNE (fp.mul RNE (fp.sub RNE x15 x19) (fp.mul RNE x18 x17)) (fp.add RNE (fp.add RNE x6 x18) (fp.sub RNE x6 x14)))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.sub RNE x17 x1) (fp.mul RNE x15 x3)) (fp.div RNE (fp.neg x6) (fp.sub RNE x6 x12))) (fp.add RNE (fp.sub RNE (fp.div RNE x12 x6) (fp.sub RNE x3 x15)) (fp.mul RNE (fp.sub RNE x8 x10) (fp.add RNE x0 x4)))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.div RNE x19 x3) (fp.add RNE x2 x11)) (fp.neg (fp.mul RNE x13 x19))) (fp.mul RNE (fp.sub RNE (fp.div RNE x5 x7) (fp.add RNE x6 x4)) (fp.neg (fp.neg x3)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.div RNE x6 x7) (fp.div RNE x19 x18)) (fp.mul RNE (fp.div RNE x5 x4) (fp.neg x14))) (fp.div RNE (fp.neg (fp.add RNE x9 x16)) (fp.sub RNE (fp.neg x14) (fp.mul RNE x6 x4)))))
(assert (fp.eq (fp.neg (fp.neg (fp.div RNE x1 x8))) (fp.add RNE (fp.sub RNE (fp.add RNE x7 x19) (fp.neg x14)) (fp.mul RNE (fp.neg x10) (fp.div RNE x19 x18)))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.sub RNE x12 x19) (fp.div RNE x15 x8)) (fp.sub RNE (fp.add RNE x17 x14) (fp.div RNE x12 x9))) (fp.neg (fp.mul RNE (fp.div RNE x14 x0) (fp.add RNE x1 x2)))))
(check-sat)
