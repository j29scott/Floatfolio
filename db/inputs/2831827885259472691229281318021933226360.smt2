(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.add RNE (fp.div RNE x13 x3) (fp.sub RNE x10 x12)) (fp.sub RNE (fp.div RNE x8 x11) (fp.div RNE x2 x7))))
(assert (fp.gt (fp.mul RNE (fp.neg x8) (fp.div RNE x6 x12)) (fp.neg (fp.mul RNE x3 x10))))
(assert (fp.eq (fp.div RNE (fp.div RNE x14 x0) (fp.add RNE x6 x11)) (fp.div RNE (fp.sub RNE x8 x12) (fp.sub RNE x9 x8))))
(assert (fp.eq (fp.neg (fp.neg x1)) (fp.neg (fp.neg x1))))
(assert (fp.gt (fp.neg (fp.sub RNE x5 x15)) (fp.neg (fp.div RNE x14 x1))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x15 x0) (fp.sub RNE x0 x7)) (fp.div RNE (fp.add RNE x13 x15) (fp.add RNE x9 x4))))
(assert (fp.lt (fp.div RNE (fp.add RNE x9 x15) (fp.neg x10)) (fp.add RNE (fp.add RNE x7 x13) (fp.add RNE x15 x4))))
(assert (fp.geq (fp.neg (fp.div RNE x15 x10)) (fp.mul RNE (fp.neg x15) (fp.mul RNE x6 x7))))
(assert (fp.lt (fp.div RNE (fp.neg x2) (fp.neg x2)) (fp.add RNE (fp.sub RNE x15 x10) (fp.mul RNE x1 x6))))
(assert (fp.geq (fp.neg (fp.mul RNE x11 x9)) (fp.add RNE (fp.neg x12) (fp.div RNE x12 x14))))
(assert (fp.lt (fp.div RNE (fp.neg x15) (fp.add RNE x11 x11)) (fp.neg (fp.mul RNE x8 x9))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x0 x15) (fp.neg x2)) (fp.sub RNE (fp.mul RNE x1 x0) (fp.mul RNE x3 x8))))
(assert (fp.geq (fp.div RNE (fp.neg x2) (fp.add RNE x4 x14)) (fp.sub RNE (fp.mul RNE x1 x9) (fp.neg x11))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x14 x8) (fp.add RNE x1 x11)) (fp.sub RNE (fp.add RNE x11 x7) (fp.div RNE x12 x10))))
(check-sat)
