(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.div RNE (fp.neg (fp.div RNE x13 x3)) (fp.div RNE (fp.sub RNE x3 x8) (fp.neg x5))) (fp.mul RNE (fp.add RNE (fp.sub RNE x13 x9) (fp.add RNE x12 x7)) (fp.sub RNE (fp.neg x8) (fp.neg x6)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.sub RNE x7 x10) (fp.mul RNE x2 x6)) (fp.add RNE (fp.sub RNE x9 x6) (fp.sub RNE x0 x6))) (fp.div RNE (fp.add RNE (fp.div RNE x2 x6) (fp.sub RNE x5 x1)) (fp.neg (fp.sub RNE x0 x0)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.mul RNE x5 x7) (fp.sub RNE x11 x9)) (fp.mul RNE (fp.sub RNE x2 x13) (fp.mul RNE x10 x11))) (fp.neg (fp.sub RNE (fp.add RNE x10 x2) (fp.neg x6)))))
(check-sat)
