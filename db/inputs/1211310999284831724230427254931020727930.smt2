(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.div RNE x17 x15) (fp.div RNE x3 x4)) (fp.sub RNE (fp.mul RNE x8 x18) (fp.add RNE x11 x18))) (fp.neg (fp.add RNE (fp.sub RNE x8 x23) (fp.mul RNE x15 x13)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.mul RNE x2 x0) (fp.mul RNE x4 x20)) (fp.sub RNE (fp.sub RNE x14 x6) (fp.sub RNE x5 x18))) (fp.mul RNE (fp.neg (fp.div RNE x17 x12)) (fp.div RNE (fp.add RNE x7 x1) (fp.add RNE x1 x22)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.mul RNE x3 x16) (fp.add RNE x23 x14)) (fp.mul RNE (fp.mul RNE x8 x1) (fp.div RNE x15 x8))) (fp.sub RNE (fp.sub RNE (fp.add RNE x3 x3) (fp.add RNE x14 x21)) (fp.add RNE (fp.sub RNE x5 x24) (fp.sub RNE x5 x13)))))
(assert (fp.lt (fp.sub RNE (fp.add RNE (fp.mul RNE x15 x6) (fp.add RNE x4 x3)) (fp.add RNE (fp.neg x8) (fp.mul RNE x2 x22))) (fp.add RNE (fp.add RNE (fp.div RNE x17 x8) (fp.sub RNE x5 x10)) (fp.add RNE (fp.add RNE x21 x18) (fp.mul RNE x23 x3)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.sub RNE x12 x18) (fp.sub RNE x17 x8)) (fp.div RNE (fp.neg x16) (fp.add RNE x4 x23))) (fp.div RNE (fp.sub RNE (fp.div RNE x16 x6) (fp.sub RNE x23 x3)) (fp.neg (fp.div RNE x18 x16)))))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.neg x1) (fp.sub RNE x18 x22)) (fp.sub RNE (fp.neg x20) (fp.sub RNE x9 x3))) (fp.add RNE (fp.neg (fp.div RNE x15 x17)) (fp.neg (fp.neg x6)))))
(check-sat)
