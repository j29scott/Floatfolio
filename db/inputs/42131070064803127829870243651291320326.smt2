(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.neg (fp.sub RNE x5 x17)) (fp.add RNE (fp.div RNE x14 x5) (fp.div RNE x2 x20))))
(assert (fp.lt (fp.add RNE (fp.add RNE x10 x11) (fp.div RNE x13 x5)) (fp.neg (fp.div RNE x19 x14))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x16 x6) (fp.sub RNE x2 x21)) (fp.add RNE (fp.div RNE x10 x14) (fp.sub RNE x19 x9))))
(assert (fp.lt (fp.neg (fp.sub RNE x12 x0)) (fp.neg (fp.mul RNE x5 x18))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x2 x14) (fp.mul RNE x16 x0)) (fp.mul RNE (fp.sub RNE x20 x12) (fp.neg x12))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x1 x10) (fp.mul RNE x9 x1)) (fp.mul RNE (fp.sub RNE x12 x0) (fp.add RNE x4 x0))))
(assert (fp.geq (fp.mul RNE (fp.neg x4) (fp.neg x5)) (fp.add RNE (fp.mul RNE x16 x13) (fp.neg x19))))
(assert (fp.eq (fp.div RNE (fp.div RNE x2 x0) (fp.neg x0)) (fp.sub RNE (fp.neg x20) (fp.sub RNE x2 x5))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x2 x4) (fp.div RNE x15 x3)) (fp.neg (fp.neg x18))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x6 x15) (fp.sub RNE x18 x18)) (fp.sub RNE (fp.div RNE x10 x21) (fp.mul RNE x9 x7))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x3 x11) (fp.add RNE x17 x11)) (fp.sub RNE (fp.mul RNE x14 x12) (fp.div RNE x19 x4))))
(assert (fp.leq (fp.div RNE (fp.neg x21) (fp.add RNE x17 x8)) (fp.add RNE (fp.div RNE x18 x12) (fp.neg x10))))
(check-sat)
