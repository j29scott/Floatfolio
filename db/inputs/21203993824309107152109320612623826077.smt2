(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x19 x12) (fp.add RNE x6 x10)) (fp.add RNE (fp.neg x17) (fp.add RNE x0 x2))) (fp.div RNE (fp.neg (fp.neg x14)) (fp.div RNE (fp.mul RNE x8 x18) (fp.div RNE x4 x8)))) (fp.div RNE (fp.mul RNE (fp.neg (fp.mul RNE x1 x15)) (fp.neg (fp.add RNE x2 x19))) (fp.neg (fp.div RNE (fp.mul RNE x8 x2) (fp.sub RNE x17 x10))))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.neg (fp.div RNE x2 x15)) (fp.sub RNE (fp.add RNE x15 x17) (fp.mul RNE x17 x4))) (fp.div RNE (fp.add RNE (fp.mul RNE x13 x1) (fp.mul RNE x10 x1)) (fp.sub RNE (fp.div RNE x12 x10) (fp.sub RNE x17 x11)))) (fp.sub RNE (fp.add RNE (fp.mul RNE (fp.neg x6) (fp.sub RNE x8 x13)) (fp.div RNE (fp.add RNE x12 x18) (fp.sub RNE x4 x7))) (fp.mul RNE (fp.mul RNE (fp.neg x6) (fp.add RNE x14 x5)) (fp.div RNE (fp.sub RNE x2 x6) (fp.neg x5))))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.div RNE (fp.mul RNE x6 x11) (fp.div RNE x15 x13))) (fp.sub RNE (fp.add RNE (fp.neg x8) (fp.div RNE x19 x8)) (fp.div RNE (fp.mul RNE x5 x2) (fp.mul RNE x10 x2)))) (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.div RNE x19 x8) (fp.div RNE x15 x1)) (fp.div RNE (fp.sub RNE x14 x1) (fp.sub RNE x2 x4))) (fp.sub RNE (fp.neg (fp.add RNE x5 x5)) (fp.div RNE (fp.add RNE x14 x19) (fp.add RNE x8 x17))))))
(check-sat)
