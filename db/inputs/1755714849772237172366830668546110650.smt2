(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.add RNE (fp.sub RNE x15 x13) (fp.neg x2)) (fp.mul RNE (fp.add RNE x2 x6) (fp.sub RNE x9 x5))) (fp.mul RNE (fp.add RNE (fp.div RNE x3 x12) (fp.neg x3)) (fp.sub RNE (fp.mul RNE x7 x5) (fp.sub RNE x13 x11)))) (fp.sub RNE (fp.div RNE (fp.add RNE (fp.mul RNE x7 x7) (fp.mul RNE x8 x12)) (fp.neg (fp.sub RNE x10 x16))) (fp.mul RNE (fp.div RNE (fp.mul RNE x0 x7) (fp.div RNE x5 x15)) (fp.div RNE (fp.neg x9) (fp.mul RNE x10 x5))))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.div RNE (fp.neg x15) (fp.add RNE x7 x1)) (fp.add RNE (fp.sub RNE x16 x10) (fp.div RNE x11 x9))) (fp.neg (fp.mul RNE (fp.sub RNE x0 x5) (fp.sub RNE x8 x15)))) (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.div RNE x7 x9) (fp.neg x6)) (fp.neg (fp.div RNE x0 x10))) (fp.add RNE (fp.sub RNE (fp.mul RNE x0 x0) (fp.neg x13)) (fp.add RNE (fp.neg x4) (fp.add RNE x7 x15))))))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.sub RNE (fp.sub RNE x15 x10) (fp.sub RNE x16 x15)) (fp.mul RNE (fp.sub RNE x2 x6) (fp.mul RNE x2 x5))) (fp.add RNE (fp.mul RNE (fp.neg x15) (fp.add RNE x6 x11)) (fp.neg (fp.sub RNE x16 x6)))) (fp.div RNE (fp.add RNE (fp.add RNE (fp.add RNE x1 x13) (fp.sub RNE x12 x11)) (fp.div RNE (fp.div RNE x1 x16) (fp.neg x0))) (fp.div RNE (fp.div RNE (fp.add RNE x9 x9) (fp.sub RNE x9 x0)) (fp.mul RNE (fp.div RNE x11 x5) (fp.sub RNE x1 x6))))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.div RNE (fp.sub RNE x14 x10) (fp.mul RNE x16 x16)) (fp.div RNE (fp.sub RNE x7 x4) (fp.add RNE x0 x7))) (fp.mul RNE (fp.div RNE (fp.add RNE x11 x12) (fp.sub RNE x4 x4)) (fp.sub RNE (fp.mul RNE x7 x16) (fp.sub RNE x13 x14)))) (fp.add RNE (fp.neg (fp.div RNE (fp.mul RNE x10 x2) (fp.add RNE x4 x10))) (fp.add RNE (fp.div RNE (fp.mul RNE x0 x6) (fp.div RNE x5 x4)) (fp.div RNE (fp.mul RNE x3 x10) (fp.mul RNE x11 x5))))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.div RNE x12 x9) (fp.sub RNE x12 x0)) (fp.add RNE (fp.mul RNE x0 x1) (fp.mul RNE x8 x8))) (fp.neg (fp.add RNE (fp.div RNE x15 x16) (fp.div RNE x16 x3)))) (fp.div RNE (fp.mul RNE (fp.add RNE (fp.div RNE x11 x16) (fp.mul RNE x1 x15)) (fp.neg (fp.add RNE x15 x16))) (fp.div RNE (fp.neg (fp.add RNE x9 x14)) (fp.sub RNE (fp.neg x14) (fp.div RNE x12 x10))))))
(check-sat)
