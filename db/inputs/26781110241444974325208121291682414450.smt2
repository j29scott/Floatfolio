(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.add RNE (fp.mul RNE x15 x11) (fp.neg x10)) (fp.add RNE (fp.neg x19) (fp.mul RNE x16 x22))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x19 x5) (fp.add RNE x6 x11)) (fp.div RNE (fp.div RNE x8 x18) (fp.mul RNE x19 x2))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x14 x1) (fp.sub RNE x1 x13)) (fp.sub RNE (fp.mul RNE x11 x18) (fp.add RNE x9 x17))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x18 x16) (fp.add RNE x0 x0)) (fp.sub RNE (fp.add RNE x7 x9) (fp.div RNE x7 x18))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x17 x4) (fp.sub RNE x21 x0)) (fp.neg (fp.sub RNE x23 x19))))
(assert (fp.lt (fp.add RNE (fp.neg x16) (fp.neg x18)) (fp.add RNE (fp.sub RNE x6 x3) (fp.sub RNE x2 x1))))
(assert (fp.lt (fp.mul RNE (fp.neg x20) (fp.neg x3)) (fp.sub RNE (fp.mul RNE x4 x12) (fp.neg x0))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x10 x9) (fp.div RNE x21 x8)) (fp.div RNE (fp.mul RNE x23 x21) (fp.mul RNE x0 x3))))
(assert (fp.lt (fp.neg (fp.add RNE x1 x7)) (fp.add RNE (fp.sub RNE x21 x22) (fp.neg x20))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x21 x20) (fp.add RNE x0 x12)) (fp.div RNE (fp.div RNE x10 x20) (fp.add RNE x19 x3))))
(assert (fp.eq (fp.neg (fp.add RNE x8 x22)) (fp.add RNE (fp.div RNE x5 x21) (fp.mul RNE x5 x21))))
(check-sat)
