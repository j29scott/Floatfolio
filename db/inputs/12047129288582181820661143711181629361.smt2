(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.sub RNE x4 x1) (fp.sub RNE x8 x6)) (fp.sub RNE (fp.add RNE x8 x7) (fp.add RNE x9 x5))) (fp.neg (fp.mul RNE (fp.mul RNE x8 x13) (fp.add RNE x3 x16)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.mul RNE x8 x2) (fp.sub RNE x10 x12)) (fp.sub RNE (fp.sub RNE x16 x7) (fp.mul RNE x10 x12))) (fp.neg (fp.sub RNE (fp.div RNE x10 x10) (fp.neg x5)))))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.add RNE x15 x15) (fp.add RNE x3 x14)) (fp.sub RNE (fp.sub RNE x11 x15) (fp.div RNE x13 x9))) (fp.mul RNE (fp.add RNE (fp.mul RNE x11 x11) (fp.add RNE x11 x14)) (fp.add RNE (fp.add RNE x9 x14) (fp.div RNE x14 x3)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.add RNE x8 x7) (fp.sub RNE x6 x4))) (fp.add RNE (fp.sub RNE (fp.mul RNE x13 x6) (fp.mul RNE x16 x5)) (fp.div RNE (fp.add RNE x2 x14) (fp.neg x5)))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.mul RNE x17 x2) (fp.div RNE x16 x14)) (fp.add RNE (fp.div RNE x5 x1) (fp.div RNE x4 x7))) (fp.div RNE (fp.div RNE (fp.mul RNE x4 x12) (fp.add RNE x12 x12)) (fp.mul RNE (fp.div RNE x14 x0) (fp.add RNE x8 x3)))))
(assert (fp.gt (fp.neg (fp.add RNE (fp.add RNE x13 x9) (fp.add RNE x5 x17))) (fp.div RNE (fp.mul RNE (fp.sub RNE x3 x1) (fp.add RNE x7 x2)) (fp.add RNE (fp.mul RNE x10 x12) (fp.mul RNE x8 x15)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.neg x3)) (fp.div RNE (fp.add RNE x0 x13) (fp.neg x13))) (fp.add RNE (fp.neg (fp.add RNE x3 x3)) (fp.div RNE (fp.div RNE x14 x9) (fp.sub RNE x9 x5)))))
(check-sat)
