(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.div RNE (fp.neg x7) (fp.neg x6)) (fp.neg (fp.add RNE x20 x13))))
(assert (fp.geq (fp.neg (fp.mul RNE x19 x16)) (fp.sub RNE (fp.neg x4) (fp.add RNE x9 x2))))
(assert (fp.leq (fp.div RNE (fp.div RNE x16 x14) (fp.neg x19)) (fp.mul RNE (fp.add RNE x13 x19) (fp.add RNE x13 x4))))
(assert (fp.eq (fp.neg (fp.sub RNE x18 x5)) (fp.add RNE (fp.sub RNE x9 x14) (fp.sub RNE x23 x18))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x11 x9) (fp.neg x4)) (fp.add RNE (fp.div RNE x3 x2) (fp.add RNE x22 x3))))
(assert (fp.lt (fp.add RNE (fp.div RNE x19 x5) (fp.neg x3)) (fp.mul RNE (fp.sub RNE x8 x8) (fp.sub RNE x2 x11))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x23 x19) (fp.div RNE x18 x21)) (fp.sub RNE (fp.add RNE x13 x17) (fp.neg x7))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x0 x11) (fp.div RNE x21 x6)) (fp.div RNE (fp.add RNE x18 x3) (fp.div RNE x1 x11))))
(assert (fp.lt (fp.neg (fp.add RNE x7 x20)) (fp.neg (fp.neg x9))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x12 x11) (fp.neg x1)) (fp.sub RNE (fp.sub RNE x18 x19) (fp.add RNE x3 x10))))
(check-sat)
