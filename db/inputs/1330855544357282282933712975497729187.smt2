(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.div RNE x12 x0) (fp.sub RNE x8 x1)) (fp.add RNE (fp.mul RNE x3 x9) (fp.mul RNE x2 x11))) (fp.mul RNE (fp.sub RNE (fp.add RNE x6 x9) (fp.mul RNE x3 x7)) (fp.div RNE (fp.div RNE x0 x10) (fp.mul RNE x13 x1)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.neg x1)) (fp.sub RNE (fp.neg x8) (fp.add RNE x14 x14))) (fp.sub RNE (fp.mul RNE (fp.add RNE x1 x6) (fp.sub RNE x8 x8)) (fp.neg (fp.sub RNE x12 x15)))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.add RNE x15 x3) (fp.neg x11)) (fp.neg (fp.div RNE x4 x11))) (fp.add RNE (fp.neg (fp.mul RNE x5 x6)) (fp.add RNE (fp.div RNE x8 x9) (fp.mul RNE x10 x3)))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.neg x11) (fp.mul RNE x8 x12)) (fp.neg (fp.add RNE x2 x13))) (fp.div RNE (fp.add RNE (fp.mul RNE x1 x11) (fp.add RNE x1 x9)) (fp.sub RNE (fp.add RNE x15 x7) (fp.add RNE x12 x10)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.mul RNE x14 x12) (fp.add RNE x0 x0)) (fp.mul RNE (fp.neg x13) (fp.mul RNE x15 x5))) (fp.neg (fp.add RNE (fp.mul RNE x8 x8) (fp.div RNE x12 x12)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.mul RNE x4 x11) (fp.mul RNE x6 x3)) (fp.add RNE (fp.add RNE x10 x3) (fp.neg x14))) (fp.sub RNE (fp.neg (fp.neg x2)) (fp.sub RNE (fp.div RNE x1 x0) (fp.add RNE x7 x4)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.neg x0) (fp.div RNE x11 x5)) (fp.mul RNE (fp.mul RNE x15 x1) (fp.add RNE x10 x0))) (fp.mul RNE (fp.add RNE (fp.neg x8) (fp.add RNE x14 x3)) (fp.mul RNE (fp.sub RNE x12 x9) (fp.sub RNE x9 x2)))))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.neg x8) (fp.div RNE x4 x2)) (fp.neg (fp.add RNE x2 x7))) (fp.div RNE (fp.div RNE (fp.mul RNE x13 x8) (fp.mul RNE x15 x13)) (fp.div RNE (fp.neg x12) (fp.add RNE x12 x9)))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.mul RNE x14 x9) (fp.mul RNE x4 x14)) (fp.sub RNE (fp.sub RNE x13 x8) (fp.sub RNE x10 x8))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x0 x13) (fp.add RNE x6 x6)) (fp.neg (fp.neg x15)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.add RNE x12 x10)) (fp.add RNE (fp.div RNE x0 x12) (fp.add RNE x11 x1))) (fp.add RNE (fp.neg (fp.div RNE x10 x4)) (fp.add RNE (fp.add RNE x15 x14) (fp.add RNE x0 x4)))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.add RNE x8 x1)) (fp.div RNE (fp.sub RNE x0 x14) (fp.sub RNE x9 x6))) (fp.neg (fp.add RNE (fp.sub RNE x7 x8) (fp.add RNE x3 x3)))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.add RNE x11 x12) (fp.mul RNE x6 x4)) (fp.add RNE (fp.neg x10) (fp.mul RNE x4 x11))) (fp.neg (fp.add RNE (fp.mul RNE x12 x12) (fp.mul RNE x6 x5)))))
(check-sat)
