(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.neg x2) (fp.div RNE x0 x6)) (fp.sub RNE (fp.neg x5) (fp.neg x0))) (fp.neg (fp.div RNE (fp.neg x7) (fp.add RNE x2 x4)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.add RNE x0 x6)) (fp.sub RNE (fp.div RNE x6 x5) (fp.neg x0))) (fp.mul RNE (fp.div RNE (fp.add RNE x2 x6) (fp.add RNE x7 x2)) (fp.mul RNE (fp.mul RNE x5 x4) (fp.add RNE x2 x6)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.sub RNE x4 x5) (fp.div RNE x5 x6))) (fp.mul RNE (fp.add RNE (fp.sub RNE x7 x6) (fp.mul RNE x1 x7)) (fp.neg (fp.div RNE x7 x7)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.add RNE x7 x0) (fp.div RNE x2 x1)) (fp.mul RNE (fp.sub RNE x7 x7) (fp.neg x2))) (fp.sub RNE (fp.mul RNE (fp.neg x0) (fp.div RNE x6 x2)) (fp.mul RNE (fp.div RNE x6 x6) (fp.div RNE x6 x2)))))
(check-sat)
