(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.neg (fp.add RNE x10 x10)) (fp.add RNE (fp.neg x10) (fp.neg x7))))
(assert (fp.geq (fp.neg (fp.mul RNE x3 x5)) (fp.add RNE (fp.sub RNE x0 x3) (fp.neg x13))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x14 x1) (fp.div RNE x9 x1)) (fp.div RNE (fp.sub RNE x2 x11) (fp.neg x13))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x3 x6) (fp.add RNE x13 x14)) (fp.mul RNE (fp.add RNE x7 x3) (fp.neg x9))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x13 x13) (fp.neg x9)) (fp.add RNE (fp.mul RNE x1 x0) (fp.mul RNE x7 x10))))
(assert (fp.geq (fp.add RNE (fp.div RNE x4 x0) (fp.sub RNE x12 x4)) (fp.add RNE (fp.div RNE x6 x3) (fp.neg x0))))
(assert (fp.eq (fp.add RNE (fp.add RNE x10 x10) (fp.neg x14)) (fp.div RNE (fp.neg x4) (fp.add RNE x12 x11))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x13 x5) (fp.add RNE x13 x0)) (fp.neg (fp.neg x10))))
(assert (fp.geq (fp.div RNE (fp.div RNE x2 x10) (fp.neg x5)) (fp.div RNE (fp.div RNE x6 x9) (fp.neg x3))))
(assert (fp.leq (fp.neg (fp.add RNE x4 x13)) (fp.mul RNE (fp.mul RNE x10 x6) (fp.div RNE x4 x2))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x10 x8) (fp.add RNE x4 x3)) (fp.mul RNE (fp.add RNE x8 x13) (fp.div RNE x3 x9))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x6 x4) (fp.add RNE x9 x0)) (fp.mul RNE (fp.div RNE x2 x3) (fp.neg x7))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x11 x1) (fp.neg x10)) (fp.div RNE (fp.sub RNE x0 x14) (fp.sub RNE x4 x7))))
(assert (fp.eq (fp.neg (fp.mul RNE x1 x6)) (fp.sub RNE (fp.neg x11) (fp.add RNE x7 x11))))
(assert (fp.leq (fp.sub RNE (fp.neg x10) (fp.div RNE x6 x2)) (fp.div RNE (fp.add RNE x11 x1) (fp.sub RNE x2 x8))))
(assert (fp.gt (fp.add RNE (fp.neg x0) (fp.mul RNE x9 x13)) (fp.div RNE (fp.add RNE x8 x10) (fp.mul RNE x13 x14))))
(check-sat)
