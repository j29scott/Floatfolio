(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.mul RNE x11 x8) (fp.neg x9)) (fp.sub RNE (fp.div RNE x14 x5) (fp.div RNE x5 x3))) (fp.mul RNE (fp.mul RNE (fp.div RNE x12 x4) (fp.sub RNE x9 x2)) (fp.sub RNE (fp.div RNE x6 x4) (fp.add RNE x7 x9)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.neg x9) (fp.add RNE x14 x1))) (fp.sub RNE (fp.neg (fp.mul RNE x8 x14)) (fp.div RNE (fp.sub RNE x10 x15) (fp.neg x9)))))
(assert (fp.lt (fp.div RNE (fp.add RNE (fp.div RNE x4 x2) (fp.add RNE x11 x1)) (fp.div RNE (fp.mul RNE x0 x11) (fp.neg x8))) (fp.add RNE (fp.div RNE (fp.add RNE x0 x8) (fp.mul RNE x0 x14)) (fp.mul RNE (fp.add RNE x1 x10) (fp.neg x8)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.sub RNE x2 x1) (fp.add RNE x3 x13))) (fp.sub RNE (fp.div RNE (fp.div RNE x9 x12) (fp.mul RNE x0 x13)) (fp.sub RNE (fp.mul RNE x15 x7) (fp.div RNE x15 x7)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.div RNE x6 x6) (fp.neg x5)) (fp.div RNE (fp.div RNE x0 x3) (fp.neg x11))) (fp.add RNE (fp.mul RNE (fp.div RNE x6 x12) (fp.add RNE x1 x11)) (fp.mul RNE (fp.mul RNE x10 x7) (fp.add RNE x4 x4)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.div RNE x14 x10) (fp.div RNE x5 x12))) (fp.mul RNE (fp.div RNE (fp.add RNE x12 x6) (fp.sub RNE x6 x5)) (fp.div RNE (fp.mul RNE x12 x10) (fp.sub RNE x12 x8)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.add RNE x9 x10) (fp.neg x6))) (fp.sub RNE (fp.div RNE (fp.mul RNE x12 x11) (fp.add RNE x3 x6)) (fp.add RNE (fp.neg x8) (fp.add RNE x4 x6)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.div RNE x12 x13) (fp.add RNE x7 x6)) (fp.mul RNE (fp.neg x5) (fp.mul RNE x13 x14))) (fp.mul RNE (fp.div RNE (fp.mul RNE x14 x15) (fp.sub RNE x11 x9)) (fp.add RNE (fp.div RNE x9 x5) (fp.div RNE x15 x13)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.mul RNE x11 x9)) (fp.add RNE (fp.neg x13) (fp.neg x14))) (fp.mul RNE (fp.neg (fp.neg x0)) (fp.neg (fp.div RNE x6 x11)))))
(check-sat)
