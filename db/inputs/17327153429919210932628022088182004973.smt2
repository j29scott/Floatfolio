(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(declare-const x26 (_ FloatingPoint 8 24))
(declare-const x27 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.sub RNE (fp.add RNE x6 x1) (fp.div RNE x7 x22)) (fp.add RNE (fp.div RNE x9 x23) (fp.add RNE x2 x27))))
(assert (fp.gt (fp.add RNE (fp.neg x13) (fp.sub RNE x24 x21)) (fp.mul RNE (fp.mul RNE x16 x20) (fp.div RNE x17 x6))))
(assert (fp.geq (fp.div RNE (fp.neg x7) (fp.div RNE x18 x25)) (fp.neg (fp.div RNE x19 x2))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x0 x12) (fp.div RNE x8 x2)) (fp.sub RNE (fp.mul RNE x16 x15) (fp.div RNE x14 x5))))
(assert (fp.leq (fp.neg (fp.sub RNE x25 x18)) (fp.add RNE (fp.div RNE x22 x15) (fp.div RNE x4 x7))))
(assert (fp.lt (fp.neg (fp.sub RNE x7 x13)) (fp.sub RNE (fp.mul RNE x19 x26) (fp.add RNE x5 x9))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x20 x15) (fp.sub RNE x23 x27)) (fp.sub RNE (fp.sub RNE x25 x16) (fp.sub RNE x17 x24))))
(assert (fp.lt (fp.neg (fp.div RNE x22 x6)) (fp.sub RNE (fp.div RNE x5 x2) (fp.add RNE x18 x19))))
(assert (fp.eq (fp.sub RNE (fp.neg x15) (fp.sub RNE x5 x27)) (fp.neg (fp.add RNE x22 x1))))
(check-sat)
