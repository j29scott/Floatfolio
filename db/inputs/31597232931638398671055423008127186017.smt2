(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.add RNE x9 x7) (fp.add RNE x8 x11)) (fp.mul RNE (fp.neg x11) (fp.div RNE x1 x0))) (fp.div RNE (fp.add RNE (fp.mul RNE x5 x9) (fp.div RNE x4 x8)) (fp.sub RNE (fp.sub RNE x5 x7) (fp.add RNE x1 x1)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.add RNE x5 x0) (fp.div RNE x7 x7))) (fp.div RNE (fp.sub RNE (fp.sub RNE x1 x5) (fp.mul RNE x2 x1)) (fp.neg (fp.div RNE x3 x1)))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE (fp.mul RNE x0 x10) (fp.mul RNE x0 x4)) (fp.neg (fp.add RNE x2 x8))) (fp.mul RNE (fp.neg (fp.add RNE x11 x2)) (fp.add RNE (fp.add RNE x6 x7) (fp.mul RNE x0 x9)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.mul RNE x0 x6) (fp.mul RNE x0 x0)) (fp.neg (fp.add RNE x9 x8))) (fp.mul RNE (fp.add RNE (fp.add RNE x5 x4) (fp.neg x5)) (fp.div RNE (fp.div RNE x0 x3) (fp.mul RNE x7 x4)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.neg x1) (fp.div RNE x9 x11)) (fp.sub RNE (fp.div RNE x8 x5) (fp.sub RNE x5 x4))) (fp.mul RNE (fp.div RNE (fp.mul RNE x11 x5) (fp.add RNE x5 x8)) (fp.div RNE (fp.mul RNE x2 x2) (fp.neg x6)))))
(assert (fp.leq (fp.neg (fp.add RNE (fp.add RNE x6 x5) (fp.mul RNE x9 x6))) (fp.div RNE (fp.sub RNE (fp.sub RNE x10 x9) (fp.neg x1)) (fp.sub RNE (fp.add RNE x1 x1) (fp.mul RNE x0 x3)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.add RNE x3 x2)) (fp.div RNE (fp.mul RNE x10 x7) (fp.mul RNE x9 x2))) (fp.sub RNE (fp.div RNE (fp.add RNE x11 x1) (fp.sub RNE x10 x3)) (fp.div RNE (fp.sub RNE x11 x0) (fp.mul RNE x10 x11)))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE (fp.add RNE x7 x1) (fp.add RNE x10 x4)) (fp.add RNE (fp.sub RNE x3 x6) (fp.neg x11))) (fp.mul RNE (fp.neg (fp.neg x0)) (fp.div RNE (fp.add RNE x1 x8) (fp.sub RNE x0 x0)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.add RNE x4 x2) (fp.neg x9)) (fp.neg (fp.neg x11))) (fp.mul RNE (fp.mul RNE (fp.add RNE x11 x11) (fp.add RNE x5 x3)) (fp.add RNE (fp.add RNE x3 x2) (fp.sub RNE x8 x11)))))
(check-sat)
