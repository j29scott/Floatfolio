(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.neg (fp.div RNE x1 x1))) (fp.sub RNE (fp.div RNE (fp.neg x15) (fp.sub RNE x8 x19)) (fp.mul RNE (fp.neg x8) (fp.mul RNE x6 x17)))))
(assert (fp.gt (fp.neg (fp.neg (fp.add RNE x10 x11))) (fp.neg (fp.sub RNE (fp.add RNE x18 x13) (fp.mul RNE x16 x18)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.div RNE x11 x3) (fp.sub RNE x20 x3))) (fp.add RNE (fp.div RNE (fp.add RNE x18 x3) (fp.neg x7)) (fp.div RNE (fp.div RNE x5 x3) (fp.neg x2)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.sub RNE x19 x4) (fp.mul RNE x5 x4)) (fp.mul RNE (fp.neg x14) (fp.sub RNE x3 x17))) (fp.add RNE (fp.mul RNE (fp.div RNE x18 x18) (fp.mul RNE x7 x18)) (fp.neg (fp.add RNE x15 x9)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.neg x5) (fp.neg x6)) (fp.mul RNE (fp.sub RNE x7 x16) (fp.mul RNE x8 x17))) (fp.sub RNE (fp.neg (fp.neg x18)) (fp.mul RNE (fp.sub RNE x6 x16) (fp.sub RNE x17 x20)))))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.div RNE x17 x8)) (fp.mul RNE (fp.div RNE x3 x16) (fp.mul RNE x13 x7))) (fp.add RNE (fp.mul RNE (fp.sub RNE x5 x7) (fp.sub RNE x5 x18)) (fp.div RNE (fp.sub RNE x18 x19) (fp.add RNE x3 x14)))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE (fp.neg x13) (fp.sub RNE x6 x9)) (fp.mul RNE (fp.neg x5) (fp.neg x2))) (fp.div RNE (fp.mul RNE (fp.div RNE x16 x1) (fp.neg x18)) (fp.add RNE (fp.div RNE x4 x9) (fp.neg x2)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.neg x18)) (fp.neg (fp.sub RNE x2 x6))) (fp.neg (fp.sub RNE (fp.div RNE x17 x19) (fp.add RNE x16 x0)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.mul RNE x7 x2) (fp.sub RNE x8 x15))) (fp.add RNE (fp.sub RNE (fp.add RNE x4 x3) (fp.div RNE x19 x14)) (fp.div RNE (fp.add RNE x7 x4) (fp.neg x0)))))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.div RNE x17 x14) (fp.mul RNE x1 x8)) (fp.div RNE (fp.add RNE x0 x5) (fp.mul RNE x0 x8))) (fp.sub RNE (fp.div RNE (fp.sub RNE x10 x0) (fp.neg x16)) (fp.mul RNE (fp.add RNE x1 x6) (fp.neg x1)))))
(check-sat)
