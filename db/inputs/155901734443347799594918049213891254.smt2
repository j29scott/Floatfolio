(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.neg (fp.mul RNE x10 x22)) (fp.mul RNE (fp.mul RNE x20 x5) (fp.sub RNE x10 x8))) (fp.sub RNE (fp.sub RNE (fp.neg x11) (fp.sub RNE x20 x11)) (fp.sub RNE (fp.add RNE x18 x20) (fp.sub RNE x16 x8)))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.sub RNE x0 x9) (fp.div RNE x0 x0)) (fp.sub RNE (fp.neg x22) (fp.mul RNE x19 x0))) (fp.add RNE (fp.sub RNE (fp.div RNE x1 x23) (fp.mul RNE x17 x5)) (fp.add RNE (fp.add RNE x6 x16) (fp.div RNE x19 x4)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.sub RNE x14 x14) (fp.neg x6)) (fp.add RNE (fp.sub RNE x19 x0) (fp.div RNE x9 x4))) (fp.mul RNE (fp.mul RNE (fp.div RNE x20 x14) (fp.mul RNE x2 x7)) (fp.div RNE (fp.add RNE x3 x7) (fp.neg x15)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.add RNE x18 x12) (fp.neg x3)) (fp.div RNE (fp.add RNE x13 x3) (fp.sub RNE x15 x7))) (fp.neg (fp.div RNE (fp.mul RNE x17 x12) (fp.div RNE x14 x9)))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.mul RNE x16 x4) (fp.div RNE x13 x3)) (fp.sub RNE (fp.mul RNE x2 x14) (fp.neg x20))) (fp.sub RNE (fp.add RNE (fp.sub RNE x0 x21) (fp.add RNE x4 x4)) (fp.div RNE (fp.sub RNE x0 x0) (fp.div RNE x23 x23)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.add RNE x18 x16)) (fp.mul RNE (fp.mul RNE x18 x18) (fp.neg x22))) (fp.mul RNE (fp.sub RNE (fp.neg x19) (fp.neg x8)) (fp.div RNE (fp.sub RNE x5 x2) (fp.sub RNE x18 x4)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.neg x15) (fp.add RNE x0 x1)) (fp.mul RNE (fp.add RNE x10 x11) (fp.add RNE x22 x3))) (fp.div RNE (fp.mul RNE (fp.sub RNE x19 x18) (fp.add RNE x2 x1)) (fp.mul RNE (fp.add RNE x21 x7) (fp.mul RNE x19 x16)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.div RNE x8 x11) (fp.add RNE x5 x15)) (fp.mul RNE (fp.div RNE x4 x17) (fp.mul RNE x6 x14))) (fp.div RNE (fp.div RNE (fp.neg x4) (fp.add RNE x17 x11)) (fp.mul RNE (fp.mul RNE x15 x22) (fp.add RNE x23 x11)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.sub RNE x8 x5) (fp.neg x17)) (fp.div RNE (fp.sub RNE x1 x3) (fp.div RNE x20 x10))) (fp.sub RNE (fp.neg (fp.sub RNE x14 x8)) (fp.sub RNE (fp.neg x22) (fp.neg x7)))))
(check-sat)
