(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.add RNE x5 x1)) (fp.mul RNE (fp.neg x18) (fp.mul RNE x7 x2))) (fp.mul RNE (fp.div RNE (fp.neg x7) (fp.add RNE x10 x17)) (fp.add RNE (fp.div RNE x14 x15) (fp.add RNE x15 x1)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.add RNE x17 x20)) (fp.add RNE (fp.add RNE x20 x7) (fp.div RNE x17 x19))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x13 x11) (fp.add RNE x16 x2)) (fp.add RNE (fp.mul RNE x4 x11) (fp.mul RNE x16 x16)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.div RNE x13 x10) (fp.sub RNE x9 x2)) (fp.sub RNE (fp.add RNE x7 x18) (fp.neg x10))) (fp.div RNE (fp.mul RNE (fp.mul RNE x20 x0) (fp.sub RNE x13 x11)) (fp.sub RNE (fp.sub RNE x11 x17) (fp.sub RNE x10 x11)))))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.add RNE x16 x5) (fp.mul RNE x17 x5)) (fp.neg (fp.mul RNE x12 x20))) (fp.mul RNE (fp.neg (fp.neg x16)) (fp.sub RNE (fp.div RNE x15 x12) (fp.add RNE x13 x18)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.mul RNE x19 x17) (fp.add RNE x14 x19)) (fp.neg (fp.div RNE x10 x0))) (fp.div RNE (fp.mul RNE (fp.add RNE x13 x9) (fp.neg x20)) (fp.sub RNE (fp.sub RNE x2 x15) (fp.div RNE x19 x7)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.neg x4) (fp.neg x11)) (fp.add RNE (fp.add RNE x14 x10) (fp.div RNE x2 x1))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x2 x9) (fp.neg x3)) (fp.add RNE (fp.mul RNE x16 x0) (fp.sub RNE x20 x17)))))
(check-sat)
