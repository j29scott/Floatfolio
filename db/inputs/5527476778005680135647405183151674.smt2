(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.add RNE (fp.div RNE x15 x22) (fp.mul RNE x23 x21)) (fp.neg (fp.add RNE x11 x12))))
(assert (fp.lt (fp.div RNE (fp.div RNE x20 x21) (fp.div RNE x23 x8)) (fp.neg (fp.mul RNE x2 x0))))
(assert (fp.lt (fp.neg (fp.sub RNE x5 x6)) (fp.neg (fp.neg x19))))
(assert (fp.geq (fp.neg (fp.div RNE x9 x6)) (fp.sub RNE (fp.neg x6) (fp.mul RNE x22 x16))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x4 x22) (fp.neg x8)) (fp.neg (fp.div RNE x3 x20))))
(assert (fp.eq (fp.div RNE (fp.div RNE x10 x10) (fp.neg x17)) (fp.neg (fp.div RNE x14 x12))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x17 x11) (fp.sub RNE x11 x11)) (fp.mul RNE (fp.div RNE x2 x3) (fp.sub RNE x18 x18))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x4 x12) (fp.sub RNE x19 x8)) (fp.sub RNE (fp.div RNE x15 x12) (fp.neg x13))))
(assert (fp.geq (fp.add RNE (fp.div RNE x0 x3) (fp.add RNE x0 x23)) (fp.mul RNE (fp.mul RNE x0 x1) (fp.mul RNE x2 x14))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x2 x20) (fp.sub RNE x10 x4)) (fp.div RNE (fp.neg x14) (fp.sub RNE x6 x9))))
(assert (fp.leq (fp.add RNE (fp.div RNE x19 x1) (fp.mul RNE x9 x9)) (fp.div RNE (fp.mul RNE x19 x11) (fp.sub RNE x5 x23))))
(assert (fp.leq (fp.neg (fp.div RNE x16 x1)) (fp.sub RNE (fp.mul RNE x11 x12) (fp.neg x1))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x2 x6) (fp.neg x21)) (fp.sub RNE (fp.div RNE x1 x8) (fp.mul RNE x6 x4))))
(check-sat)
