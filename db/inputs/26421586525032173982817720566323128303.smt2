(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.mul RNE x17 x11) (fp.neg x5)) (fp.neg (fp.sub RNE x22 x16))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x0 x1) (fp.mul RNE x22 x7)) (fp.mul RNE (fp.neg x13) (fp.sub RNE x22 x15))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x3 x19) (fp.mul RNE x16 x2)) (fp.div RNE (fp.neg x0) (fp.neg x2))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x0 x6) (fp.div RNE x19 x1)) (fp.div RNE (fp.div RNE x3 x10) (fp.mul RNE x19 x11))))
(assert (fp.geq (fp.mul RNE (fp.neg x22) (fp.sub RNE x19 x0)) (fp.mul RNE (fp.div RNE x9 x19) (fp.mul RNE x23 x4))))
(assert (fp.eq (fp.neg (fp.mul RNE x19 x13)) (fp.mul RNE (fp.neg x19) (fp.div RNE x3 x4))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x18 x14) (fp.neg x0)) (fp.neg (fp.sub RNE x14 x20))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x21 x21) (fp.sub RNE x15 x20)) (fp.add RNE (fp.sub RNE x16 x21) (fp.sub RNE x22 x14))))
(assert (fp.gt (fp.add RNE (fp.div RNE x5 x2) (fp.sub RNE x14 x20)) (fp.add RNE (fp.add RNE x5 x3) (fp.sub RNE x14 x2))))
(assert (fp.leq (fp.neg (fp.div RNE x3 x6)) (fp.add RNE (fp.add RNE x2 x23) (fp.sub RNE x15 x0))))
(assert (fp.eq (fp.neg (fp.sub RNE x20 x16)) (fp.mul RNE (fp.add RNE x11 x21) (fp.add RNE x2 x18))))
(assert (fp.gt (fp.mul RNE (fp.neg x6) (fp.add RNE x2 x20)) (fp.neg (fp.div RNE x12 x3))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x9 x22) (fp.mul RNE x9 x19)) (fp.add RNE (fp.add RNE x5 x8) (fp.div RNE x15 x13))))
(assert (fp.geq (fp.neg (fp.neg x15)) (fp.add RNE (fp.add RNE x11 x1) (fp.neg x6))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x22 x9) (fp.sub RNE x8 x23)) (fp.neg (fp.mul RNE x10 x3))))
(assert (fp.gt (fp.neg (fp.neg x8)) (fp.neg (fp.div RNE x13 x11))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x13 x11) (fp.mul RNE x17 x13)) (fp.div RNE (fp.mul RNE x4 x5) (fp.mul RNE x18 x19))))
(assert (fp.geq (fp.mul RNE (fp.neg x19) (fp.mul RNE x15 x10)) (fp.neg (fp.div RNE x3 x1))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x14 x3) (fp.neg x7)) (fp.div RNE (fp.div RNE x23 x22) (fp.add RNE x16 x9))))
(check-sat)
