(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.sub RNE x3 x0) (fp.div RNE x1 x17)) (fp.neg (fp.add RNE x19 x10))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x9 x3) (fp.mul RNE x12 x20)) (fp.mul RNE (fp.sub RNE x2 x10) (fp.div RNE x17 x15)))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.sub RNE x8 x4) (fp.sub RNE x16 x18)) (fp.div RNE (fp.mul RNE x4 x0) (fp.add RNE x1 x4))) (fp.div RNE (fp.mul RNE (fp.div RNE x14 x19) (fp.sub RNE x22 x2)) (fp.neg (fp.add RNE x19 x5)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.div RNE x14 x22)) (fp.div RNE (fp.sub RNE x4 x2) (fp.sub RNE x8 x7))) (fp.mul RNE (fp.sub RNE (fp.add RNE x14 x11) (fp.mul RNE x4 x0)) (fp.sub RNE (fp.mul RNE x13 x20) (fp.add RNE x8 x18)))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.add RNE x16 x16) (fp.add RNE x6 x1)) (fp.neg (fp.mul RNE x20 x7))) (fp.sub RNE (fp.mul RNE (fp.div RNE x4 x20) (fp.sub RNE x22 x14)) (fp.sub RNE (fp.mul RNE x3 x0) (fp.add RNE x22 x1)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.add RNE x11 x2) (fp.add RNE x5 x9)) (fp.neg (fp.sub RNE x14 x3))) (fp.mul RNE (fp.sub RNE (fp.neg x15) (fp.neg x22)) (fp.add RNE (fp.sub RNE x4 x3) (fp.sub RNE x5 x4)))))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.add RNE x7 x15) (fp.sub RNE x0 x17)) (fp.sub RNE (fp.add RNE x13 x11) (fp.div RNE x6 x10))) (fp.add RNE (fp.sub RNE (fp.neg x11) (fp.mul RNE x20 x7)) (fp.div RNE (fp.div RNE x10 x20) (fp.neg x19)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.mul RNE x8 x21) (fp.neg x5)) (fp.div RNE (fp.mul RNE x21 x16) (fp.sub RNE x0 x13))) (fp.mul RNE (fp.neg (fp.div RNE x10 x7)) (fp.neg (fp.sub RNE x7 x19)))))
(check-sat)
