(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x2 x6) (fp.add RNE x10 x6)) (fp.div RNE (fp.sub RNE x3 x6) (fp.add RNE x2 x6))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE x11 x10) (fp.add RNE x12 x3)) (fp.add RNE (fp.sub RNE x5 x7) (fp.div RNE x11 x8))))
(assert (fp.leq (fp.mul RNE (fp.neg x8) (fp.mul RNE x4 x5)) (fp.add RNE (fp.mul RNE x7 x9) (fp.add RNE x7 x3))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x8 x1) (fp.div RNE x6 x0)) (fp.sub RNE (fp.div RNE x1 x12) (fp.sub RNE x7 x11))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x8 x6) (fp.sub RNE x9 x5)) (fp.div RNE (fp.div RNE x1 x8) (fp.mul RNE x9 x12))))
(assert (fp.leq (fp.neg (fp.neg x5)) (fp.mul RNE (fp.mul RNE x5 x0) (fp.mul RNE x3 x9))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x4 x12) (fp.neg x7)) (fp.add RNE (fp.add RNE x6 x6) (fp.neg x10))))
(assert (fp.eq (fp.sub RNE (fp.neg x2) (fp.neg x10)) (fp.add RNE (fp.add RNE x12 x11) (fp.neg x9))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x6 x3) (fp.mul RNE x10 x0)) (fp.add RNE (fp.add RNE x11 x11) (fp.mul RNE x9 x8))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x8 x8) (fp.mul RNE x11 x6)) (fp.div RNE (fp.add RNE x10 x10) (fp.sub RNE x11 x1))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x1 x4) (fp.add RNE x5 x12)) (fp.neg (fp.add RNE x4 x4))))
(assert (fp.leq (fp.add RNE (fp.neg x3) (fp.neg x4)) (fp.div RNE (fp.sub RNE x0 x3) (fp.add RNE x8 x4))))
(assert (fp.lt (fp.neg (fp.neg x12)) (fp.div RNE (fp.sub RNE x6 x8) (fp.add RNE x0 x12))))
(assert (fp.geq (fp.neg (fp.neg x2)) (fp.mul RNE (fp.neg x12) (fp.add RNE x3 x8))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x8 x3) (fp.mul RNE x0 x5)) (fp.sub RNE (fp.neg x11) (fp.neg x4))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x0 x12) (fp.neg x9)) (fp.neg (fp.add RNE x8 x8))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x4 x12) (fp.sub RNE x5 x3)) (fp.neg (fp.div RNE x7 x11))))
(check-sat)
