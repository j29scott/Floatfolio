(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.neg x11) (fp.neg x6)) (fp.add RNE (fp.neg x8) (fp.add RNE x17 x9))) (fp.mul RNE (fp.neg (fp.neg x0)) (fp.add RNE (fp.sub RNE x18 x17) (fp.mul RNE x12 x8)))) (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x2 x20) (fp.neg x9)) (fp.sub RNE (fp.div RNE x20 x5) (fp.neg x7))) (fp.div RNE (fp.neg (fp.div RNE x9 x9)) (fp.div RNE (fp.mul RNE x17 x3) (fp.div RNE x9 x9))))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.add RNE (fp.neg x20) (fp.sub RNE x10 x10)) (fp.mul RNE (fp.div RNE x4 x16) (fp.div RNE x12 x22)))) (fp.div RNE (fp.add RNE (fp.neg (fp.sub RNE x14 x20)) (fp.sub RNE (fp.neg x22) (fp.sub RNE x7 x11))) (fp.mul RNE (fp.div RNE (fp.mul RNE x12 x10) (fp.sub RNE x17 x3)) (fp.add RNE (fp.sub RNE x22 x18) (fp.div RNE x12 x16))))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.neg x17) (fp.mul RNE x1 x8)) (fp.mul RNE (fp.mul RNE x13 x11) (fp.mul RNE x6 x5))) (fp.neg (fp.mul RNE (fp.neg x8) (fp.neg x1)))) (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.sub RNE x20 x22) (fp.div RNE x0 x5)) (fp.mul RNE (fp.mul RNE x19 x21) (fp.div RNE x5 x14))) (fp.mul RNE (fp.neg (fp.div RNE x13 x10)) (fp.add RNE (fp.add RNE x20 x4) (fp.add RNE x3 x12))))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.div RNE (fp.add RNE x17 x0) (fp.neg x21)) (fp.neg (fp.div RNE x21 x11)))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.add RNE x11 x16) (fp.mul RNE x16 x10)) (fp.div RNE (fp.sub RNE x17 x0) (fp.add RNE x14 x16))) (fp.neg (fp.mul RNE (fp.mul RNE x3 x16) (fp.mul RNE x8 x2))))))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.neg (fp.div RNE x1 x3)) (fp.div RNE (fp.add RNE x11 x19) (fp.div RNE x18 x20))) (fp.neg (fp.sub RNE (fp.mul RNE x5 x19) (fp.add RNE x11 x16)))) (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.add RNE x9 x19) (fp.div RNE x13 x10)) (fp.neg (fp.div RNE x15 x13))) (fp.add RNE (fp.div RNE (fp.neg x0) (fp.mul RNE x22 x11)) (fp.mul RNE (fp.sub RNE x12 x4) (fp.mul RNE x12 x15))))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.add RNE (fp.div RNE x14 x0) (fp.add RNE x19 x16)) (fp.sub RNE (fp.mul RNE x1 x3) (fp.add RNE x10 x17))) (fp.neg (fp.mul RNE (fp.neg x4) (fp.mul RNE x20 x7)))) (fp.mul RNE (fp.neg (fp.div RNE (fp.neg x6) (fp.add RNE x6 x11))) (fp.sub RNE (fp.mul RNE (fp.add RNE x15 x16) (fp.neg x0)) (fp.div RNE (fp.sub RNE x11 x2) (fp.neg x0))))))
(assert (fp.lt (fp.sub RNE (fp.add RNE (fp.div RNE (fp.div RNE x17 x9) (fp.mul RNE x8 x9)) (fp.div RNE (fp.add RNE x4 x15) (fp.neg x13))) (fp.mul RNE (fp.add RNE (fp.sub RNE x13 x13) (fp.add RNE x4 x9)) (fp.sub RNE (fp.div RNE x8 x18) (fp.div RNE x1 x9)))) (fp.mul RNE (fp.neg (fp.neg (fp.sub RNE x16 x13))) (fp.neg (fp.neg (fp.div RNE x4 x6))))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE x1 x13) (fp.add RNE x7 x12)) (fp.add RNE (fp.neg x14) (fp.neg x13))) (fp.div RNE (fp.add RNE (fp.add RNE x5 x19) (fp.sub RNE x22 x22)) (fp.add RNE (fp.sub RNE x11 x6) (fp.neg x21)))) (fp.neg (fp.sub RNE (fp.sub RNE (fp.mul RNE x15 x7) (fp.mul RNE x18 x1)) (fp.add RNE (fp.div RNE x3 x19) (fp.sub RNE x9 x15))))))
(check-sat)
