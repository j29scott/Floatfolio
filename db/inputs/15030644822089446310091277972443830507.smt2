(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.neg x13) (fp.div RNE x10 x16)) (fp.div RNE (fp.mul RNE x12 x16) (fp.mul RNE x3 x6))) (fp.neg (fp.mul RNE (fp.div RNE x6 x5) (fp.div RNE x12 x12)))) (fp.div RNE (fp.neg (fp.div RNE (fp.mul RNE x12 x3) (fp.add RNE x13 x9))) (fp.sub RNE (fp.add RNE (fp.sub RNE x3 x6) (fp.mul RNE x9 x8)) (fp.add RNE (fp.neg x1) (fp.neg x5))))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.mul RNE (fp.mul RNE x6 x1) (fp.div RNE x7 x14))) (fp.add RNE (fp.add RNE (fp.sub RNE x5 x10) (fp.neg x2)) (fp.add RNE (fp.div RNE x14 x6) (fp.sub RNE x6 x1)))) (fp.div RNE (fp.add RNE (fp.neg (fp.neg x14)) (fp.neg (fp.neg x3))) (fp.div RNE (fp.mul RNE (fp.div RNE x2 x11) (fp.add RNE x3 x1)) (fp.mul RNE (fp.mul RNE x12 x7) (fp.neg x1))))))
(assert (fp.geq (fp.sub RNE (fp.div RNE (fp.add RNE (fp.neg x6) (fp.div RNE x12 x12)) (fp.neg (fp.mul RNE x0 x12))) (fp.sub RNE (fp.sub RNE (fp.div RNE x14 x10) (fp.div RNE x2 x15)) (fp.neg (fp.add RNE x6 x8)))) (fp.neg (fp.mul RNE (fp.mul RNE (fp.neg x16) (fp.neg x12)) (fp.mul RNE (fp.add RNE x15 x11) (fp.div RNE x9 x3))))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.add RNE (fp.add RNE x10 x7) (fp.mul RNE x7 x10)) (fp.neg (fp.mul RNE x0 x5))) (fp.mul RNE (fp.neg (fp.neg x11)) (fp.neg (fp.add RNE x0 x9)))) (fp.sub RNE (fp.neg (fp.add RNE (fp.add RNE x6 x1) (fp.sub RNE x10 x1))) (fp.div RNE (fp.add RNE (fp.sub RNE x13 x0) (fp.div RNE x16 x7)) (fp.sub RNE (fp.neg x14) (fp.sub RNE x4 x13))))))
(check-sat)
