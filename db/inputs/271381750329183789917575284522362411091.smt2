(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.div RNE (fp.sub RNE x0 x1) (fp.add RNE x9 x5)) (fp.div RNE (fp.mul RNE x19 x5) (fp.div RNE x13 x21))))
(assert (fp.eq (fp.neg (fp.neg x6)) (fp.sub RNE (fp.sub RNE x7 x14) (fp.sub RNE x8 x1))))
(assert (fp.gt (fp.add RNE (fp.div RNE x21 x17) (fp.neg x2)) (fp.div RNE (fp.div RNE x17 x23) (fp.div RNE x20 x19))))
(assert (fp.leq (fp.neg (fp.mul RNE x13 x24)) (fp.neg (fp.sub RNE x19 x17))))
(assert (fp.geq (fp.neg (fp.add RNE x4 x8)) (fp.mul RNE (fp.sub RNE x24 x8) (fp.div RNE x16 x0))))
(assert (fp.eq (fp.div RNE (fp.div RNE x13 x8) (fp.mul RNE x23 x9)) (fp.neg (fp.div RNE x21 x16))))
(assert (fp.lt (fp.neg (fp.sub RNE x6 x13)) (fp.add RNE (fp.sub RNE x20 x15) (fp.mul RNE x20 x12))))
(assert (fp.gt (fp.add RNE (fp.div RNE x19 x9) (fp.mul RNE x16 x3)) (fp.div RNE (fp.sub RNE x19 x1) (fp.sub RNE x23 x2))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x14 x3) (fp.add RNE x7 x1)) (fp.sub RNE (fp.neg x18) (fp.sub RNE x15 x5))))
(assert (fp.lt (fp.sub RNE (fp.div RNE x23 x0) (fp.neg x10)) (fp.div RNE (fp.sub RNE x1 x0) (fp.add RNE x10 x15))))
(assert (fp.leq (fp.add RNE (fp.add RNE x13 x2) (fp.neg x13)) (fp.neg (fp.add RNE x16 x14))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x5 x7) (fp.mul RNE x10 x9)) (fp.mul RNE (fp.div RNE x13 x20) (fp.mul RNE x24 x5))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x13 x18) (fp.mul RNE x15 x2)) (fp.add RNE (fp.add RNE x19 x2) (fp.neg x23))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x18 x2) (fp.add RNE x14 x22)) (fp.neg (fp.sub RNE x19 x20))))
(assert (fp.leq (fp.neg (fp.div RNE x23 x3)) (fp.div RNE (fp.mul RNE x13 x7) (fp.mul RNE x3 x7))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x18 x7) (fp.sub RNE x13 x20)) (fp.div RNE (fp.div RNE x12 x13) (fp.add RNE x5 x14))))
(check-sat)
