(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.neg x14) (fp.add RNE x20 x11)) (fp.mul RNE (fp.div RNE x9 x19) (fp.sub RNE x3 x19))) (fp.mul RNE (fp.neg (fp.sub RNE x0 x5)) (fp.add RNE (fp.mul RNE x17 x20) (fp.sub RNE x17 x18)))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.add RNE x20 x12) (fp.sub RNE x6 x2)) (fp.neg (fp.neg x10))) (fp.mul RNE (fp.sub RNE (fp.add RNE x20 x0) (fp.div RNE x1 x7)) (fp.add RNE (fp.add RNE x7 x9) (fp.neg x11)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.sub RNE x3 x1) (fp.mul RNE x17 x10)) (fp.sub RNE (fp.add RNE x16 x17) (fp.add RNE x18 x12))) (fp.add RNE (fp.mul RNE (fp.mul RNE x4 x1) (fp.neg x21)) (fp.mul RNE (fp.mul RNE x11 x9) (fp.div RNE x6 x3)))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.add RNE x6 x11) (fp.mul RNE x6 x4)) (fp.mul RNE (fp.neg x2) (fp.div RNE x2 x16))) (fp.mul RNE (fp.div RNE (fp.sub RNE x9 x0) (fp.neg x16)) (fp.neg (fp.neg x19)))))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.add RNE x21 x4) (fp.div RNE x17 x2)) (fp.neg (fp.add RNE x4 x10))) (fp.div RNE (fp.add RNE (fp.div RNE x19 x16) (fp.add RNE x14 x21)) (fp.add RNE (fp.div RNE x17 x6) (fp.div RNE x14 x21)))))
(assert (fp.eq (fp.sub RNE (fp.neg (fp.div RNE x17 x11)) (fp.neg (fp.sub RNE x3 x6))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x8 x9) (fp.sub RNE x5 x4)) (fp.sub RNE (fp.neg x16) (fp.div RNE x9 x21)))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.neg x4) (fp.neg x14)) (fp.div RNE (fp.div RNE x3 x12) (fp.neg x8))) (fp.div RNE (fp.div RNE (fp.add RNE x20 x20) (fp.add RNE x8 x16)) (fp.div RNE (fp.neg x15) (fp.mul RNE x17 x2)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.add RNE x13 x8)) (fp.neg (fp.mul RNE x1 x5))) (fp.sub RNE (fp.neg (fp.neg x8)) (fp.div RNE (fp.sub RNE x15 x8) (fp.add RNE x12 x16)))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.neg x17) (fp.sub RNE x0 x13)) (fp.mul RNE (fp.mul RNE x13 x4) (fp.neg x5))) (fp.mul RNE (fp.mul RNE (fp.div RNE x13 x15) (fp.add RNE x16 x9)) (fp.sub RNE (fp.div RNE x14 x6) (fp.mul RNE x16 x10)))))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.neg x13)) (fp.add RNE (fp.neg x1) (fp.neg x20))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x13 x20) (fp.mul RNE x20 x16)) (fp.add RNE (fp.add RNE x10 x4) (fp.div RNE x21 x7)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.add RNE x19 x5)) (fp.add RNE (fp.add RNE x20 x4) (fp.mul RNE x16 x11))) (fp.div RNE (fp.add RNE (fp.sub RNE x12 x2) (fp.add RNE x1 x13)) (fp.neg (fp.neg x19)))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.sub RNE x20 x7) (fp.sub RNE x10 x7)) (fp.add RNE (fp.add RNE x20 x15) (fp.div RNE x1 x15))) (fp.sub RNE (fp.sub RNE (fp.neg x8) (fp.div RNE x21 x11)) (fp.mul RNE (fp.div RNE x1 x19) (fp.sub RNE x18 x10)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.sub RNE x16 x20) (fp.add RNE x8 x21)) (fp.add RNE (fp.sub RNE x9 x11) (fp.mul RNE x11 x0))) (fp.neg (fp.add RNE (fp.div RNE x19 x18) (fp.add RNE x13 x11)))))
(assert (fp.leq (fp.neg (fp.neg (fp.add RNE x19 x7))) (fp.neg (fp.div RNE (fp.sub RNE x15 x14) (fp.div RNE x18 x3)))))
(check-sat)
