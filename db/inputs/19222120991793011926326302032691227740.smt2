(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.add RNE x11 x19)) (fp.div RNE (fp.mul RNE x15 x15) (fp.sub RNE x11 x10))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x20 x13) (fp.add RNE x3 x13)) (fp.add RNE (fp.div RNE x9 x0) (fp.sub RNE x13 x5))))
(assert (fp.gt (fp.neg (fp.mul RNE x8 x5)) (fp.sub RNE (fp.mul RNE x10 x13) (fp.div RNE x2 x20))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x0 x16) (fp.neg x20)) (fp.mul RNE (fp.div RNE x13 x15) (fp.div RNE x7 x12))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x11 x4) (fp.div RNE x8 x12)) (fp.add RNE (fp.div RNE x14 x14) (fp.div RNE x3 x12))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x10 x11) (fp.neg x11)) (fp.add RNE (fp.sub RNE x10 x6) (fp.div RNE x15 x14))))
(assert (fp.lt (fp.neg (fp.sub RNE x19 x11)) (fp.sub RNE (fp.div RNE x17 x20) (fp.div RNE x8 x8))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x9 x9) (fp.div RNE x5 x16)) (fp.mul RNE (fp.sub RNE x1 x15) (fp.div RNE x10 x12))))
(assert (fp.gt (fp.neg (fp.add RNE x2 x10)) (fp.div RNE (fp.neg x3) (fp.div RNE x20 x9))))
(assert (fp.leq (fp.neg (fp.mul RNE x0 x1)) (fp.neg (fp.sub RNE x3 x13))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x19 x9) (fp.neg x7)) (fp.mul RNE (fp.neg x17) (fp.mul RNE x5 x6))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x3 x4) (fp.add RNE x19 x7)) (fp.neg (fp.div RNE x6 x12))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x5 x3) (fp.add RNE x8 x8)) (fp.mul RNE (fp.div RNE x5 x9) (fp.mul RNE x11 x7))))
(check-sat)
