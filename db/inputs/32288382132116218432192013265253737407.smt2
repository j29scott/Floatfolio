(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.mul RNE (fp.neg x4) (fp.neg x2)) (fp.sub RNE (fp.mul RNE x10 x8) (fp.add RNE x0 x6))))
(assert (fp.lt (fp.neg (fp.neg x9)) (fp.div RNE (fp.sub RNE x1 x10) (fp.mul RNE x1 x11))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x10 x12) (fp.add RNE x12 x9)) (fp.add RNE (fp.sub RNE x9 x8) (fp.sub RNE x13 x12))))
(assert (fp.geq (fp.neg (fp.mul RNE x8 x13)) (fp.div RNE (fp.sub RNE x0 x7) (fp.div RNE x0 x11))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x6 x3) (fp.add RNE x6 x2)) (fp.neg (fp.div RNE x3 x12))))
(assert (fp.leq (fp.neg (fp.neg x2)) (fp.div RNE (fp.add RNE x0 x0) (fp.neg x2))))
(assert (fp.eq (fp.neg (fp.add RNE x0 x3)) (fp.add RNE (fp.mul RNE x1 x8) (fp.div RNE x2 x5))))
(assert (fp.eq (fp.neg (fp.mul RNE x1 x0)) (fp.neg (fp.div RNE x5 x7))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x4 x8) (fp.add RNE x13 x12)) (fp.add RNE (fp.add RNE x0 x12) (fp.add RNE x8 x7))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x12 x7) (fp.add RNE x12 x2)) (fp.add RNE (fp.neg x0) (fp.sub RNE x10 x13))))
(assert (fp.eq (fp.add RNE (fp.add RNE x10 x5) (fp.add RNE x11 x3)) (fp.neg (fp.neg x13))))
(assert (fp.lt (fp.neg (fp.neg x0)) (fp.add RNE (fp.div RNE x0 x10) (fp.neg x8))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x6 x11) (fp.div RNE x11 x13)) (fp.neg (fp.neg x6))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x3 x9) (fp.sub RNE x11 x6)) (fp.neg (fp.neg x5))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x0 x11) (fp.neg x6)) (fp.div RNE (fp.neg x11) (fp.div RNE x5 x7))))
(assert (fp.geq (fp.neg (fp.sub RNE x13 x5)) (fp.mul RNE (fp.neg x0) (fp.div RNE x9 x7))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x8 x0) (fp.div RNE x6 x1)) (fp.sub RNE (fp.mul RNE x9 x2) (fp.sub RNE x12 x8))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x6 x4) (fp.add RNE x11 x3)) (fp.add RNE (fp.div RNE x9 x0) (fp.neg x13))))
(check-sat)
