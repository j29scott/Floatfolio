(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x6 x20) (fp.add RNE x15 x0)) (fp.div RNE (fp.mul RNE x19 x3) (fp.mul RNE x1 x10))))
(assert (fp.leq (fp.neg (fp.mul RNE x19 x8)) (fp.sub RNE (fp.div RNE x4 x0) (fp.div RNE x6 x6))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x4 x17) (fp.mul RNE x22 x17)) (fp.sub RNE (fp.sub RNE x22 x5) (fp.div RNE x16 x0))))
(assert (fp.gt (fp.neg (fp.div RNE x0 x19)) (fp.div RNE (fp.mul RNE x21 x13) (fp.neg x13))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x7 x16) (fp.sub RNE x15 x13)) (fp.sub RNE (fp.div RNE x22 x9) (fp.mul RNE x12 x18))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x17 x7) (fp.neg x2)) (fp.mul RNE (fp.neg x4) (fp.neg x4))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x0 x2) (fp.div RNE x19 x17)) (fp.mul RNE (fp.neg x13) (fp.div RNE x12 x6))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x15 x10) (fp.add RNE x10 x22)) (fp.add RNE (fp.neg x2) (fp.neg x4))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x10 x20) (fp.div RNE x13 x12)) (fp.neg (fp.mul RNE x19 x8))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x2 x15) (fp.neg x15)) (fp.sub RNE (fp.add RNE x3 x5) (fp.add RNE x11 x4))))
(assert (fp.geq (fp.neg (fp.neg x15)) (fp.div RNE (fp.neg x20) (fp.mul RNE x7 x17))))
(assert (fp.lt (fp.div RNE (fp.neg x17) (fp.div RNE x21 x13)) (fp.add RNE (fp.neg x13) (fp.sub RNE x8 x5))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x20 x13) (fp.mul RNE x18 x5)) (fp.div RNE (fp.mul RNE x5 x6) (fp.neg x21))))
(check-sat)
