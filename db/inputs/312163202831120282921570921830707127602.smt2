(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x17 x4) (fp.mul RNE x11 x4)) (fp.sub RNE (fp.mul RNE x8 x11) (fp.add RNE x0 x0))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x10 x7) (fp.add RNE x9 x4)) (fp.neg (fp.div RNE x6 x15))))
(assert (fp.gt (fp.add RNE (fp.neg x12) (fp.div RNE x3 x9)) (fp.neg (fp.sub RNE x8 x4))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x3 x14) (fp.mul RNE x12 x14)) (fp.neg (fp.add RNE x1 x1))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x10 x11) (fp.div RNE x15 x10)) (fp.neg (fp.neg x9))))
(assert (fp.lt (fp.div RNE (fp.neg x3) (fp.mul RNE x16 x16)) (fp.mul RNE (fp.neg x12) (fp.mul RNE x9 x12))))
(assert (fp.lt (fp.neg (fp.div RNE x8 x3)) (fp.mul RNE (fp.mul RNE x7 x13) (fp.mul RNE x14 x9))))
(assert (fp.leq (fp.neg (fp.div RNE x14 x4)) (fp.add RNE (fp.mul RNE x9 x13) (fp.add RNE x12 x17))))
(assert (fp.gt (fp.neg (fp.mul RNE x13 x7)) (fp.add RNE (fp.div RNE x14 x8) (fp.sub RNE x6 x8))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x7 x8) (fp.sub RNE x15 x5)) (fp.sub RNE (fp.sub RNE x6 x11) (fp.mul RNE x6 x16))))
(assert (fp.geq (fp.add RNE (fp.add RNE x7 x7) (fp.neg x7)) (fp.mul RNE (fp.div RNE x12 x6) (fp.add RNE x4 x10))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x2 x15) (fp.div RNE x13 x15)) (fp.div RNE (fp.div RNE x12 x8) (fp.div RNE x14 x11))))
(assert (fp.leq (fp.div RNE (fp.add RNE x16 x4) (fp.sub RNE x7 x15)) (fp.neg (fp.add RNE x14 x13))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x8 x10) (fp.add RNE x4 x13)) (fp.add RNE (fp.sub RNE x16 x2) (fp.neg x3))))
(check-sat)
