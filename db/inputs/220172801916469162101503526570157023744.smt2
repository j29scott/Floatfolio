(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.sub RNE x14 x0) (fp.neg x14)) (fp.add RNE (fp.neg x7) (fp.sub RNE x14 x7))) (fp.div RNE (fp.add RNE (fp.div RNE x0 x12) (fp.div RNE x7 x9)) (fp.mul RNE (fp.mul RNE x3 x4) (fp.mul RNE x13 x0)))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.add RNE x8 x2) (fp.mul RNE x5 x13)) (fp.sub RNE (fp.add RNE x1 x10) (fp.sub RNE x0 x6))) (fp.add RNE (fp.mul RNE (fp.neg x0) (fp.neg x12)) (fp.mul RNE (fp.add RNE x9 x10) (fp.div RNE x2 x13)))))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.mul RNE x10 x1) (fp.sub RNE x10 x3)) (fp.neg (fp.div RNE x10 x11))) (fp.neg (fp.div RNE (fp.add RNE x5 x3) (fp.neg x1)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.sub RNE x13 x2) (fp.neg x13))) (fp.div RNE (fp.mul RNE (fp.sub RNE x3 x1) (fp.sub RNE x2 x6)) (fp.div RNE (fp.div RNE x6 x11) (fp.neg x9)))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.neg x2) (fp.mul RNE x12 x7)) (fp.sub RNE (fp.sub RNE x5 x7) (fp.div RNE x5 x5))) (fp.neg (fp.mul RNE (fp.neg x5) (fp.div RNE x2 x11)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.add RNE x7 x5) (fp.add RNE x14 x14)) (fp.div RNE (fp.div RNE x4 x14) (fp.add RNE x3 x11))) (fp.div RNE (fp.neg (fp.div RNE x13 x12)) (fp.add RNE (fp.add RNE x9 x9) (fp.div RNE x14 x10)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.div RNE x10 x10) (fp.add RNE x11 x4)) (fp.div RNE (fp.add RNE x8 x2) (fp.mul RNE x0 x13))) (fp.div RNE (fp.neg (fp.add RNE x2 x6)) (fp.div RNE (fp.neg x1) (fp.mul RNE x12 x1)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.mul RNE x8 x0) (fp.neg x13))) (fp.mul RNE (fp.mul RNE (fp.add RNE x5 x7) (fp.add RNE x9 x10)) (fp.sub RNE (fp.sub RNE x8 x3) (fp.add RNE x5 x7)))))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.sub RNE x8 x11) (fp.neg x8)) (fp.mul RNE (fp.mul RNE x13 x13) (fp.mul RNE x14 x12))) (fp.sub RNE (fp.add RNE (fp.mul RNE x2 x4) (fp.neg x6)) (fp.neg (fp.div RNE x6 x11)))))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.add RNE x4 x10) (fp.sub RNE x7 x6)) (fp.mul RNE (fp.mul RNE x7 x10) (fp.mul RNE x11 x13))) (fp.div RNE (fp.sub RNE (fp.sub RNE x11 x8) (fp.mul RNE x10 x13)) (fp.sub RNE (fp.add RNE x4 x7) (fp.neg x12)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.div RNE x3 x6) (fp.sub RNE x5 x9)) (fp.sub RNE (fp.neg x10) (fp.neg x13))) (fp.add RNE (fp.neg (fp.neg x4)) (fp.mul RNE (fp.add RNE x11 x13) (fp.neg x3)))))
(check-sat)
