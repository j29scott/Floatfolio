(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.neg (fp.add RNE x7 x2)) (fp.sub RNE (fp.mul RNE x11 x6) (fp.add RNE x11 x5))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x9 x10) (fp.mul RNE x9 x11)) (fp.div RNE (fp.neg x0) (fp.div RNE x1 x6)))) (fp.div RNE (fp.sub RNE (fp.neg (fp.mul RNE x10 x10)) (fp.add RNE (fp.sub RNE x3 x8) (fp.add RNE x4 x3))) (fp.div RNE (fp.neg (fp.sub RNE x5 x4)) (fp.sub RNE (fp.sub RNE x4 x8) (fp.sub RNE x11 x3))))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.sub RNE (fp.add RNE x2 x2) (fp.neg x10)) (fp.sub RNE (fp.add RNE x8 x5) (fp.add RNE x1 x10))) (fp.div RNE (fp.div RNE (fp.div RNE x1 x7) (fp.neg x6)) (fp.sub RNE (fp.div RNE x0 x8) (fp.sub RNE x0 x5)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.add RNE x10 x2) (fp.neg x10)) (fp.add RNE (fp.mul RNE x11 x1) (fp.neg x4))) (fp.neg (fp.div RNE (fp.div RNE x5 x7) (fp.div RNE x9 x2))))))
(check-sat)
