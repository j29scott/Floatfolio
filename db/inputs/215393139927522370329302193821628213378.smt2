(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.add RNE x10 x8) (fp.div RNE x10 x12)) (fp.mul RNE (fp.add RNE x2 x4) (fp.div RNE x11 x7))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x4 x0) (fp.div RNE x11 x0)) (fp.neg (fp.neg x5))))
(assert (fp.leq (fp.sub RNE (fp.neg x7) (fp.neg x0)) (fp.neg (fp.div RNE x6 x7))))
(assert (fp.leq (fp.div RNE (fp.add RNE x3 x9) (fp.sub RNE x7 x4)) (fp.sub RNE (fp.div RNE x4 x11) (fp.mul RNE x10 x5))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x0 x9) (fp.sub RNE x0 x11)) (fp.sub RNE (fp.sub RNE x1 x5) (fp.div RNE x3 x6))))
(assert (fp.leq (fp.neg (fp.neg x8)) (fp.neg (fp.neg x11))))
(assert (fp.geq (fp.add RNE (fp.add RNE x8 x9) (fp.add RNE x9 x3)) (fp.div RNE (fp.neg x6) (fp.sub RNE x1 x11))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x2 x11) (fp.sub RNE x1 x10)) (fp.div RNE (fp.mul RNE x12 x10) (fp.sub RNE x2 x10))))
(check-sat)
