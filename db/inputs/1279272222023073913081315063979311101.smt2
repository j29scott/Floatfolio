(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(declare-const x26 (_ FloatingPoint 8 24))
(declare-const x27 (_ FloatingPoint 8 24))
(declare-const x28 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE x23 x6) (fp.add RNE x18 x21)))
(assert (fp.geq (fp.sub RNE x2 x19) (fp.neg x20)))
(assert (fp.eq (fp.add RNE x27 x7) (fp.sub RNE x2 x14)))
(assert (fp.gt (fp.add RNE x13 x26) (fp.div RNE x26 x27)))
(assert (fp.geq (fp.add RNE x14 x16) (fp.div RNE x6 x10)))
(assert (fp.geq (fp.mul RNE x23 x19) (fp.div RNE x16 x12)))
(assert (fp.leq (fp.mul RNE x5 x25) (fp.sub RNE x3 x0)))
(assert (fp.gt (fp.sub RNE x20 x6) (fp.neg x26)))
(assert (fp.gt (fp.sub RNE x17 x7) (fp.neg x22)))
(assert (fp.leq (fp.mul RNE x15 x3) (fp.add RNE x7 x5)))
(assert (fp.leq (fp.add RNE x10 x7) (fp.sub RNE x9 x12)))
(assert (fp.gt (fp.neg x17) (fp.mul RNE x13 x4)))
(assert (fp.eq (fp.sub RNE x3 x18) (fp.add RNE x9 x28)))
(assert (fp.gt (fp.add RNE x13 x13) (fp.add RNE x2 x13)))
(assert (fp.leq (fp.sub RNE x19 x13) (fp.neg x1)))
(assert (fp.lt (fp.div RNE x2 x4) (fp.mul RNE x24 x20)))
(assert (fp.lt (fp.sub RNE x7 x2) (fp.mul RNE x11 x3)))
(assert (fp.gt (fp.div RNE x2 x13) (fp.div RNE x24 x6)))
(assert (fp.eq (fp.mul RNE x21 x3) (fp.add RNE x0 x18)))
(assert (fp.leq (fp.div RNE x21 x11) (fp.sub RNE x7 x10)))
(check-sat)
