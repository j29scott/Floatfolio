(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.mul RNE (fp.neg x19) (fp.sub RNE x9 x3)) (fp.div RNE (fp.div RNE x8 x7) (fp.neg x14))))
(assert (fp.geq (fp.neg (fp.add RNE x7 x9)) (fp.add RNE (fp.add RNE x22 x14) (fp.sub RNE x13 x25))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x23 x2) (fp.neg x22)) (fp.sub RNE (fp.div RNE x9 x20) (fp.neg x16))))
(assert (fp.lt (fp.add RNE (fp.div RNE x7 x25) (fp.neg x10)) (fp.div RNE (fp.mul RNE x18 x16) (fp.add RNE x3 x0))))
(assert (fp.gt (fp.div RNE (fp.neg x2) (fp.div RNE x6 x2)) (fp.mul RNE (fp.sub RNE x11 x7) (fp.neg x16))))
(assert (fp.geq (fp.neg (fp.add RNE x6 x17)) (fp.neg (fp.mul RNE x26 x17))))
(assert (fp.lt (fp.neg (fp.add RNE x16 x10)) (fp.add RNE (fp.sub RNE x20 x20) (fp.sub RNE x6 x1))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x18 x9) (fp.add RNE x5 x14)) (fp.add RNE (fp.add RNE x26 x14) (fp.div RNE x19 x9))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x9 x15) (fp.div RNE x1 x23)) (fp.div RNE (fp.div RNE x0 x19) (fp.sub RNE x11 x1))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x18 x11) (fp.add RNE x2 x26)) (fp.mul RNE (fp.mul RNE x20 x8) (fp.add RNE x8 x10))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x22 x2) (fp.mul RNE x0 x2)) (fp.add RNE (fp.div RNE x0 x0) (fp.sub RNE x13 x10))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x5 x3) (fp.div RNE x19 x10)) (fp.mul RNE (fp.neg x13) (fp.add RNE x26 x13))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x7 x24) (fp.add RNE x18 x20)) (fp.mul RNE (fp.sub RNE x18 x26) (fp.div RNE x5 x23))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x22 x18) (fp.mul RNE x5 x25)) (fp.sub RNE (fp.neg x2) (fp.mul RNE x15 x8))))
(assert (fp.leq (fp.neg (fp.div RNE x5 x21)) (fp.neg (fp.neg x5))))
(assert (fp.geq (fp.neg (fp.mul RNE x25 x8)) (fp.add RNE (fp.neg x20) (fp.div RNE x5 x21))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x12 x17) (fp.div RNE x24 x3)) (fp.neg (fp.div RNE x8 x2))))
(check-sat)
