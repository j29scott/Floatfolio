(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.neg (fp.sub RNE x15 x5)) (fp.neg (fp.div RNE x6 x5))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x6 x3) (fp.div RNE x16 x7)) (fp.neg (fp.sub RNE x8 x7))))
(assert (fp.gt (fp.div RNE (fp.neg x13) (fp.neg x4)) (fp.sub RNE (fp.neg x6) (fp.mul RNE x9 x9))))
(assert (fp.eq (fp.mul RNE (fp.neg x9) (fp.sub RNE x8 x15)) (fp.add RNE (fp.add RNE x10 x14) (fp.neg x2))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x8 x9) (fp.neg x13)) (fp.sub RNE (fp.mul RNE x10 x0) (fp.add RNE x7 x10))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x2 x9) (fp.div RNE x14 x4)) (fp.neg (fp.sub RNE x13 x1))))
(assert (fp.leq (fp.div RNE (fp.add RNE x0 x16) (fp.neg x15)) (fp.mul RNE (fp.sub RNE x13 x1) (fp.neg x1))))
(assert (fp.leq (fp.neg (fp.add RNE x5 x3)) (fp.div RNE (fp.add RNE x11 x12) (fp.neg x8))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x16 x8) (fp.sub RNE x0 x9)) (fp.div RNE (fp.mul RNE x13 x15) (fp.add RNE x10 x11))))
(assert (fp.gt (fp.neg (fp.sub RNE x9 x6)) (fp.neg (fp.add RNE x6 x0))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x14 x16) (fp.neg x6)) (fp.sub RNE (fp.div RNE x13 x9) (fp.sub RNE x4 x1))))
(assert (fp.leq (fp.neg (fp.add RNE x14 x10)) (fp.sub RNE (fp.add RNE x7 x4) (fp.sub RNE x13 x14))))
(assert (fp.eq (fp.neg (fp.mul RNE x16 x14)) (fp.sub RNE (fp.div RNE x14 x10) (fp.neg x5))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x11 x3) (fp.sub RNE x12 x0)) (fp.neg (fp.sub RNE x4 x1))))
(check-sat)
