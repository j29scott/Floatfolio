(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.neg x12) (fp.neg x21)) (fp.div RNE (fp.div RNE x19 x19) (fp.neg x4))) (fp.div RNE (fp.neg (fp.sub RNE x20 x6)) (fp.neg (fp.sub RNE x22 x20)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.div RNE x10 x20) (fp.neg x13)) (fp.sub RNE (fp.neg x11) (fp.neg x10))) (fp.sub RNE (fp.sub RNE (fp.neg x10) (fp.mul RNE x2 x10)) (fp.add RNE (fp.sub RNE x5 x0) (fp.sub RNE x6 x1)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.add RNE x0 x12) (fp.div RNE x22 x15)) (fp.div RNE (fp.sub RNE x20 x2) (fp.mul RNE x10 x18))) (fp.div RNE (fp.add RNE (fp.mul RNE x12 x11) (fp.add RNE x22 x20)) (fp.mul RNE (fp.neg x21) (fp.add RNE x0 x11)))))
(assert (fp.lt (fp.div RNE (fp.neg (fp.add RNE x19 x13)) (fp.neg (fp.add RNE x20 x0))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x18 x8) (fp.add RNE x0 x18)) (fp.mul RNE (fp.sub RNE x21 x2) (fp.div RNE x15 x22)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.div RNE x22 x20) (fp.neg x4)) (fp.neg (fp.mul RNE x18 x7))) (fp.div RNE (fp.div RNE (fp.sub RNE x18 x6) (fp.neg x6)) (fp.neg (fp.neg x17)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.neg x16) (fp.add RNE x15 x12)) (fp.sub RNE (fp.add RNE x14 x20) (fp.mul RNE x10 x11))) (fp.add RNE (fp.mul RNE (fp.mul RNE x16 x20) (fp.div RNE x3 x17)) (fp.sub RNE (fp.div RNE x2 x14) (fp.add RNE x9 x17)))))
(check-sat)
