(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.mul RNE (fp.neg x10) (fp.sub RNE x0 x7)) (fp.div RNE (fp.sub RNE x3 x4) (fp.add RNE x20 x19))))
(assert (fp.lt (fp.div RNE (fp.div RNE x1 x18) (fp.add RNE x20 x6)) (fp.div RNE (fp.div RNE x9 x22) (fp.add RNE x0 x15))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x15 x17) (fp.sub RNE x11 x4)) (fp.mul RNE (fp.add RNE x22 x18) (fp.mul RNE x20 x16))))
(assert (fp.geq (fp.div RNE (fp.neg x7) (fp.neg x11)) (fp.add RNE (fp.mul RNE x18 x1) (fp.neg x15))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x7 x0) (fp.div RNE x19 x8)) (fp.div RNE (fp.sub RNE x24 x1) (fp.add RNE x6 x1))))
(assert (fp.lt (fp.div RNE (fp.neg x1) (fp.neg x10)) (fp.mul RNE (fp.div RNE x17 x11) (fp.div RNE x19 x12))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x5 x6) (fp.div RNE x18 x8)) (fp.add RNE (fp.div RNE x12 x1) (fp.neg x2))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x23 x20) (fp.add RNE x7 x8)) (fp.div RNE (fp.add RNE x7 x24) (fp.sub RNE x18 x14))))
(assert (fp.geq (fp.div RNE (fp.neg x13) (fp.neg x16)) (fp.div RNE (fp.add RNE x7 x21) (fp.add RNE x16 x11))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x20 x16) (fp.neg x7)) (fp.neg (fp.sub RNE x5 x10))))
(assert (fp.leq (fp.sub RNE (fp.neg x13) (fp.sub RNE x9 x24)) (fp.div RNE (fp.add RNE x6 x17) (fp.neg x17))))
(check-sat)
