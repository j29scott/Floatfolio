(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.div RNE (fp.mul RNE x17 x17) (fp.div RNE x13 x8)) (fp.neg (fp.mul RNE x13 x9))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x24 x8) (fp.add RNE x2 x9)) (fp.div RNE (fp.neg x10) (fp.neg x3))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x14 x18) (fp.add RNE x22 x8)) (fp.neg (fp.add RNE x20 x10))))
(assert (fp.gt (fp.div RNE (fp.div RNE x3 x1) (fp.add RNE x4 x12)) (fp.div RNE (fp.neg x13) (fp.add RNE x19 x9))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x4 x9) (fp.add RNE x0 x11)) (fp.div RNE (fp.neg x8) (fp.sub RNE x16 x16))))
(assert (fp.geq (fp.neg (fp.div RNE x13 x24)) (fp.div RNE (fp.neg x3) (fp.add RNE x8 x6))))
(assert (fp.geq (fp.div RNE (fp.add RNE x10 x13) (fp.sub RNE x15 x24)) (fp.div RNE (fp.div RNE x13 x7) (fp.add RNE x7 x8))))
(assert (fp.gt (fp.sub RNE (fp.neg x18) (fp.neg x6)) (fp.add RNE (fp.mul RNE x5 x7) (fp.sub RNE x20 x12))))
(assert (fp.eq (fp.mul RNE (fp.neg x7) (fp.neg x5)) (fp.add RNE (fp.mul RNE x19 x23) (fp.neg x19))))
(assert (fp.leq (fp.neg (fp.add RNE x19 x13)) (fp.mul RNE (fp.div RNE x7 x8) (fp.neg x14))))
(check-sat)
