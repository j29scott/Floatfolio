(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.sub RNE (fp.mul RNE x10 x6) (fp.sub RNE x11 x15)) (fp.neg (fp.sub RNE x5 x1))) (fp.sub RNE (fp.mul RNE (fp.neg x5) (fp.mul RNE x5 x11)) (fp.mul RNE (fp.sub RNE x11 x0) (fp.neg x6)))) (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.add RNE x14 x0) (fp.neg x11)) (fp.sub RNE (fp.mul RNE x9 x6) (fp.neg x2))) (fp.mul RNE (fp.mul RNE (fp.div RNE x15 x8) (fp.mul RNE x13 x9)) (fp.mul RNE (fp.sub RNE x5 x10) (fp.sub RNE x15 x15))))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.mul RNE (fp.neg x5) (fp.sub RNE x5 x3)) (fp.add RNE (fp.div RNE x5 x0) (fp.add RNE x4 x14))) (fp.sub RNE (fp.sub RNE (fp.div RNE x7 x5) (fp.div RNE x12 x3)) (fp.neg (fp.div RNE x7 x7)))) (fp.neg (fp.mul RNE (fp.sub RNE (fp.add RNE x10 x10) (fp.neg x11)) (fp.sub RNE (fp.add RNE x15 x3) (fp.mul RNE x15 x10))))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x0 x14) (fp.mul RNE x0 x4)) (fp.add RNE (fp.sub RNE x8 x7) (fp.mul RNE x4 x11))) (fp.mul RNE (fp.neg (fp.sub RNE x0 x11)) (fp.neg (fp.neg x15)))) (fp.sub RNE (fp.neg (fp.mul RNE (fp.add RNE x0 x11) (fp.neg x15))) (fp.add RNE (fp.add RNE (fp.sub RNE x8 x13) (fp.sub RNE x1 x3)) (fp.sub RNE (fp.add RNE x11 x5) (fp.neg x9))))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x2 x8) (fp.div RNE x7 x8)) (fp.add RNE (fp.div RNE x1 x9) (fp.sub RNE x5 x2))) (fp.neg (fp.add RNE (fp.mul RNE x0 x4) (fp.neg x0)))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.add RNE x0 x7) (fp.mul RNE x7 x11)) (fp.sub RNE (fp.div RNE x11 x2) (fp.neg x3))) (fp.mul RNE (fp.sub RNE (fp.add RNE x14 x2) (fp.div RNE x8 x12)) (fp.neg (fp.neg x1))))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.div RNE (fp.sub RNE x14 x2) (fp.div RNE x10 x14)) (fp.mul RNE (fp.div RNE x5 x13) (fp.div RNE x11 x8)))) (fp.sub RNE (fp.sub RNE (fp.div RNE (fp.sub RNE x9 x14) (fp.mul RNE x9 x5)) (fp.mul RNE (fp.add RNE x11 x15) (fp.sub RNE x7 x4))) (fp.mul RNE (fp.mul RNE (fp.div RNE x7 x4) (fp.neg x3)) (fp.div RNE (fp.div RNE x6 x7) (fp.neg x3))))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.div RNE (fp.add RNE x5 x9) (fp.sub RNE x14 x13)) (fp.mul RNE (fp.neg x11) (fp.sub RNE x14 x2))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x9 x8) (fp.sub RNE x15 x11)) (fp.neg (fp.sub RNE x1 x9)))) (fp.mul RNE (fp.div RNE (fp.neg (fp.mul RNE x9 x14)) (fp.div RNE (fp.sub RNE x12 x0) (fp.sub RNE x14 x13))) (fp.neg (fp.sub RNE (fp.div RNE x2 x14) (fp.neg x15))))))
(check-sat)
