(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x19 x4) (fp.sub RNE x8 x2)) (fp.mul RNE (fp.mul RNE x8 x21) (fp.mul RNE x18 x2))))
(assert (fp.lt (fp.add RNE (fp.add RNE x15 x18) (fp.add RNE x7 x8)) (fp.add RNE (fp.neg x10) (fp.mul RNE x4 x15))))
(assert (fp.lt (fp.sub RNE (fp.div RNE x7 x5) (fp.add RNE x13 x7)) (fp.mul RNE (fp.div RNE x6 x4) (fp.mul RNE x14 x0))))
(assert (fp.geq (fp.mul RNE (fp.neg x16) (fp.add RNE x3 x4)) (fp.neg (fp.div RNE x8 x16))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x14 x0) (fp.mul RNE x16 x19)) (fp.div RNE (fp.mul RNE x12 x17) (fp.div RNE x1 x21))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x16 x19) (fp.sub RNE x3 x3)) (fp.div RNE (fp.neg x2) (fp.mul RNE x0 x11))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x9 x19) (fp.add RNE x9 x2)) (fp.mul RNE (fp.add RNE x3 x22) (fp.sub RNE x20 x4))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x6 x22) (fp.sub RNE x13 x8)) (fp.add RNE (fp.div RNE x4 x18) (fp.neg x6))))
(assert (fp.geq (fp.div RNE (fp.add RNE x17 x6) (fp.div RNE x6 x7)) (fp.neg (fp.sub RNE x22 x11))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x18 x4) (fp.sub RNE x4 x14)) (fp.mul RNE (fp.div RNE x9 x21) (fp.sub RNE x21 x21))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x19 x8) (fp.div RNE x11 x2)) (fp.add RNE (fp.add RNE x4 x3) (fp.neg x0))))
(assert (fp.geq (fp.div RNE (fp.div RNE x13 x10) (fp.div RNE x7 x12)) (fp.add RNE (fp.add RNE x13 x12) (fp.add RNE x10 x3))))
(check-sat)
