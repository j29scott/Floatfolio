(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(declare-const x27 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.neg (fp.add RNE x17 x22)) (fp.neg (fp.add RNE x13 x14))) (fp.div RNE (fp.neg (fp.sub RNE x19 x7)) (fp.sub RNE (fp.sub RNE x2 x13) (fp.add RNE x24 x10)))) (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.mul RNE x18 x7) (fp.add RNE x7 x23)) (fp.mul RNE (fp.div RNE x7 x27) (fp.sub RNE x12 x6))) (fp.mul RNE (fp.add RNE (fp.neg x8) (fp.add RNE x9 x4)) (fp.add RNE (fp.mul RNE x2 x15) (fp.add RNE x12 x23))))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.add RNE (fp.sub RNE x24 x21) (fp.div RNE x7 x14))) (fp.neg (fp.neg (fp.div RNE x25 x23)))) (fp.mul RNE (fp.div RNE (fp.neg (fp.sub RNE x25 x9)) (fp.div RNE (fp.add RNE x1 x19) (fp.mul RNE x14 x15))) (fp.add RNE (fp.div RNE (fp.div RNE x27 x11) (fp.neg x11)) (fp.sub RNE (fp.add RNE x23 x18) (fp.mul RNE x27 x6))))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.mul RNE x19 x10) (fp.neg x8)) (fp.mul RNE (fp.mul RNE x25 x27) (fp.neg x13))) (fp.sub RNE (fp.neg (fp.sub RNE x26 x25)) (fp.neg (fp.div RNE x8 x24)))) (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE x12 x6) (fp.add RNE x9 x22)) (fp.sub RNE (fp.div RNE x15 x9) (fp.add RNE x16 x23))) (fp.neg (fp.sub RNE (fp.add RNE x5 x21) (fp.div RNE x19 x11))))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.neg (fp.sub RNE x0 x7)) (fp.mul RNE (fp.mul RNE x26 x10) (fp.add RNE x4 x8))) (fp.add RNE (fp.sub RNE (fp.div RNE x19 x17) (fp.sub RNE x14 x10)) (fp.div RNE (fp.mul RNE x16 x4) (fp.neg x8)))) (fp.mul RNE (fp.div RNE (fp.neg (fp.div RNE x15 x10)) (fp.sub RNE (fp.div RNE x23 x17) (fp.div RNE x24 x19))) (fp.div RNE (fp.sub RNE (fp.neg x11) (fp.neg x4)) (fp.sub RNE (fp.neg x27) (fp.mul RNE x1 x26))))))
(assert (fp.geq (fp.neg (fp.neg (fp.div RNE (fp.add RNE x2 x9) (fp.neg x27)))) (fp.add RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x10 x22) (fp.sub RNE x22 x27)) (fp.add RNE (fp.div RNE x10 x26) (fp.add RNE x26 x15))) (fp.div RNE (fp.sub RNE (fp.add RNE x7 x13) (fp.mul RNE x25 x3)) (fp.neg (fp.neg x2))))))
(check-sat)
