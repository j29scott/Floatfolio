(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.neg x10) (fp.div RNE x13 x19)) (fp.sub RNE (fp.mul RNE x7 x5) (fp.add RNE x16 x12))))
(assert (fp.lt (fp.add RNE (fp.div RNE x8 x3) (fp.sub RNE x12 x12)) (fp.neg (fp.div RNE x9 x15))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x7 x16) (fp.mul RNE x14 x0)) (fp.add RNE (fp.div RNE x9 x6) (fp.neg x11))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x17 x3) (fp.neg x7)) (fp.div RNE (fp.mul RNE x9 x1) (fp.add RNE x8 x5))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x10 x3) (fp.sub RNE x5 x11)) (fp.div RNE (fp.mul RNE x7 x7) (fp.neg x0))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x8 x1) (fp.sub RNE x8 x7)) (fp.div RNE (fp.div RNE x6 x3) (fp.add RNE x2 x6))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x11 x14) (fp.mul RNE x1 x17)) (fp.add RNE (fp.mul RNE x8 x15) (fp.div RNE x18 x8))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x8 x3) (fp.sub RNE x11 x17)) (fp.div RNE (fp.div RNE x15 x3) (fp.mul RNE x5 x9))))
(assert (fp.leq (fp.div RNE (fp.add RNE x11 x13) (fp.neg x2)) (fp.neg (fp.sub RNE x1 x12))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x13 x0) (fp.mul RNE x18 x16)) (fp.neg (fp.add RNE x10 x12))))
(assert (fp.leq (fp.add RNE (fp.div RNE x15 x3) (fp.add RNE x9 x10)) (fp.add RNE (fp.div RNE x13 x6) (fp.neg x0))))
(check-sat)
