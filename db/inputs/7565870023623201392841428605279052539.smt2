(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.sub RNE (fp.add RNE (fp.mul RNE x4 x17) (fp.add RNE x5 x23)) (fp.add RNE (fp.neg x10) (fp.mul RNE x3 x3))) (fp.mul RNE (fp.sub RNE (fp.neg x0) (fp.sub RNE x22 x8)) (fp.add RNE (fp.add RNE x17 x22) (fp.neg x17)))))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.mul RNE x14 x0) (fp.mul RNE x12 x10))) (fp.div RNE (fp.add RNE (fp.mul RNE x6 x13) (fp.add RNE x4 x5)) (fp.mul RNE (fp.div RNE x14 x12) (fp.neg x17)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.add RNE x13 x18) (fp.mul RNE x17 x19)) (fp.div RNE (fp.div RNE x5 x0) (fp.mul RNE x1 x3))) (fp.add RNE (fp.mul RNE (fp.add RNE x1 x19) (fp.sub RNE x17 x0)) (fp.mul RNE (fp.add RNE x3 x0) (fp.add RNE x6 x11)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.add RNE x8 x7) (fp.mul RNE x17 x21)) (fp.div RNE (fp.div RNE x17 x9) (fp.mul RNE x2 x4))) (fp.add RNE (fp.add RNE (fp.div RNE x6 x2) (fp.div RNE x20 x3)) (fp.add RNE (fp.neg x11) (fp.div RNE x13 x0)))))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.add RNE x21 x0) (fp.add RNE x0 x3)) (fp.add RNE (fp.neg x0) (fp.neg x4))) (fp.div RNE (fp.div RNE (fp.add RNE x7 x17) (fp.add RNE x5 x15)) (fp.div RNE (fp.neg x19) (fp.mul RNE x11 x19)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.sub RNE x6 x15) (fp.add RNE x19 x20)) (fp.mul RNE (fp.mul RNE x14 x20) (fp.sub RNE x23 x8))) (fp.div RNE (fp.add RNE (fp.sub RNE x19 x2) (fp.div RNE x3 x19)) (fp.div RNE (fp.neg x16) (fp.add RNE x16 x21)))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE (fp.sub RNE x2 x13) (fp.sub RNE x9 x1)) (fp.mul RNE (fp.add RNE x5 x11) (fp.neg x16))) (fp.neg (fp.mul RNE (fp.add RNE x10 x6) (fp.neg x15)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.add RNE x13 x19) (fp.neg x21))) (fp.div RNE (fp.sub RNE (fp.mul RNE x17 x13) (fp.div RNE x21 x6)) (fp.neg (fp.mul RNE x16 x15)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.div RNE x20 x4) (fp.add RNE x5 x13)) (fp.mul RNE (fp.div RNE x7 x6) (fp.mul RNE x19 x5))) (fp.div RNE (fp.div RNE (fp.neg x13) (fp.sub RNE x21 x4)) (fp.sub RNE (fp.neg x6) (fp.neg x3)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.sub RNE x1 x0) (fp.neg x10)) (fp.sub RNE (fp.neg x23) (fp.add RNE x20 x2))) (fp.neg (fp.add RNE (fp.mul RNE x15 x14) (fp.mul RNE x0 x21)))))
(check-sat)
