(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.neg x6) (fp.mul RNE x9 x11)) (fp.sub RNE (fp.div RNE x13 x11) (fp.div RNE x14 x11))))
(assert (fp.geq (fp.add RNE (fp.neg x8) (fp.div RNE x3 x4)) (fp.sub RNE (fp.neg x13) (fp.mul RNE x14 x6))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x4 x2) (fp.mul RNE x11 x0)) (fp.mul RNE (fp.add RNE x4 x8) (fp.sub RNE x4 x3))))
(assert (fp.leq (fp.div RNE (fp.div RNE x1 x4) (fp.neg x2)) (fp.div RNE (fp.sub RNE x12 x2) (fp.add RNE x13 x1))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x9 x2) (fp.sub RNE x3 x9)) (fp.add RNE (fp.neg x10) (fp.mul RNE x0 x2))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x3 x7) (fp.mul RNE x0 x0)) (fp.div RNE (fp.div RNE x8 x12) (fp.sub RNE x4 x4))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x1 x0) (fp.add RNE x13 x6)) (fp.div RNE (fp.div RNE x8 x10) (fp.mul RNE x9 x13))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x6 x3) (fp.mul RNE x1 x3)) (fp.add RNE (fp.div RNE x10 x8) (fp.add RNE x5 x10))))
(assert (fp.leq (fp.neg (fp.sub RNE x1 x9)) (fp.div RNE (fp.mul RNE x4 x4) (fp.sub RNE x6 x11))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x3 x0) (fp.sub RNE x2 x0)) (fp.mul RNE (fp.mul RNE x5 x13) (fp.div RNE x2 x13))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x11 x6) (fp.neg x12)) (fp.neg (fp.add RNE x11 x13))))
(assert (fp.lt (fp.neg (fp.div RNE x7 x3)) (fp.neg (fp.neg x4))))
(assert (fp.eq (fp.add RNE (fp.neg x0) (fp.neg x1)) (fp.sub RNE (fp.sub RNE x5 x3) (fp.div RNE x4 x14))))
(assert (fp.geq (fp.neg (fp.div RNE x0 x7)) (fp.mul RNE (fp.sub RNE x11 x4) (fp.mul RNE x0 x14))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x14 x13) (fp.div RNE x13 x1)) (fp.mul RNE (fp.div RNE x1 x8) (fp.mul RNE x10 x8))))
(check-sat)
