(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.div RNE x7 x4) (fp.mul RNE x8 x4))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x6 x3) (fp.neg x9)) (fp.neg (fp.div RNE x7 x3)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.neg x9) (fp.add RNE x8 x10)) (fp.add RNE (fp.div RNE x7 x6) (fp.add RNE x2 x0))) (fp.add RNE (fp.div RNE (fp.neg x2) (fp.div RNE x6 x5)) (fp.div RNE (fp.neg x0) (fp.mul RNE x3 x3)))))
(assert (fp.lt (fp.div RNE (fp.sub RNE (fp.add RNE x0 x11) (fp.div RNE x4 x3)) (fp.sub RNE (fp.sub RNE x3 x11) (fp.add RNE x8 x9))) (fp.add RNE (fp.neg (fp.sub RNE x4 x4)) (fp.add RNE (fp.sub RNE x3 x0) (fp.sub RNE x10 x2)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.neg x10)) (fp.div RNE (fp.add RNE x6 x8) (fp.sub RNE x2 x3))) (fp.add RNE (fp.mul RNE (fp.sub RNE x9 x0) (fp.div RNE x10 x10)) (fp.sub RNE (fp.add RNE x1 x3) (fp.mul RNE x1 x1)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.neg x0) (fp.add RNE x7 x8)) (fp.div RNE (fp.div RNE x8 x10) (fp.neg x1))) (fp.add RNE (fp.sub RNE (fp.add RNE x7 x8) (fp.mul RNE x3 x1)) (fp.neg (fp.div RNE x6 x6)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.add RNE x1 x4) (fp.neg x3)) (fp.sub RNE (fp.sub RNE x2 x2) (fp.div RNE x10 x5))) (fp.add RNE (fp.div RNE (fp.sub RNE x2 x3) (fp.neg x10)) (fp.mul RNE (fp.sub RNE x5 x7) (fp.div RNE x0 x10)))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.sub RNE x9 x5) (fp.neg x4)) (fp.div RNE (fp.add RNE x5 x6) (fp.add RNE x5 x4))) (fp.sub RNE (fp.sub RNE (fp.add RNE x0 x10) (fp.sub RNE x7 x2)) (fp.mul RNE (fp.div RNE x2 x6) (fp.neg x5)))))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.neg x10) (fp.mul RNE x6 x0))) (fp.neg (fp.sub RNE (fp.neg x7) (fp.mul RNE x7 x10)))))
(check-sat)
