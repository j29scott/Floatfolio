(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.sub RNE x1 x8) (fp.neg x16)) (fp.sub RNE (fp.neg x2) (fp.mul RNE x11 x19))))
(assert (fp.gt (fp.add RNE (fp.add RNE x18 x6) (fp.div RNE x13 x19)) (fp.mul RNE (fp.mul RNE x18 x16) (fp.mul RNE x14 x16))))
(assert (fp.leq (fp.neg (fp.sub RNE x22 x20)) (fp.add RNE (fp.add RNE x2 x16) (fp.div RNE x10 x22))))
(assert (fp.leq (fp.div RNE (fp.add RNE x17 x11) (fp.mul RNE x2 x22)) (fp.div RNE (fp.mul RNE x9 x19) (fp.sub RNE x20 x3))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x14 x2) (fp.mul RNE x13 x20)) (fp.neg (fp.div RNE x1 x4))))
(assert (fp.leq (fp.mul RNE (fp.neg x16) (fp.add RNE x7 x8)) (fp.neg (fp.add RNE x13 x12))))
(assert (fp.leq (fp.add RNE (fp.div RNE x12 x6) (fp.sub RNE x10 x14)) (fp.sub RNE (fp.sub RNE x16 x7) (fp.mul RNE x10 x2))))
(assert (fp.leq (fp.add RNE (fp.div RNE x0 x13) (fp.sub RNE x8 x3)) (fp.neg (fp.add RNE x17 x22))))
(assert (fp.leq (fp.mul RNE (fp.neg x14) (fp.mul RNE x9 x11)) (fp.mul RNE (fp.add RNE x22 x22) (fp.mul RNE x7 x7))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x7 x7) (fp.sub RNE x16 x19)) (fp.neg (fp.add RNE x13 x14))))
(assert (fp.geq (fp.neg (fp.neg x1)) (fp.add RNE (fp.neg x16) (fp.neg x17))))
(check-sat)
