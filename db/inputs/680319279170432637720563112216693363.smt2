(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x7 x22) (fp.mul RNE x6 x14)) (fp.neg (fp.sub RNE x17 x19))) (fp.sub RNE (fp.neg (fp.mul RNE x1 x2)) (fp.div RNE (fp.add RNE x10 x21) (fp.add RNE x11 x24)))) (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x15 x2) (fp.sub RNE x14 x12)) (fp.div RNE (fp.div RNE x17 x20) (fp.add RNE x24 x1))) (fp.add RNE (fp.sub RNE (fp.sub RNE x5 x11) (fp.add RNE x17 x20)) (fp.div RNE (fp.div RNE x23 x25) (fp.add RNE x18 x2))))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.sub RNE x20 x8) (fp.neg x10)) (fp.div RNE (fp.sub RNE x7 x0) (fp.neg x25))) (fp.sub RNE (fp.neg (fp.mul RNE x23 x22)) (fp.div RNE (fp.add RNE x21 x4) (fp.add RNE x4 x0)))) (fp.div RNE (fp.mul RNE (fp.neg (fp.div RNE x24 x25)) (fp.add RNE (fp.sub RNE x13 x19) (fp.div RNE x7 x6))) (fp.div RNE (fp.neg (fp.mul RNE x5 x24)) (fp.neg (fp.sub RNE x10 x10))))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x5 x17) (fp.mul RNE x13 x11)) (fp.div RNE (fp.div RNE x25 x3) (fp.add RNE x7 x21))) (fp.div RNE (fp.sub RNE (fp.mul RNE x13 x16) (fp.mul RNE x17 x19)) (fp.sub RNE (fp.neg x18) (fp.div RNE x2 x2)))) (fp.neg (fp.div RNE (fp.div RNE (fp.add RNE x21 x0) (fp.neg x5)) (fp.add RNE (fp.neg x11) (fp.mul RNE x13 x17))))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x1 x4) (fp.neg x9)) (fp.neg (fp.sub RNE x15 x8))) (fp.div RNE (fp.neg (fp.div RNE x7 x16)) (fp.neg (fp.neg x17)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.neg x18) (fp.add RNE x7 x13)) (fp.neg (fp.div RNE x13 x17))) (fp.sub RNE (fp.neg (fp.add RNE x10 x4)) (fp.div RNE (fp.mul RNE x11 x22) (fp.add RNE x12 x14))))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE (fp.sub RNE x18 x12) (fp.mul RNE x23 x15))) (fp.sub RNE (fp.add RNE (fp.sub RNE x16 x11) (fp.neg x6)) (fp.div RNE (fp.mul RNE x2 x25) (fp.div RNE x21 x22)))) (fp.neg (fp.mul RNE (fp.add RNE (fp.add RNE x7 x10) (fp.div RNE x10 x4)) (fp.add RNE (fp.neg x8) (fp.mul RNE x7 x0))))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.div RNE (fp.add RNE x22 x21) (fp.sub RNE x25 x25))) (fp.div RNE (fp.div RNE (fp.add RNE x11 x19) (fp.add RNE x16 x17)) (fp.neg (fp.div RNE x11 x23)))) (fp.sub RNE (fp.neg (fp.neg (fp.add RNE x12 x21))) (fp.neg (fp.neg (fp.div RNE x3 x3))))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.sub RNE (fp.div RNE x6 x2) (fp.div RNE x5 x0))) (fp.neg (fp.sub RNE (fp.div RNE x16 x21) (fp.add RNE x5 x10)))) (fp.add RNE (fp.div RNE (fp.div RNE (fp.add RNE x6 x16) (fp.sub RNE x21 x11)) (fp.mul RNE (fp.neg x0) (fp.neg x6))) (fp.sub RNE (fp.neg (fp.sub RNE x19 x12)) (fp.div RNE (fp.add RNE x14 x22) (fp.sub RNE x13 x14))))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.sub RNE (fp.neg x11) (fp.div RNE x11 x13)) (fp.add RNE (fp.add RNE x13 x11) (fp.sub RNE x16 x16)))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x17 x20) (fp.div RNE x0 x16)) (fp.mul RNE (fp.div RNE x18 x9) (fp.add RNE x9 x10))) (fp.div RNE (fp.div RNE (fp.neg x24) (fp.div RNE x10 x3)) (fp.neg (fp.add RNE x1 x23))))))
(check-sat)
