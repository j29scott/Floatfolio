(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.sub RNE x3 x19) (fp.mul RNE x11 x17)) (fp.add RNE (fp.neg x16) (fp.neg x6))) (fp.sub RNE (fp.add RNE (fp.add RNE x10 x11) (fp.div RNE x10 x9)) (fp.mul RNE (fp.add RNE x7 x4) (fp.sub RNE x10 x10)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.div RNE x9 x17) (fp.add RNE x7 x7)) (fp.add RNE (fp.neg x8) (fp.div RNE x15 x11))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x7 x5) (fp.mul RNE x14 x19)) (fp.div RNE (fp.neg x18) (fp.sub RNE x6 x10)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.sub RNE x0 x9) (fp.mul RNE x18 x12))) (fp.div RNE (fp.neg (fp.sub RNE x13 x7)) (fp.sub RNE (fp.div RNE x5 x1) (fp.div RNE x13 x17)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.sub RNE x10 x3) (fp.add RNE x11 x7)) (fp.div RNE (fp.add RNE x19 x13) (fp.mul RNE x0 x8))) (fp.add RNE (fp.neg (fp.mul RNE x3 x19)) (fp.add RNE (fp.mul RNE x0 x18) (fp.sub RNE x11 x9)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.div RNE x15 x8) (fp.sub RNE x3 x9))) (fp.div RNE (fp.sub RNE (fp.sub RNE x3 x16) (fp.div RNE x4 x15)) (fp.sub RNE (fp.add RNE x12 x3) (fp.add RNE x14 x14)))))
(assert (fp.eq (fp.neg (fp.neg (fp.div RNE x12 x8))) (fp.div RNE (fp.mul RNE (fp.mul RNE x10 x2) (fp.sub RNE x5 x3)) (fp.neg (fp.sub RNE x14 x15)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.mul RNE x16 x14) (fp.neg x1)) (fp.neg (fp.sub RNE x12 x17))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x5 x19) (fp.div RNE x11 x15)) (fp.mul RNE (fp.neg x4) (fp.add RNE x11 x5)))))
(assert (fp.geq (fp.add RNE (fp.neg (fp.neg x6)) (fp.neg (fp.div RNE x4 x18))) (fp.neg (fp.sub RNE (fp.neg x10) (fp.div RNE x4 x18)))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.add RNE x9 x19)) (fp.add RNE (fp.mul RNE x4 x5) (fp.sub RNE x10 x5))) (fp.neg (fp.mul RNE (fp.div RNE x9 x5) (fp.add RNE x1 x11)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.neg x6) (fp.neg x19))) (fp.div RNE (fp.mul RNE (fp.add RNE x17 x6) (fp.sub RNE x19 x1)) (fp.mul RNE (fp.div RNE x8 x1) (fp.neg x2)))))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.sub RNE x5 x9) (fp.mul RNE x17 x8)) (fp.sub RNE (fp.add RNE x5 x11) (fp.neg x14))) (fp.neg (fp.sub RNE (fp.add RNE x5 x13) (fp.div RNE x10 x11)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.mul RNE x17 x2) (fp.neg x7)) (fp.neg (fp.neg x14))) (fp.sub RNE (fp.div RNE (fp.sub RNE x4 x9) (fp.neg x7)) (fp.mul RNE (fp.add RNE x5 x7) (fp.div RNE x4 x4)))))
(assert (fp.leq (fp.neg (fp.add RNE (fp.neg x5) (fp.mul RNE x12 x3))) (fp.sub RNE (fp.add RNE (fp.mul RNE x8 x2) (fp.div RNE x12 x19)) (fp.div RNE (fp.div RNE x7 x5) (fp.div RNE x13 x14)))))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.mul RNE x11 x6)) (fp.neg (fp.neg x1))) (fp.neg (fp.sub RNE (fp.div RNE x12 x11) (fp.neg x3)))))
(assert (fp.lt (fp.div RNE (fp.neg (fp.add RNE x12 x3)) (fp.neg (fp.div RNE x5 x6))) (fp.add RNE (fp.div RNE (fp.neg x1) (fp.mul RNE x3 x1)) (fp.mul RNE (fp.div RNE x5 x13) (fp.div RNE x15 x13)))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.add RNE x8 x7)) (fp.mul RNE (fp.neg x3) (fp.sub RNE x10 x15))) (fp.add RNE (fp.sub RNE (fp.add RNE x1 x4) (fp.add RNE x1 x10)) (fp.mul RNE (fp.div RNE x7 x15) (fp.add RNE x18 x10)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.mul RNE x8 x13) (fp.mul RNE x12 x0)) (fp.sub RNE (fp.mul RNE x0 x12) (fp.add RNE x17 x0))) (fp.neg (fp.neg (fp.mul RNE x4 x11)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.sub RNE x15 x4) (fp.mul RNE x1 x1))) (fp.div RNE (fp.add RNE (fp.neg x3) (fp.neg x6)) (fp.div RNE (fp.sub RNE x2 x9) (fp.neg x0)))))
(check-sat)
