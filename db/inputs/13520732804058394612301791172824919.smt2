(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.sub RNE x15 x22) (fp.add RNE x19 x10)) (fp.add RNE (fp.neg x21) (fp.sub RNE x20 x10))) (fp.add RNE (fp.mul RNE (fp.sub RNE x15 x13) (fp.div RNE x16 x15)) (fp.sub RNE (fp.add RNE x5 x16) (fp.add RNE x7 x9)))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.sub RNE x18 x18) (fp.add RNE x9 x0)) (fp.mul RNE (fp.neg x11) (fp.div RNE x1 x10))) (fp.sub RNE (fp.div RNE (fp.add RNE x22 x22) (fp.neg x9)) (fp.sub RNE (fp.mul RNE x14 x22) (fp.mul RNE x9 x5)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x10 x2) (fp.mul RNE x1 x21)) (fp.div RNE (fp.sub RNE x16 x7) (fp.div RNE x22 x22))) (fp.add RNE (fp.div RNE (fp.neg x20) (fp.mul RNE x7 x19)) (fp.sub RNE (fp.neg x6) (fp.sub RNE x13 x0)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.add RNE x4 x2) (fp.sub RNE x22 x3))) (fp.sub RNE (fp.div RNE (fp.add RNE x12 x19) (fp.sub RNE x10 x15)) (fp.neg (fp.neg x1)))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.div RNE x11 x22) (fp.mul RNE x13 x12))) (fp.div RNE (fp.add RNE (fp.add RNE x14 x21) (fp.add RNE x1 x8)) (fp.div RNE (fp.neg x14) (fp.div RNE x7 x4)))))
(assert (fp.eq (fp.neg (fp.neg (fp.neg x16))) (fp.mul RNE (fp.neg (fp.add RNE x16 x7)) (fp.add RNE (fp.mul RNE x0 x3) (fp.neg x21)))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE x18 x15)) (fp.mul RNE (fp.div RNE x17 x17) (fp.add RNE x17 x2))) (fp.add RNE (fp.neg (fp.neg x19)) (fp.div RNE (fp.neg x10) (fp.sub RNE x22 x12)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.div RNE x22 x8) (fp.sub RNE x2 x16)) (fp.sub RNE (fp.mul RNE x18 x22) (fp.sub RNE x20 x15))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x13 x0) (fp.mul RNE x16 x6)) (fp.mul RNE (fp.div RNE x3 x8) (fp.sub RNE x19 x11)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.add RNE x11 x10) (fp.div RNE x9 x10)) (fp.div RNE (fp.add RNE x1 x5) (fp.sub RNE x19 x0))) (fp.add RNE (fp.mul RNE (fp.add RNE x5 x15) (fp.add RNE x11 x5)) (fp.neg (fp.mul RNE x20 x14)))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.neg x19) (fp.add RNE x15 x3)) (fp.add RNE (fp.sub RNE x5 x4) (fp.sub RNE x11 x14))) (fp.neg (fp.sub RNE (fp.div RNE x20 x19) (fp.div RNE x12 x13)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.sub RNE x2 x7) (fp.mul RNE x1 x19)) (fp.neg (fp.add RNE x11 x5))) (fp.neg (fp.sub RNE (fp.neg x14) (fp.add RNE x1 x9)))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.neg x1) (fp.sub RNE x12 x21)) (fp.sub RNE (fp.mul RNE x6 x2) (fp.sub RNE x0 x12))) (fp.div RNE (fp.div RNE (fp.add RNE x7 x5) (fp.neg x2)) (fp.div RNE (fp.div RNE x18 x0) (fp.mul RNE x1 x17)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.add RNE x5 x17)) (fp.neg (fp.mul RNE x22 x7))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x19 x21) (fp.sub RNE x21 x14)) (fp.add RNE (fp.neg x2) (fp.mul RNE x11 x12)))))
(assert (fp.leq (fp.neg (fp.neg (fp.mul RNE x4 x19))) (fp.sub RNE (fp.sub RNE (fp.neg x2) (fp.add RNE x0 x20)) (fp.add RNE (fp.neg x1) (fp.add RNE x1 x19)))))
(assert (fp.geq (fp.neg (fp.neg (fp.div RNE x8 x6))) (fp.mul RNE (fp.div RNE (fp.add RNE x19 x14) (fp.sub RNE x20 x6)) (fp.add RNE (fp.sub RNE x9 x1) (fp.mul RNE x16 x0)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.add RNE x12 x12)) (fp.add RNE (fp.neg x0) (fp.sub RNE x18 x18))) (fp.sub RNE (fp.neg (fp.sub RNE x19 x8)) (fp.add RNE (fp.sub RNE x0 x4) (fp.sub RNE x10 x9)))))
(check-sat)
