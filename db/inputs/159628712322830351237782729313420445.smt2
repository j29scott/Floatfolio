(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.div RNE x15 x21) (fp.neg x6)))
(assert (fp.leq (fp.div RNE x3 x4) (fp.sub RNE x18 x12)))
(assert (fp.geq (fp.div RNE x21 x4) (fp.mul RNE x9 x11)))
(assert (fp.leq (fp.div RNE x10 x4) (fp.sub RNE x25 x14)))
(assert (fp.geq (fp.sub RNE x11 x14) (fp.div RNE x4 x10)))
(assert (fp.gt (fp.add RNE x7 x19) (fp.sub RNE x21 x0)))
(assert (fp.leq (fp.div RNE x3 x11) (fp.neg x8)))
(assert (fp.eq (fp.neg x11) (fp.mul RNE x19 x2)))
(assert (fp.lt (fp.add RNE x15 x1) (fp.mul RNE x3 x9)))
(assert (fp.geq (fp.add RNE x12 x16) (fp.add RNE x16 x19)))
(assert (fp.gt (fp.add RNE x19 x8) (fp.div RNE x0 x15)))
(assert (fp.lt (fp.sub RNE x19 x22) (fp.add RNE x6 x1)))
(assert (fp.lt (fp.mul RNE x15 x15) (fp.neg x21)))
(assert (fp.geq (fp.neg x14) (fp.add RNE x14 x8)))
(assert (fp.leq (fp.sub RNE x4 x13) (fp.mul RNE x19 x22)))
(assert (fp.eq (fp.neg x22) (fp.mul RNE x16 x17)))
(assert (fp.lt (fp.add RNE x18 x18) (fp.neg x12)))
(assert (fp.geq (fp.add RNE x25 x12) (fp.neg x19)))
(assert (fp.geq (fp.mul RNE x19 x11) (fp.neg x6)))
(check-sat)
