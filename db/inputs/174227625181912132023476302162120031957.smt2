(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.div RNE (fp.mul RNE x5 x4) (fp.mul RNE x8 x9)) (fp.div RNE (fp.div RNE x6 x2) (fp.mul RNE x10 x6))))
(assert (fp.geq (fp.mul RNE (fp.neg x5) (fp.div RNE x5 x10)) (fp.div RNE (fp.add RNE x0 x8) (fp.add RNE x10 x9))))
(assert (fp.gt (fp.mul RNE (fp.neg x9) (fp.add RNE x6 x2)) (fp.mul RNE (fp.sub RNE x7 x10) (fp.mul RNE x1 x2))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x2 x4) (fp.mul RNE x9 x7)) (fp.mul RNE (fp.neg x0) (fp.mul RNE x7 x1))))
(assert (fp.leq (fp.add RNE (fp.add RNE x8 x3) (fp.mul RNE x2 x6)) (fp.mul RNE (fp.neg x1) (fp.sub RNE x6 x10))))
(assert (fp.lt (fp.neg (fp.sub RNE x10 x8)) (fp.div RNE (fp.neg x7) (fp.add RNE x8 x2))))
(assert (fp.eq (fp.neg (fp.sub RNE x0 x2)) (fp.neg (fp.div RNE x8 x7))))
(assert (fp.leq (fp.div RNE (fp.div RNE x8 x7) (fp.neg x5)) (fp.mul RNE (fp.neg x9) (fp.div RNE x8 x7))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x10 x1) (fp.add RNE x5 x3)) (fp.mul RNE (fp.mul RNE x6 x6) (fp.mul RNE x0 x9))))
(assert (fp.eq (fp.add RNE (fp.add RNE x10 x0) (fp.add RNE x7 x4)) (fp.mul RNE (fp.div RNE x6 x0) (fp.mul RNE x9 x2))))
(assert (fp.leq (fp.div RNE (fp.neg x3) (fp.div RNE x0 x4)) (fp.div RNE (fp.div RNE x8 x0) (fp.neg x4))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x2 x6) (fp.neg x3)) (fp.div RNE (fp.sub RNE x2 x10) (fp.add RNE x5 x5))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x5 x4) (fp.div RNE x9 x1)) (fp.sub RNE (fp.sub RNE x2 x10) (fp.add RNE x10 x4))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x3 x10) (fp.div RNE x8 x4)) (fp.add RNE (fp.mul RNE x2 x8) (fp.div RNE x4 x10))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x6 x2) (fp.neg x6)) (fp.sub RNE (fp.sub RNE x1 x9) (fp.mul RNE x5 x3))))
(assert (fp.lt (fp.add RNE (fp.add RNE x4 x4) (fp.div RNE x3 x9)) (fp.mul RNE (fp.neg x5) (fp.add RNE x2 x10))))
(check-sat)
