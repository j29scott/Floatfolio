(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.neg (fp.add RNE (fp.mul RNE x11 x1) (fp.mul RNE x2 x3))) (fp.mul RNE (fp.neg (fp.add RNE x1 x8)) (fp.sub RNE (fp.add RNE x10 x6) (fp.div RNE x1 x1)))))
(assert (fp.gt (fp.neg (fp.neg (fp.mul RNE x13 x0))) (fp.neg (fp.mul RNE (fp.neg x5) (fp.sub RNE x13 x10)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.add RNE x11 x11) (fp.mul RNE x1 x2))) (fp.mul RNE (fp.add RNE (fp.neg x1) (fp.neg x0)) (fp.neg (fp.sub RNE x12 x0)))))
(assert (fp.geq (fp.sub RNE (fp.add RNE (fp.div RNE x1 x7) (fp.div RNE x7 x3)) (fp.add RNE (fp.mul RNE x2 x4) (fp.neg x3))) (fp.div RNE (fp.add RNE (fp.neg x3) (fp.mul RNE x5 x9)) (fp.neg (fp.sub RNE x10 x6)))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.mul RNE x3 x8) (fp.neg x4)) (fp.sub RNE (fp.neg x4) (fp.mul RNE x3 x6))) (fp.mul RNE (fp.mul RNE (fp.add RNE x11 x6) (fp.neg x5)) (fp.div RNE (fp.sub RNE x0 x0) (fp.add RNE x13 x10)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.neg x11) (fp.div RNE x8 x9)) (fp.sub RNE (fp.div RNE x1 x12) (fp.add RNE x5 x13))) (fp.sub RNE (fp.mul RNE (fp.add RNE x0 x7) (fp.div RNE x10 x2)) (fp.mul RNE (fp.mul RNE x0 x3) (fp.div RNE x5 x8)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.mul RNE x8 x1) (fp.div RNE x5 x6)) (fp.add RNE (fp.neg x3) (fp.sub RNE x9 x4))) (fp.mul RNE (fp.div RNE (fp.add RNE x6 x6) (fp.mul RNE x12 x1)) (fp.mul RNE (fp.add RNE x4 x0) (fp.mul RNE x7 x8)))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.mul RNE x2 x2) (fp.mul RNE x4 x7)) (fp.div RNE (fp.sub RNE x7 x4) (fp.sub RNE x2 x10))) (fp.mul RNE (fp.add RNE (fp.sub RNE x11 x3) (fp.sub RNE x0 x1)) (fp.sub RNE (fp.div RNE x0 x9) (fp.neg x7)))))
(assert (fp.gt (fp.neg (fp.div RNE (fp.sub RNE x13 x0) (fp.add RNE x13 x6))) (fp.sub RNE (fp.neg (fp.neg x13)) (fp.add RNE (fp.sub RNE x10 x2) (fp.neg x11)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.neg x13) (fp.mul RNE x3 x5)) (fp.sub RNE (fp.neg x9) (fp.div RNE x1 x8))) (fp.neg (fp.neg (fp.neg x6)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.add RNE x0 x8) (fp.neg x0)) (fp.mul RNE (fp.sub RNE x3 x7) (fp.div RNE x6 x1))) (fp.sub RNE (fp.div RNE (fp.mul RNE x1 x9) (fp.sub RNE x6 x9)) (fp.mul RNE (fp.mul RNE x2 x3) (fp.add RNE x11 x7)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.div RNE x1 x1) (fp.sub RNE x4 x4)) (fp.mul RNE (fp.add RNE x9 x11) (fp.neg x4))) (fp.neg (fp.sub RNE (fp.div RNE x3 x0) (fp.sub RNE x0 x8)))))
(check-sat)
