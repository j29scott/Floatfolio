(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.div RNE x6 x6)) (fp.sub RNE (fp.neg x14) (fp.div RNE x1 x4))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x6 x9) (fp.div RNE x3 x5)) (fp.sub RNE (fp.sub RNE x7 x4) (fp.div RNE x6 x11))))
(assert (fp.leq (fp.neg (fp.neg x15)) (fp.mul RNE (fp.sub RNE x12 x15) (fp.add RNE x14 x14))))
(assert (fp.gt (fp.add RNE (fp.add RNE x11 x3) (fp.div RNE x10 x5)) (fp.add RNE (fp.mul RNE x2 x15) (fp.mul RNE x8 x0))))
(assert (fp.lt (fp.neg (fp.div RNE x5 x1)) (fp.sub RNE (fp.add RNE x8 x4) (fp.sub RNE x10 x2))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x10 x0) (fp.div RNE x0 x15)) (fp.sub RNE (fp.div RNE x16 x4) (fp.neg x1))))
(assert (fp.gt (fp.div RNE (fp.add RNE x2 x6) (fp.sub RNE x8 x0)) (fp.neg (fp.neg x0))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x9 x8) (fp.sub RNE x13 x12)) (fp.mul RNE (fp.sub RNE x13 x6) (fp.mul RNE x3 x15))))
(assert (fp.lt (fp.add RNE (fp.neg x2) (fp.neg x9)) (fp.neg (fp.mul RNE x6 x10))))
(assert (fp.gt (fp.neg (fp.neg x11)) (fp.mul RNE (fp.neg x11) (fp.sub RNE x12 x16))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x3 x14) (fp.add RNE x7 x14)) (fp.add RNE (fp.mul RNE x2 x5) (fp.neg x2))))
(assert (fp.lt (fp.neg (fp.sub RNE x8 x13)) (fp.add RNE (fp.mul RNE x7 x14) (fp.add RNE x15 x11))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE x2 x0) (fp.neg x6)) (fp.mul RNE (fp.sub RNE x16 x6) (fp.add RNE x3 x14))))
(assert (fp.eq (fp.div RNE (fp.neg x1) (fp.neg x1)) (fp.mul RNE (fp.add RNE x8 x9) (fp.mul RNE x10 x8))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x8 x1) (fp.div RNE x3 x2)) (fp.div RNE (fp.neg x14) (fp.mul RNE x14 x14))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x0 x14) (fp.sub RNE x6 x1)) (fp.sub RNE (fp.neg x12) (fp.div RNE x1 x3))))
(check-sat)
