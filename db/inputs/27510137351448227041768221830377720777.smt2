(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.sub RNE x5 x12) (fp.add RNE x6 x14)) (fp.sub RNE (fp.div RNE x14 x7) (fp.div RNE x13 x1))) (fp.add RNE (fp.sub RNE (fp.add RNE x9 x4) (fp.add RNE x11 x11)) (fp.add RNE (fp.add RNE x10 x10) (fp.add RNE x13 x6)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.neg x1) (fp.sub RNE x13 x6)) (fp.add RNE (fp.div RNE x0 x2) (fp.div RNE x7 x5))) (fp.sub RNE (fp.add RNE (fp.add RNE x5 x1) (fp.mul RNE x10 x5)) (fp.add RNE (fp.sub RNE x14 x8) (fp.mul RNE x6 x5)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.mul RNE x13 x6)) (fp.sub RNE (fp.neg x6) (fp.neg x9))) (fp.add RNE (fp.mul RNE (fp.neg x8) (fp.mul RNE x9 x0)) (fp.div RNE (fp.div RNE x13 x14) (fp.mul RNE x6 x0)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.mul RNE x9 x1) (fp.add RNE x3 x12)) (fp.div RNE (fp.neg x13) (fp.mul RNE x14 x5))) (fp.sub RNE (fp.neg (fp.div RNE x7 x4)) (fp.mul RNE (fp.sub RNE x6 x13) (fp.div RNE x3 x5)))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.mul RNE x3 x10) (fp.neg x9)) (fp.add RNE (fp.add RNE x11 x12) (fp.sub RNE x11 x8))) (fp.add RNE (fp.div RNE (fp.mul RNE x2 x6) (fp.div RNE x4 x2)) (fp.add RNE (fp.mul RNE x12 x2) (fp.add RNE x0 x5)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.add RNE x8 x7) (fp.sub RNE x7 x5)) (fp.div RNE (fp.neg x7) (fp.div RNE x10 x0))) (fp.mul RNE (fp.mul RNE (fp.div RNE x13 x12) (fp.mul RNE x7 x6)) (fp.neg (fp.sub RNE x10 x1)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.neg x12) (fp.neg x12)) (fp.mul RNE (fp.div RNE x0 x4) (fp.sub RNE x12 x5))) (fp.sub RNE (fp.mul RNE (fp.div RNE x5 x13) (fp.sub RNE x13 x12)) (fp.add RNE (fp.sub RNE x8 x2) (fp.div RNE x2 x13)))))
(check-sat)
