(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.mul RNE x8 x0) (fp.neg x12)) (fp.sub RNE (fp.add RNE x6 x11) (fp.sub RNE x5 x3))) (fp.sub RNE (fp.div RNE (fp.div RNE x17 x7) (fp.add RNE x8 x13)) (fp.add RNE (fp.mul RNE x18 x16) (fp.neg x4)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.mul RNE x11 x4) (fp.add RNE x16 x3)) (fp.div RNE (fp.neg x11) (fp.add RNE x15 x15))) (fp.neg (fp.neg (fp.sub RNE x3 x13)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.mul RNE x0 x12) (fp.div RNE x11 x13)) (fp.add RNE (fp.mul RNE x8 x13) (fp.mul RNE x11 x11))) (fp.add RNE (fp.neg (fp.mul RNE x6 x7)) (fp.div RNE (fp.div RNE x8 x13) (fp.neg x12)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.neg x14) (fp.div RNE x17 x1))) (fp.div RNE (fp.sub RNE (fp.mul RNE x15 x5) (fp.mul RNE x16 x11)) (fp.div RNE (fp.div RNE x7 x0) (fp.add RNE x13 x12)))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.mul RNE x5 x11) (fp.add RNE x14 x15))) (fp.neg (fp.mul RNE (fp.sub RNE x9 x14) (fp.add RNE x3 x7)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.add RNE x9 x18) (fp.sub RNE x4 x2)) (fp.add RNE (fp.neg x1) (fp.add RNE x2 x2))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x18 x17) (fp.div RNE x2 x13)) (fp.div RNE (fp.sub RNE x17 x1) (fp.mul RNE x4 x5)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.mul RNE x4 x10) (fp.sub RNE x6 x3)) (fp.sub RNE (fp.add RNE x4 x16) (fp.div RNE x17 x10))) (fp.sub RNE (fp.add RNE (fp.sub RNE x18 x9) (fp.add RNE x16 x2)) (fp.sub RNE (fp.add RNE x2 x9) (fp.div RNE x15 x5)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.neg x5) (fp.sub RNE x4 x6)) (fp.mul RNE (fp.neg x12) (fp.sub RNE x16 x18))) (fp.add RNE (fp.mul RNE (fp.mul RNE x9 x4) (fp.neg x5)) (fp.mul RNE (fp.add RNE x10 x17) (fp.sub RNE x3 x13)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.neg x17) (fp.mul RNE x1 x13)) (fp.mul RNE (fp.neg x10) (fp.div RNE x3 x8))) (fp.div RNE (fp.div RNE (fp.div RNE x10 x4) (fp.add RNE x13 x4)) (fp.add RNE (fp.sub RNE x0 x11) (fp.sub RNE x14 x3)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.add RNE x13 x3) (fp.mul RNE x14 x2)) (fp.add RNE (fp.div RNE x5 x10) (fp.sub RNE x7 x17))) (fp.add RNE (fp.add RNE (fp.neg x2) (fp.neg x5)) (fp.sub RNE (fp.add RNE x14 x12) (fp.add RNE x13 x1)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.neg x9)) (fp.sub RNE (fp.sub RNE x14 x11) (fp.neg x15))) (fp.sub RNE (fp.div RNE (fp.div RNE x6 x5) (fp.sub RNE x11 x15)) (fp.sub RNE (fp.add RNE x17 x8) (fp.div RNE x17 x2)))))
(check-sat)
