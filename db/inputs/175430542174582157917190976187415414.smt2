(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.div RNE (fp.mul RNE x10 x2) (fp.neg x4)) (fp.add RNE (fp.mul RNE x11 x10) (fp.mul RNE x4 x10))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x6 x6) (fp.add RNE x1 x6)) (fp.sub RNE (fp.mul RNE x0 x13) (fp.sub RNE x3 x11))))
(assert (fp.lt (fp.add RNE (fp.neg x0) (fp.sub RNE x7 x9)) (fp.sub RNE (fp.add RNE x12 x6) (fp.mul RNE x11 x7))))
(assert (fp.leq (fp.neg (fp.add RNE x11 x1)) (fp.sub RNE (fp.neg x12) (fp.div RNE x13 x3))))
(assert (fp.geq (fp.div RNE (fp.add RNE x5 x12) (fp.mul RNE x10 x10)) (fp.mul RNE (fp.add RNE x6 x5) (fp.div RNE x3 x10))))
(assert (fp.lt (fp.sub RNE (fp.neg x6) (fp.div RNE x4 x11)) (fp.div RNE (fp.neg x3) (fp.sub RNE x5 x8))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x3 x11) (fp.sub RNE x4 x3)) (fp.sub RNE (fp.sub RNE x5 x0) (fp.div RNE x11 x0))))
(assert (fp.eq (fp.add RNE (fp.div RNE x3 x8) (fp.mul RNE x7 x9)) (fp.add RNE (fp.div RNE x1 x13) (fp.sub RNE x13 x10))))
(assert (fp.lt (fp.mul RNE (fp.neg x7) (fp.add RNE x1 x9)) (fp.neg (fp.div RNE x13 x9))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x2 x13) (fp.neg x10)) (fp.sub RNE (fp.neg x4) (fp.neg x1))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x2 x6) (fp.neg x2)) (fp.mul RNE (fp.add RNE x1 x8) (fp.sub RNE x9 x8))))
(assert (fp.eq (fp.div RNE (fp.add RNE x13 x1) (fp.mul RNE x6 x13)) (fp.neg (fp.div RNE x10 x3))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x2 x4) (fp.div RNE x3 x13)) (fp.neg (fp.add RNE x5 x11))))
(assert (fp.geq (fp.add RNE (fp.add RNE x1 x8) (fp.neg x1)) (fp.sub RNE (fp.neg x8) (fp.neg x0))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x0 x12) (fp.neg x6)) (fp.neg (fp.neg x8))))
(assert (fp.gt (fp.sub RNE (fp.neg x11) (fp.add RNE x4 x1)) (fp.sub RNE (fp.neg x4) (fp.div RNE x3 x6))))
(check-sat)
