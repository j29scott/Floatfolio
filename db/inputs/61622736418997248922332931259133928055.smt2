(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(declare-const x26 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.add RNE x20 x6)) (fp.sub RNE (fp.mul RNE x1 x25) (fp.sub RNE x8 x5))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x10 x21) (fp.neg x3)) (fp.div RNE (fp.add RNE x4 x7) (fp.add RNE x25 x6))))
(assert (fp.gt (fp.div RNE (fp.add RNE x21 x19) (fp.sub RNE x7 x1)) (fp.mul RNE (fp.mul RNE x22 x25) (fp.div RNE x15 x3))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x16 x21) (fp.mul RNE x12 x7)) (fp.sub RNE (fp.mul RNE x1 x14) (fp.add RNE x6 x10))))
(assert (fp.eq (fp.div RNE (fp.add RNE x19 x5) (fp.mul RNE x22 x11)) (fp.neg (fp.neg x1))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x5 x20) (fp.neg x24)) (fp.neg (fp.add RNE x14 x20))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x19 x8) (fp.add RNE x7 x10)) (fp.sub RNE (fp.sub RNE x26 x26) (fp.neg x20))))
(assert (fp.gt (fp.neg (fp.sub RNE x19 x9)) (fp.sub RNE (fp.sub RNE x3 x13) (fp.add RNE x19 x21))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x21 x26) (fp.neg x5)) (fp.add RNE (fp.sub RNE x0 x15) (fp.neg x17))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x7 x20) (fp.add RNE x25 x25)) (fp.neg (fp.sub RNE x26 x5))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x10 x20) (fp.mul RNE x22 x24)) (fp.neg (fp.add RNE x23 x25))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x9 x10) (fp.mul RNE x16 x14)) (fp.mul RNE (fp.add RNE x18 x14) (fp.neg x9))))
(assert (fp.lt (fp.add RNE (fp.neg x19) (fp.div RNE x15 x4)) (fp.div RNE (fp.mul RNE x15 x10) (fp.div RNE x17 x2))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x15 x20) (fp.mul RNE x23 x7)) (fp.sub RNE (fp.neg x22) (fp.div RNE x10 x15))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x9 x12) (fp.div RNE x20 x8)) (fp.add RNE (fp.mul RNE x6 x12) (fp.div RNE x20 x25))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x8 x7) (fp.div RNE x23 x7)) (fp.div RNE (fp.sub RNE x26 x0) (fp.neg x15))))
(check-sat)
