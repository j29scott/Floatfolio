(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.mul RNE (fp.add RNE x1 x14) (fp.neg x14)) (fp.sub RNE (fp.sub RNE x5 x2) (fp.sub RNE x10 x17))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x1 x16) (fp.mul RNE x1 x9)) (fp.add RNE (fp.mul RNE x6 x17) (fp.div RNE x18 x9))))
(assert (fp.geq (fp.neg (fp.sub RNE x4 x8)) (fp.neg (fp.neg x14))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x8 x18) (fp.div RNE x16 x3)) (fp.div RNE (fp.add RNE x6 x17) (fp.div RNE x11 x10))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x18 x17) (fp.div RNE x2 x4)) (fp.neg (fp.neg x11))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x6 x13) (fp.neg x9)) (fp.add RNE (fp.neg x5) (fp.sub RNE x3 x11))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x10 x1) (fp.sub RNE x10 x6)) (fp.mul RNE (fp.div RNE x14 x8) (fp.mul RNE x13 x0))))
(assert (fp.geq (fp.add RNE (fp.neg x18) (fp.add RNE x15 x2)) (fp.div RNE (fp.sub RNE x8 x17) (fp.sub RNE x6 x1))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x9 x8) (fp.add RNE x15 x10)) (fp.add RNE (fp.sub RNE x1 x8) (fp.add RNE x3 x15))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x8 x5) (fp.mul RNE x11 x1)) (fp.add RNE (fp.add RNE x11 x2) (fp.add RNE x11 x2))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x1 x1) (fp.mul RNE x0 x6)) (fp.mul RNE (fp.neg x14) (fp.div RNE x14 x13))))
(assert (fp.eq (fp.sub RNE (fp.neg x16) (fp.add RNE x0 x15)) (fp.sub RNE (fp.sub RNE x8 x9) (fp.add RNE x10 x6))))
(assert (fp.eq (fp.add RNE (fp.add RNE x9 x15) (fp.sub RNE x6 x12)) (fp.add RNE (fp.div RNE x3 x6) (fp.neg x11))))
(check-sat)
