(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.add RNE x5 x22) (fp.mul RNE x5 x5)) (fp.div RNE (fp.add RNE x11 x8) (fp.div RNE x13 x20))))
(assert (fp.lt (fp.neg (fp.mul RNE x3 x18)) (fp.div RNE (fp.add RNE x18 x4) (fp.neg x12))))
(assert (fp.eq (fp.neg (fp.neg x21)) (fp.sub RNE (fp.add RNE x17 x13) (fp.neg x3))))
(assert (fp.leq (fp.add RNE (fp.div RNE x6 x18) (fp.div RNE x3 x22)) (fp.mul RNE (fp.mul RNE x5 x3) (fp.neg x5))))
(assert (fp.geq (fp.div RNE (fp.div RNE x13 x2) (fp.mul RNE x22 x17)) (fp.add RNE (fp.add RNE x7 x18) (fp.neg x21))))
(assert (fp.geq (fp.add RNE (fp.div RNE x21 x20) (fp.neg x13)) (fp.add RNE (fp.neg x19) (fp.neg x14))))
(assert (fp.leq (fp.div RNE (fp.div RNE x16 x21) (fp.neg x17)) (fp.sub RNE (fp.neg x8) (fp.neg x4))))
(assert (fp.leq (fp.neg (fp.mul RNE x16 x6)) (fp.neg (fp.div RNE x22 x16))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x16 x3) (fp.neg x1)) (fp.sub RNE (fp.mul RNE x5 x4) (fp.mul RNE x3 x15))))
(assert (fp.leq (fp.add RNE (fp.add RNE x19 x11) (fp.mul RNE x3 x0)) (fp.div RNE (fp.add RNE x21 x8) (fp.neg x0))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x20 x10) (fp.div RNE x12 x16)) (fp.mul RNE (fp.add RNE x5 x10) (fp.div RNE x22 x14))))
(check-sat)
