#!/usr/bin/env python3
from src.input import Input
import random
import json
import glob
import sys
import src.settings as settings
import pdb
import pylab as plt
import src.input
from src.portfolio.rand import Rand
from src.portfolio.svm_classify import SVM_Classify
from src.portfolio.svm_regression import SVM_Regression
from src.portfolio.linear_regression import Linear_Regression
from src.portfolio.logistic_regression import Logistic_Regression
from src.portfolio.oracle import Oracle
settings.timeout = 60
dir = sys.argv[1]
files = glob.glob(dir+"*")
inputs = []
n=100000
for f in files:
    file = open(f)
    lines = file.readlines()
    file.close()
    inputs.append(Input(lines))
    n -= 1
    if n == 0:
        break
    

split = 0.1
train_inputs = inputs[:round(split * len(inputs)) ]
test_inputs  = inputs[round(split*len(inputs))+1:]



plot_data = []
solvers = list(test_inputs[0].times.keys())
for solver in solvers:
    plot_data.append([[],solver])
    for i in range(len(test_inputs)):
        plot_data[-1][0].append(test_inputs[i].times[solver])


algorithms = [Rand,SVM_Classify,SVM_Regression,Linear_Regression,Logistic_Regression,Oracle]
for alg in algorithms:
    classifier = alg()
    classifier.train(train_inputs)
    predictions = classifier.predict(test_inputs)
    plot_data.append([[],classifier.__name__()])
    for i in range(len(test_inputs)):
        plot_data[-1][0].append(test_inputs[i].times[predictions[i]])


for i in range(len(plot_data)):
    plot_data[i][0].sort()
    while plot_data[i][0][-1] >= settings.timeout:
        plot_data[i][0].pop()
for i in range(len(plot_data)):
    plt.plot(plot_data[i][0],label=plot_data[i][1])

plt.legend()
plt.show()

#     train_features = []
#     train_labels = []
#     for inp in train_inputs:
#         train_features.append(inp.features)
#         train_labels.append(SolverLabels[inp.best_solver])
    
#     model = svm_train(train_labels,train_features, "-s 0 -t 2")
 
#     test_features = []
#     test_labels = []
#     for inp in test_inputs:
#         test_features.append(inp.features)
#         test_labels.append(SolverLabels[inp.best_solver])
    
#     predictions,[acc,mse,cor], oth = svm_predict(test_labels,test_features,model)

#     solv = ['z3','mathsat','cvc4','colibri']
#     data = [ [], [], [], [], [], [], []]
#     for i in range(len(test_inputs)):
#         data[0].append(test_inputs[i].times['z3'])
#         data[1].append(test_inputs[i].times['mathsat'])
#         data[2].append(test_inputs[i].times['cvc4'])
#         data[3].append(test_inputs[i].times['colibri'])
#         data[4].append(test_inputs[i].times[LabelsSolver[predictions[i]]])
#         data[5].append(test_inputs[i].times[random.choice(solv)])
#         data[6].append(test_inputs[i].times[test_inputs[i].best_solver])

    

#     for i in range(len(data)):
#         data[i].sort()
#         while data[i][-1] == 60:
#             data[i].pop()

#     plt.plot(data[0],label='z3')
#     plt.plot(data[1],label='mathsat')
#     plt.plot(data[2],label='cvc4')
#     plt.plot(data[3],label='colibri')
#     plt.plot(data[4],label='svm -- classifier')

#     plt.plot(data[5],label='rand')
#     plt.plot(data[6],label='optimal')
#     plt.legend()
#     plt.show()


# dir = sys.argv[1]
# parse_data(glob.glob(dir+"*"))