(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.neg (fp.add RNE (fp.neg (fp.add RNE x8 x15)) (fp.div RNE (fp.sub RNE x10 x19) (fp.mul RNE x19 x3)))) (fp.neg (fp.sub RNE (fp.div RNE (fp.div RNE x5 x19) (fp.sub RNE x18 x12)) (fp.add RNE (fp.sub RNE x14 x19) (fp.add RNE x19 x19))))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.div RNE (fp.mul RNE x2 x19) (fp.sub RNE x19 x18)) (fp.add RNE (fp.div RNE x6 x8) (fp.neg x5))) (fp.div RNE (fp.mul RNE (fp.add RNE x15 x18) (fp.add RNE x5 x16)) (fp.mul RNE (fp.div RNE x10 x4) (fp.neg x5)))) (fp.mul RNE (fp.div RNE (fp.add RNE (fp.add RNE x2 x11) (fp.neg x19)) (fp.add RNE (fp.add RNE x10 x4) (fp.neg x12))) (fp.div RNE (fp.neg (fp.mul RNE x14 x14)) (fp.sub RNE (fp.neg x7) (fp.div RNE x19 x16))))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.neg (fp.sub RNE x4 x18)) (fp.div RNE (fp.add RNE x15 x8) (fp.neg x12))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x14 x3) (fp.mul RNE x9 x7)) (fp.add RNE (fp.sub RNE x2 x3) (fp.mul RNE x9 x5)))) (fp.add RNE (fp.sub RNE (fp.div RNE (fp.neg x18) (fp.add RNE x17 x10)) (fp.mul RNE (fp.add RNE x0 x7) (fp.mul RNE x13 x14))) (fp.sub RNE (fp.add RNE (fp.add RNE x14 x7) (fp.neg x11)) (fp.mul RNE (fp.add RNE x6 x16) (fp.sub RNE x17 x13))))))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.neg (fp.div RNE x5 x10))) (fp.mul RNE (fp.div RNE (fp.sub RNE x4 x6) (fp.neg x5)) (fp.add RNE (fp.sub RNE x14 x7) (fp.neg x11)))) (fp.div RNE (fp.sub RNE (fp.neg (fp.sub RNE x4 x15)) (fp.div RNE (fp.sub RNE x10 x19) (fp.div RNE x0 x16))) (fp.sub RNE (fp.div RNE (fp.add RNE x1 x1) (fp.neg x7)) (fp.mul RNE (fp.div RNE x4 x15) (fp.neg x11))))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.add RNE (fp.mul RNE x3 x14) (fp.add RNE x18 x1))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x2 x5) (fp.mul RNE x12 x15)) (fp.sub RNE (fp.neg x19) (fp.add RNE x0 x2)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.mul RNE x10 x3) (fp.div RNE x11 x18)) (fp.add RNE (fp.sub RNE x6 x7) (fp.mul RNE x12 x2))) (fp.add RNE (fp.add RNE (fp.mul RNE x5 x2) (fp.neg x5)) (fp.mul RNE (fp.add RNE x7 x19) (fp.mul RNE x11 x15))))))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.div RNE x7 x12) (fp.div RNE x18 x3)) (fp.neg (fp.neg x7))) (fp.add RNE (fp.sub RNE (fp.add RNE x7 x13) (fp.sub RNE x6 x18)) (fp.neg (fp.add RNE x6 x8)))) (fp.neg (fp.sub RNE (fp.sub RNE (fp.div RNE x9 x19) (fp.neg x17)) (fp.add RNE (fp.sub RNE x8 x4) (fp.mul RNE x2 x14))))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.add RNE (fp.mul RNE x18 x6) (fp.sub RNE x12 x5)) (fp.add RNE (fp.add RNE x16 x14) (fp.add RNE x11 x4)))) (fp.div RNE (fp.neg (fp.mul RNE (fp.div RNE x2 x8) (fp.div RNE x5 x13))) (fp.div RNE (fp.div RNE (fp.div RNE x15 x14) (fp.add RNE x8 x11)) (fp.sub RNE (fp.add RNE x0 x9) (fp.sub RNE x2 x5))))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.mul RNE (fp.div RNE x18 x19) (fp.div RNE x8 x15)) (fp.neg (fp.add RNE x8 x11)))) (fp.sub RNE (fp.add RNE (fp.div RNE (fp.div RNE x15 x0) (fp.sub RNE x12 x16)) (fp.div RNE (fp.neg x10) (fp.add RNE x18 x1))) (fp.div RNE (fp.div RNE (fp.add RNE x8 x10) (fp.neg x8)) (fp.add RNE (fp.div RNE x2 x12) (fp.mul RNE x2 x12))))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.sub RNE (fp.add RNE x14 x7) (fp.sub RNE x18 x7)) (fp.mul RNE (fp.neg x14) (fp.sub RNE x17 x13))) (fp.add RNE (fp.add RNE (fp.div RNE x0 x2) (fp.mul RNE x9 x12)) (fp.add RNE (fp.sub RNE x14 x8) (fp.div RNE x15 x14)))) (fp.neg (fp.add RNE (fp.neg (fp.mul RNE x2 x8)) (fp.neg (fp.add RNE x2 x13))))))
(check-sat)
