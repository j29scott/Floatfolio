(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.sub RNE x10 x9) (fp.sub RNE x2 x3)) (fp.sub RNE (fp.sub RNE x7 x7) (fp.neg x6))) (fp.neg (fp.add RNE (fp.div RNE x1 x8) (fp.mul RNE x7 x16)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x6 x9) (fp.mul RNE x5 x11)) (fp.add RNE (fp.sub RNE x1 x14) (fp.add RNE x6 x14))) (fp.neg (fp.div RNE (fp.div RNE x14 x16) (fp.div RNE x4 x11)))))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.div RNE x11 x9) (fp.neg x8)) (fp.add RNE (fp.add RNE x6 x3) (fp.add RNE x13 x3))) (fp.mul RNE (fp.add RNE (fp.mul RNE x9 x13) (fp.div RNE x15 x6)) (fp.sub RNE (fp.sub RNE x3 x6) (fp.sub RNE x0 x9)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.mul RNE x11 x10) (fp.neg x7)) (fp.add RNE (fp.sub RNE x10 x12) (fp.neg x4))) (fp.add RNE (fp.neg (fp.neg x7)) (fp.sub RNE (fp.mul RNE x1 x14) (fp.sub RNE x6 x9)))))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.neg x12) (fp.add RNE x11 x15)) (fp.sub RNE (fp.mul RNE x8 x0) (fp.neg x15))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x5 x5) (fp.sub RNE x8 x3)) (fp.mul RNE (fp.neg x15) (fp.mul RNE x13 x8)))))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.mul RNE x5 x1) (fp.div RNE x9 x3)) (fp.neg (fp.neg x13))) (fp.sub RNE (fp.sub RNE (fp.add RNE x6 x7) (fp.sub RNE x9 x4)) (fp.neg (fp.sub RNE x11 x2)))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.div RNE x12 x9) (fp.neg x3)) (fp.mul RNE (fp.neg x10) (fp.sub RNE x3 x9))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x8 x9) (fp.add RNE x4 x4)) (fp.neg (fp.mul RNE x6 x9)))))
(assert (fp.gt (fp.sub RNE (fp.add RNE (fp.sub RNE x4 x5) (fp.neg x7)) (fp.div RNE (fp.add RNE x3 x13) (fp.add RNE x10 x15))) (fp.mul RNE (fp.neg (fp.mul RNE x8 x9)) (fp.neg (fp.mul RNE x3 x11)))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.div RNE x0 x11) (fp.neg x1)) (fp.sub RNE (fp.neg x4) (fp.add RNE x8 x0))) (fp.div RNE (fp.mul RNE (fp.sub RNE x5 x7) (fp.div RNE x16 x11)) (fp.mul RNE (fp.div RNE x4 x8) (fp.sub RNE x1 x2)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.div RNE x7 x6) (fp.add RNE x11 x15)) (fp.sub RNE (fp.add RNE x10 x2) (fp.neg x7))) (fp.sub RNE (fp.div RNE (fp.add RNE x14 x2) (fp.add RNE x7 x15)) (fp.sub RNE (fp.div RNE x0 x16) (fp.sub RNE x14 x3)))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE (fp.add RNE x8 x12) (fp.sub RNE x12 x12)) (fp.mul RNE (fp.sub RNE x4 x6) (fp.sub RNE x4 x5))) (fp.sub RNE (fp.sub RNE (fp.neg x10) (fp.mul RNE x3 x4)) (fp.neg (fp.mul RNE x12 x13)))))
(check-sat)
