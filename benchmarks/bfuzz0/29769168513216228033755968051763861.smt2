(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.neg (fp.neg (fp.neg (fp.sub RNE x22 x3)))) (fp.mul RNE (fp.neg (fp.sub RNE (fp.add RNE x22 x3) (fp.neg x20))) (fp.mul RNE (fp.add RNE (fp.sub RNE x7 x9) (fp.neg x3)) (fp.sub RNE (fp.sub RNE x5 x1) (fp.neg x15))))))
(assert (fp.geq (fp.neg (fp.neg (fp.div RNE (fp.add RNE x20 x17) (fp.add RNE x3 x15)))) (fp.sub RNE (fp.add RNE (fp.div RNE (fp.div RNE x20 x5) (fp.add RNE x19 x23)) (fp.mul RNE (fp.neg x4) (fp.neg x8))) (fp.neg (fp.div RNE (fp.sub RNE x17 x10) (fp.sub RNE x20 x11))))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.div RNE x8 x23) (fp.sub RNE x15 x13)) (fp.neg (fp.neg x19))) (fp.sub RNE (fp.mul RNE (fp.add RNE x3 x3) (fp.neg x22)) (fp.neg (fp.add RNE x12 x22)))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.div RNE x2 x4) (fp.neg x17)) (fp.mul RNE (fp.mul RNE x10 x1) (fp.mul RNE x25 x14))) (fp.neg (fp.neg (fp.neg x8))))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.div RNE (fp.neg x24) (fp.div RNE x15 x9)) (fp.neg (fp.add RNE x12 x14))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x18 x19) (fp.neg x22)) (fp.mul RNE (fp.mul RNE x17 x5) (fp.mul RNE x18 x5)))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE x7 x8) (fp.sub RNE x12 x12)) (fp.add RNE (fp.add RNE x5 x24) (fp.sub RNE x14 x3))) (fp.sub RNE (fp.sub RNE (fp.neg x0) (fp.sub RNE x22 x3)) (fp.mul RNE (fp.div RNE x25 x17) (fp.mul RNE x10 x20))))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.neg (fp.add RNE x25 x23)) (fp.mul RNE (fp.sub RNE x4 x24) (fp.div RNE x8 x15))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x18 x7) (fp.add RNE x6 x9)) (fp.neg (fp.mul RNE x1 x14)))) (fp.add RNE (fp.div RNE (fp.div RNE (fp.add RNE x20 x5) (fp.mul RNE x7 x2)) (fp.neg (fp.neg x20))) (fp.mul RNE (fp.add RNE (fp.div RNE x17 x18) (fp.add RNE x8 x21)) (fp.neg (fp.mul RNE x0 x9))))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE x15 x24) (fp.div RNE x9 x14)) (fp.neg (fp.mul RNE x19 x1))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x0 x24) (fp.add RNE x4 x23)) (fp.div RNE (fp.neg x14) (fp.mul RNE x11 x7)))) (fp.add RNE (fp.neg (fp.neg (fp.mul RNE x16 x10))) (fp.mul RNE (fp.neg (fp.neg x14)) (fp.neg (fp.add RNE x8 x20))))))
(assert (fp.eq (fp.neg (fp.neg (fp.mul RNE (fp.sub RNE x15 x0) (fp.neg x5)))) (fp.sub RNE (fp.div RNE (fp.add RNE (fp.mul RNE x7 x16) (fp.sub RNE x4 x21)) (fp.mul RNE (fp.div RNE x8 x16) (fp.sub RNE x10 x7))) (fp.div RNE (fp.div RNE (fp.neg x5) (fp.add RNE x20 x21)) (fp.mul RNE (fp.div RNE x22 x0) (fp.div RNE x12 x12))))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.sub RNE (fp.mul RNE x17 x21) (fp.add RNE x4 x11)) (fp.neg (fp.mul RNE x2 x15)))) (fp.neg (fp.div RNE (fp.neg (fp.mul RNE x15 x10)) (fp.mul RNE (fp.mul RNE x22 x18) (fp.sub RNE x10 x2))))))
(check-sat)
