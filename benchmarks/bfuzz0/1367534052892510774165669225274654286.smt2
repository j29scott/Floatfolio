(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x8 x2) (fp.mul RNE x8 x3)) (fp.div RNE (fp.neg x6) (fp.add RNE x1 x0))))
(assert (fp.lt (fp.neg (fp.sub RNE x6 x0)) (fp.mul RNE (fp.mul RNE x0 x7) (fp.div RNE x4 x4))))
(assert (fp.leq (fp.mul RNE (fp.neg x3) (fp.div RNE x7 x1)) (fp.div RNE (fp.neg x4) (fp.div RNE x5 x7))))
(assert (fp.geq (fp.neg (fp.div RNE x5 x5)) (fp.neg (fp.neg x4))))
(assert (fp.gt (fp.neg (fp.mul RNE x6 x7)) (fp.mul RNE (fp.sub RNE x4 x1) (fp.add RNE x6 x3))))
(assert (fp.leq (fp.add RNE (fp.div RNE x0 x1) (fp.div RNE x1 x6)) (fp.div RNE (fp.add RNE x0 x2) (fp.add RNE x2 x4))))
(assert (fp.leq (fp.neg (fp.add RNE x3 x0)) (fp.mul RNE (fp.div RNE x4 x4) (fp.div RNE x3 x7))))
(assert (fp.leq (fp.sub RNE (fp.neg x2) (fp.neg x6)) (fp.mul RNE (fp.mul RNE x0 x6) (fp.neg x0))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x5 x2) (fp.add RNE x5 x6)) (fp.div RNE (fp.div RNE x0 x8) (fp.add RNE x7 x4))))
(assert (fp.lt (fp.div RNE (fp.div RNE x7 x0) (fp.mul RNE x3 x6)) (fp.neg (fp.div RNE x2 x1))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x3 x0) (fp.neg x4)) (fp.div RNE (fp.sub RNE x3 x5) (fp.add RNE x3 x5))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x3 x8) (fp.div RNE x2 x8)) (fp.add RNE (fp.sub RNE x1 x1) (fp.sub RNE x3 x0))))
(assert (fp.eq (fp.div RNE (fp.add RNE x3 x5) (fp.mul RNE x3 x1)) (fp.add RNE (fp.div RNE x1 x8) (fp.div RNE x7 x6))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x1 x3) (fp.div RNE x1 x8)) (fp.sub RNE (fp.neg x1) (fp.add RNE x6 x6))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x2 x7) (fp.div RNE x4 x3)) (fp.neg (fp.sub RNE x5 x4))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x2 x5) (fp.div RNE x3 x0)) (fp.div RNE (fp.div RNE x0 x6) (fp.neg x4))))
(check-sat)
