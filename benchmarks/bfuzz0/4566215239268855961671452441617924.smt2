(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE x20 x9) (fp.neg x3)))
(assert (fp.eq (fp.sub RNE x0 x21) (fp.sub RNE x20 x21)))
(assert (fp.eq (fp.add RNE x10 x13) (fp.neg x24)))
(assert (fp.lt (fp.sub RNE x10 x19) (fp.sub RNE x14 x15)))
(assert (fp.lt (fp.neg x1) (fp.add RNE x3 x10)))
(assert (fp.lt (fp.sub RNE x24 x20) (fp.sub RNE x4 x24)))
(assert (fp.eq (fp.sub RNE x11 x20) (fp.div RNE x2 x22)))
(assert (fp.lt (fp.div RNE x4 x17) (fp.neg x2)))
(assert (fp.gt (fp.div RNE x21 x20) (fp.add RNE x10 x5)))
(assert (fp.eq (fp.add RNE x22 x24) (fp.add RNE x11 x12)))
(assert (fp.eq (fp.mul RNE x0 x12) (fp.mul RNE x9 x14)))
(assert (fp.eq (fp.div RNE x0 x8) (fp.div RNE x23 x23)))
(assert (fp.leq (fp.mul RNE x25 x25) (fp.mul RNE x0 x25)))
(assert (fp.geq (fp.add RNE x12 x5) (fp.sub RNE x14 x23)))
(assert (fp.lt (fp.add RNE x21 x16) (fp.sub RNE x17 x16)))
(assert (fp.geq (fp.div RNE x8 x19) (fp.sub RNE x10 x18)))
(assert (fp.eq (fp.sub RNE x8 x23) (fp.add RNE x13 x4)))
(assert (fp.eq (fp.sub RNE x13 x11) (fp.div RNE x23 x25)))
(check-sat)
