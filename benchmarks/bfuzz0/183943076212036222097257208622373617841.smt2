(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.div RNE x9 x22) (fp.div RNE x5 x22)) (fp.mul RNE (fp.neg x1) (fp.div RNE x15 x12))) (fp.mul RNE (fp.mul RNE (fp.div RNE x24 x10) (fp.mul RNE x5 x23)) (fp.mul RNE (fp.mul RNE x17 x5) (fp.neg x20)))))
(assert (fp.geq (fp.neg (fp.add RNE (fp.add RNE x17 x14) (fp.sub RNE x22 x10))) (fp.neg (fp.neg (fp.neg x7)))))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.mul RNE x2 x18) (fp.sub RNE x12 x4)) (fp.div RNE (fp.sub RNE x13 x10) (fp.sub RNE x0 x14))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x15 x19) (fp.div RNE x9 x14)) (fp.div RNE (fp.sub RNE x10 x14) (fp.neg x6)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.div RNE x1 x18)) (fp.add RNE (fp.div RNE x21 x1) (fp.add RNE x17 x6))) (fp.mul RNE (fp.mul RNE (fp.div RNE x19 x6) (fp.neg x12)) (fp.mul RNE (fp.sub RNE x14 x21) (fp.add RNE x5 x2)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.add RNE x19 x19)) (fp.neg (fp.div RNE x4 x11))) (fp.add RNE (fp.neg (fp.mul RNE x6 x6)) (fp.sub RNE (fp.add RNE x2 x8) (fp.add RNE x5 x9)))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.neg x6) (fp.neg x7))) (fp.mul RNE (fp.div RNE (fp.add RNE x3 x4) (fp.add RNE x16 x0)) (fp.div RNE (fp.mul RNE x18 x10) (fp.sub RNE x7 x3)))))
(check-sat)
