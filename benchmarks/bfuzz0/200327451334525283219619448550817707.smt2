(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.sub RNE (fp.neg (fp.div RNE x10 x14)) (fp.mul RNE (fp.mul RNE x7 x19) (fp.sub RNE x5 x0))) (fp.neg (fp.add RNE (fp.add RNE x5 x19) (fp.neg x10)))))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.mul RNE x6 x8) (fp.sub RNE x1 x15)) (fp.add RNE (fp.div RNE x10 x19) (fp.neg x0))) (fp.div RNE (fp.div RNE (fp.neg x7) (fp.add RNE x14 x7)) (fp.mul RNE (fp.div RNE x10 x4) (fp.div RNE x0 x15)))))
(assert (fp.eq (fp.neg (fp.neg (fp.sub RNE x1 x15))) (fp.sub RNE (fp.add RNE (fp.neg x8) (fp.add RNE x19 x10)) (fp.sub RNE (fp.mul RNE x8 x0) (fp.div RNE x12 x16)))))
(assert (fp.eq (fp.neg (fp.neg (fp.div RNE x13 x19))) (fp.div RNE (fp.div RNE (fp.mul RNE x20 x10) (fp.mul RNE x15 x15)) (fp.mul RNE (fp.sub RNE x19 x12) (fp.sub RNE x17 x3)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.mul RNE x7 x18) (fp.add RNE x4 x6)) (fp.neg (fp.mul RNE x7 x5))) (fp.neg (fp.add RNE (fp.neg x4) (fp.sub RNE x15 x17)))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.mul RNE x17 x17)) (fp.neg (fp.add RNE x2 x7))) (fp.mul RNE (fp.add RNE (fp.add RNE x3 x4) (fp.add RNE x2 x19)) (fp.div RNE (fp.sub RNE x8 x12) (fp.sub RNE x2 x19)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.div RNE x1 x8) (fp.sub RNE x18 x10)) (fp.div RNE (fp.neg x6) (fp.mul RNE x1 x1))) (fp.neg (fp.neg (fp.mul RNE x12 x5)))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.div RNE x7 x19) (fp.mul RNE x20 x16)) (fp.add RNE (fp.mul RNE x9 x12) (fp.div RNE x10 x9))) (fp.add RNE (fp.neg (fp.neg x1)) (fp.mul RNE (fp.div RNE x9 x19) (fp.mul RNE x9 x4)))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.add RNE x7 x11) (fp.sub RNE x14 x11)) (fp.neg (fp.sub RNE x19 x20))) (fp.add RNE (fp.sub RNE (fp.sub RNE x15 x7) (fp.div RNE x7 x17)) (fp.neg (fp.div RNE x1 x2)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.sub RNE x3 x8) (fp.neg x5))) (fp.add RNE (fp.add RNE (fp.sub RNE x10 x14) (fp.mul RNE x19 x11)) (fp.add RNE (fp.add RNE x1 x13) (fp.neg x5)))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.neg x13) (fp.mul RNE x7 x3)) (fp.mul RNE (fp.mul RNE x5 x4) (fp.add RNE x2 x19))) (fp.neg (fp.add RNE (fp.div RNE x5 x7) (fp.div RNE x6 x14)))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.mul RNE x6 x20) (fp.neg x18)) (fp.div RNE (fp.mul RNE x0 x13) (fp.mul RNE x1 x4))) (fp.mul RNE (fp.div RNE (fp.sub RNE x6 x10) (fp.sub RNE x10 x16)) (fp.mul RNE (fp.neg x16) (fp.div RNE x5 x2)))))
(check-sat)
