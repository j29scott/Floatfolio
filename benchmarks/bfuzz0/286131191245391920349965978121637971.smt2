(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.div RNE x11 x6)) (fp.mul RNE (fp.add RNE x1 x3) (fp.div RNE x6 x5))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x7 x7) (fp.mul RNE x8 x11)) (fp.add RNE (fp.sub RNE x13 x2) (fp.sub RNE x7 x0))))
(assert (fp.leq (fp.div RNE (fp.add RNE x11 x4) (fp.mul RNE x5 x3)) (fp.neg (fp.add RNE x11 x5))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x6 x10) (fp.mul RNE x9 x4)) (fp.add RNE (fp.sub RNE x10 x10) (fp.mul RNE x8 x9))))
(assert (fp.gt (fp.add RNE (fp.div RNE x14 x13) (fp.neg x12)) (fp.mul RNE (fp.sub RNE x9 x2) (fp.div RNE x11 x7))))
(assert (fp.leq (fp.neg (fp.neg x3)) (fp.div RNE (fp.mul RNE x0 x8) (fp.add RNE x11 x13))))
(assert (fp.geq (fp.neg (fp.mul RNE x9 x5)) (fp.add RNE (fp.mul RNE x13 x2) (fp.mul RNE x1 x7))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x5 x8) (fp.add RNE x13 x6)) (fp.div RNE (fp.add RNE x10 x1) (fp.div RNE x5 x4))))
(assert (fp.leq (fp.sub RNE (fp.neg x5) (fp.add RNE x4 x8)) (fp.neg (fp.sub RNE x10 x14))))
(assert (fp.gt (fp.neg (fp.mul RNE x11 x0)) (fp.sub RNE (fp.mul RNE x2 x12) (fp.add RNE x10 x9))))
(assert (fp.eq (fp.sub RNE (fp.neg x2) (fp.neg x9)) (fp.div RNE (fp.add RNE x8 x0) (fp.neg x0))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x12 x2) (fp.mul RNE x6 x13)) (fp.mul RNE (fp.neg x8) (fp.div RNE x5 x12))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x5 x14) (fp.add RNE x0 x6)) (fp.mul RNE (fp.div RNE x14 x3) (fp.div RNE x0 x14))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x8 x10) (fp.mul RNE x0 x8)) (fp.add RNE (fp.div RNE x9 x1) (fp.mul RNE x11 x2))))
(assert (fp.gt (fp.div RNE (fp.neg x14) (fp.add RNE x11 x11)) (fp.add RNE (fp.add RNE x6 x11) (fp.div RNE x6 x8))))
(check-sat)
