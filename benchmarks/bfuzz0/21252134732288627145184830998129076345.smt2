(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.add RNE x5 x3) (fp.div RNE x12 x1)) (fp.mul RNE (fp.mul RNE x1 x5) (fp.neg x19))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x4 x3) (fp.mul RNE x13 x0)) (fp.neg (fp.neg x10))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x1 x15) (fp.sub RNE x5 x12)) (fp.neg (fp.div RNE x14 x21))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x11 x12) (fp.neg x20)) (fp.div RNE (fp.neg x13) (fp.add RNE x8 x20))))
(assert (fp.eq (fp.neg (fp.add RNE x1 x19)) (fp.neg (fp.sub RNE x13 x6))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x4 x9) (fp.neg x19)) (fp.div RNE (fp.sub RNE x1 x16) (fp.div RNE x0 x7))))
(assert (fp.leq (fp.neg (fp.add RNE x4 x4)) (fp.div RNE (fp.add RNE x6 x1) (fp.neg x20))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x1 x11) (fp.add RNE x7 x5)) (fp.sub RNE (fp.add RNE x17 x20) (fp.sub RNE x3 x21))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x18 x11) (fp.sub RNE x1 x0)) (fp.div RNE (fp.div RNE x2 x8) (fp.mul RNE x18 x15))))
(assert (fp.geq (fp.add RNE (fp.div RNE x10 x11) (fp.div RNE x3 x10)) (fp.neg (fp.neg x18))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x1 x20) (fp.sub RNE x20 x18)) (fp.add RNE (fp.div RNE x17 x5) (fp.neg x15))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x20 x9) (fp.mul RNE x18 x12)) (fp.sub RNE (fp.mul RNE x0 x17) (fp.sub RNE x3 x19))))
(assert (fp.lt (fp.sub RNE (fp.neg x20) (fp.neg x18)) (fp.neg (fp.add RNE x20 x0))))
(check-sat)
