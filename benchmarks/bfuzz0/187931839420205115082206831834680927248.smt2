(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.sub RNE (fp.neg x1) (fp.neg x26)) (fp.div RNE (fp.sub RNE x8 x24) (fp.neg x1))))
(assert (fp.leq (fp.neg (fp.div RNE x25 x0)) (fp.sub RNE (fp.neg x3) (fp.div RNE x8 x6))))
(assert (fp.eq (fp.neg (fp.sub RNE x4 x11)) (fp.mul RNE (fp.add RNE x7 x10) (fp.neg x11))))
(assert (fp.eq (fp.add RNE (fp.div RNE x10 x24) (fp.neg x14)) (fp.div RNE (fp.add RNE x1 x20) (fp.sub RNE x18 x10))))
(assert (fp.eq (fp.add RNE (fp.div RNE x11 x25) (fp.add RNE x3 x10)) (fp.mul RNE (fp.div RNE x18 x15) (fp.div RNE x14 x24))))
(assert (fp.geq (fp.mul RNE (fp.neg x16) (fp.mul RNE x11 x0)) (fp.neg (fp.mul RNE x16 x2))))
(assert (fp.gt (fp.sub RNE (fp.neg x16) (fp.sub RNE x13 x16)) (fp.sub RNE (fp.add RNE x3 x21) (fp.mul RNE x24 x17))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x24 x26) (fp.div RNE x18 x16)) (fp.div RNE (fp.div RNE x7 x17) (fp.neg x20))))
(assert (fp.leq (fp.div RNE (fp.add RNE x20 x15) (fp.neg x14)) (fp.neg (fp.sub RNE x22 x1))))
(assert (fp.eq (fp.mul RNE (fp.neg x0) (fp.neg x12)) (fp.mul RNE (fp.div RNE x12 x22) (fp.neg x8))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x7 x23) (fp.neg x1)) (fp.sub RNE (fp.add RNE x25 x23) (fp.neg x18))))
(assert (fp.geq (fp.add RNE (fp.neg x25) (fp.neg x20)) (fp.add RNE (fp.neg x15) (fp.div RNE x6 x0))))
(check-sat)
