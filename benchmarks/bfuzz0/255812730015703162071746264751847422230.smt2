(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(declare-const x27 (_ FloatingPoint 11 53))
(declare-const x28 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.add RNE (fp.add RNE x22 x24) (fp.neg x1)) (fp.mul RNE (fp.add RNE x3 x22) (fp.neg x8))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x3 x18) (fp.neg x20)) (fp.add RNE (fp.sub RNE x2 x27) (fp.neg x17))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x27 x27) (fp.sub RNE x6 x4)) (fp.neg (fp.add RNE x4 x28))))
(assert (fp.gt (fp.sub RNE (fp.neg x11) (fp.mul RNE x21 x15)) (fp.sub RNE (fp.add RNE x12 x3) (fp.sub RNE x18 x0))))
(assert (fp.eq (fp.sub RNE (fp.neg x15) (fp.neg x10)) (fp.mul RNE (fp.add RNE x3 x24) (fp.add RNE x26 x20))))
(assert (fp.leq (fp.div RNE (fp.add RNE x20 x8) (fp.neg x3)) (fp.sub RNE (fp.div RNE x2 x21) (fp.div RNE x28 x9))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x13 x20) (fp.neg x19)) (fp.div RNE (fp.sub RNE x25 x15) (fp.add RNE x15 x25))))
(assert (fp.leq (fp.sub RNE (fp.neg x28) (fp.div RNE x27 x4)) (fp.neg (fp.mul RNE x2 x2))))
(assert (fp.eq (fp.div RNE (fp.div RNE x25 x1) (fp.sub RNE x28 x19)) (fp.div RNE (fp.sub RNE x18 x25) (fp.add RNE x28 x10))))
(check-sat)
