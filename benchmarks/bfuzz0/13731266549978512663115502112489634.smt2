(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.add RNE (fp.neg x20) (fp.sub RNE x4 x5)) (fp.mul RNE (fp.div RNE x14 x9) (fp.div RNE x0 x19))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x20 x7) (fp.neg x2)) (fp.div RNE (fp.neg x1) (fp.sub RNE x16 x10))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x16 x0) (fp.add RNE x10 x11)) (fp.neg (fp.mul RNE x19 x10))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x17 x20) (fp.add RNE x14 x15)) (fp.add RNE (fp.div RNE x16 x2) (fp.add RNE x11 x8))))
(assert (fp.eq (fp.div RNE (fp.add RNE x12 x12) (fp.div RNE x9 x5)) (fp.div RNE (fp.add RNE x0 x20) (fp.mul RNE x0 x14))))
(assert (fp.gt (fp.sub RNE (fp.neg x9) (fp.sub RNE x10 x8)) (fp.div RNE (fp.mul RNE x9 x19) (fp.neg x12))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x8 x10) (fp.mul RNE x13 x15)) (fp.neg (fp.mul RNE x6 x17))))
(assert (fp.lt (fp.add RNE (fp.add RNE x3 x12) (fp.add RNE x17 x13)) (fp.sub RNE (fp.div RNE x5 x0) (fp.add RNE x13 x13))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x13 x9) (fp.add RNE x13 x17)) (fp.add RNE (fp.div RNE x3 x12) (fp.add RNE x15 x0))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x0 x16) (fp.add RNE x1 x8)) (fp.div RNE (fp.add RNE x10 x17) (fp.neg x13))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x14 x1) (fp.div RNE x2 x20)) (fp.neg (fp.mul RNE x12 x12))))
(assert (fp.lt (fp.add RNE (fp.neg x9) (fp.div RNE x0 x17)) (fp.div RNE (fp.sub RNE x11 x3) (fp.sub RNE x13 x9))))
(assert (fp.eq (fp.div RNE (fp.add RNE x8 x12) (fp.add RNE x18 x7)) (fp.div RNE (fp.neg x17) (fp.neg x0))))
(assert (fp.geq (fp.neg (fp.sub RNE x16 x1)) (fp.neg (fp.div RNE x20 x1))))
(check-sat)
