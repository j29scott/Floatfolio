(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.add RNE (fp.add RNE x11 x2) (fp.sub RNE x8 x11)) (fp.add RNE (fp.div RNE x9 x0) (fp.mul RNE x0 x0))))
(assert (fp.leq (fp.add RNE (fp.neg x13) (fp.add RNE x3 x4)) (fp.add RNE (fp.neg x11) (fp.neg x11))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x9 x4) (fp.mul RNE x8 x9)) (fp.div RNE (fp.add RNE x6 x0) (fp.add RNE x13 x10))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x5 x9) (fp.add RNE x13 x5)) (fp.neg (fp.mul RNE x6 x7))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x0 x0) (fp.div RNE x7 x11)) (fp.add RNE (fp.sub RNE x2 x10) (fp.sub RNE x0 x7))))
(assert (fp.leq (fp.mul RNE (fp.neg x0) (fp.neg x0)) (fp.sub RNE (fp.sub RNE x5 x7) (fp.div RNE x13 x0))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x11 x2) (fp.neg x7)) (fp.add RNE (fp.neg x1) (fp.div RNE x7 x8))))
(assert (fp.gt (fp.add RNE (fp.neg x0) (fp.sub RNE x6 x5)) (fp.neg (fp.sub RNE x5 x2))))
(assert (fp.gt (fp.neg (fp.mul RNE x6 x0)) (fp.neg (fp.div RNE x8 x3))))
(assert (fp.geq (fp.sub RNE (fp.neg x11) (fp.add RNE x11 x11)) (fp.sub RNE (fp.div RNE x1 x10) (fp.add RNE x2 x2))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x4 x6) (fp.div RNE x1 x2)) (fp.sub RNE (fp.sub RNE x13 x10) (fp.sub RNE x13 x13))))
(assert (fp.lt (fp.div RNE (fp.div RNE x2 x0) (fp.div RNE x4 x1)) (fp.add RNE (fp.mul RNE x12 x9) (fp.add RNE x5 x5))))
(assert (fp.lt (fp.add RNE (fp.add RNE x13 x5) (fp.neg x2)) (fp.sub RNE (fp.mul RNE x13 x9) (fp.neg x7))))
(assert (fp.leq (fp.div RNE (fp.add RNE x2 x9) (fp.neg x6)) (fp.sub RNE (fp.div RNE x6 x9) (fp.mul RNE x8 x2))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x8 x4) (fp.add RNE x6 x5)) (fp.neg (fp.sub RNE x1 x10))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x6 x3) (fp.neg x2)) (fp.mul RNE (fp.neg x6) (fp.add RNE x3 x4))))
(assert (fp.gt (fp.neg (fp.add RNE x13 x13)) (fp.sub RNE (fp.neg x11) (fp.sub RNE x13 x3))))
(assert (fp.gt (fp.div RNE (fp.add RNE x6 x2) (fp.sub RNE x1 x7)) (fp.neg (fp.add RNE x4 x3))))
(assert (fp.geq (fp.neg (fp.sub RNE x13 x4)) (fp.add RNE (fp.sub RNE x4 x6) (fp.add RNE x3 x0))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x11 x0) (fp.add RNE x10 x13)) (fp.div RNE (fp.sub RNE x6 x12) (fp.mul RNE x9 x8))))
(check-sat)
