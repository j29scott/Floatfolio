(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.sub RNE x11 x20) (fp.neg x16)) (fp.add RNE (fp.neg x13) (fp.div RNE x10 x15))) (fp.div RNE (fp.sub RNE (fp.neg x16) (fp.mul RNE x11 x1)) (fp.mul RNE (fp.neg x13) (fp.sub RNE x17 x19)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.sub RNE x10 x23) (fp.add RNE x21 x13)) (fp.add RNE (fp.mul RNE x5 x2) (fp.mul RNE x4 x13))) (fp.add RNE (fp.neg (fp.mul RNE x12 x10)) (fp.add RNE (fp.div RNE x16 x18) (fp.mul RNE x7 x21)))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE (fp.div RNE x4 x2) (fp.sub RNE x4 x9)) (fp.sub RNE (fp.neg x20) (fp.neg x2))) (fp.neg (fp.neg (fp.add RNE x8 x9)))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.div RNE x0 x4) (fp.mul RNE x9 x20))) (fp.add RNE (fp.mul RNE (fp.div RNE x7 x19) (fp.neg x11)) (fp.mul RNE (fp.div RNE x21 x20) (fp.div RNE x23 x16)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.sub RNE x17 x3) (fp.sub RNE x20 x3)) (fp.add RNE (fp.add RNE x19 x7) (fp.neg x4))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x12 x22) (fp.div RNE x23 x12)) (fp.neg (fp.mul RNE x7 x1)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.sub RNE x8 x0) (fp.neg x6)) (fp.neg (fp.neg x21))) (fp.div RNE (fp.mul RNE (fp.mul RNE x1 x15) (fp.neg x20)) (fp.neg (fp.add RNE x14 x15)))))
(assert (fp.leq (fp.neg (fp.neg (fp.neg x5))) (fp.div RNE (fp.div RNE (fp.sub RNE x2 x10) (fp.div RNE x7 x10)) (fp.add RNE (fp.div RNE x20 x23) (fp.sub RNE x12 x5)))))
(check-sat)
