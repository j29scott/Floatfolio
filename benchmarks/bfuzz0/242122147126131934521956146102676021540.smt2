(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.sub RNE x3 x14) (fp.add RNE x7 x7)) (fp.add RNE (fp.mul RNE x14 x4) (fp.neg x15))) (fp.add RNE (fp.add RNE (fp.add RNE x13 x4) (fp.div RNE x13 x13)) (fp.add RNE (fp.neg x6) (fp.add RNE x3 x9)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.add RNE x2 x0) (fp.mul RNE x13 x2)) (fp.mul RNE (fp.add RNE x8 x14) (fp.add RNE x14 x1))) (fp.sub RNE (fp.neg (fp.neg x11)) (fp.sub RNE (fp.div RNE x2 x13) (fp.add RNE x8 x3)))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.neg x6) (fp.div RNE x14 x4)) (fp.add RNE (fp.sub RNE x7 x6) (fp.div RNE x11 x16))) (fp.sub RNE (fp.add RNE (fp.sub RNE x7 x5) (fp.sub RNE x1 x14)) (fp.mul RNE (fp.add RNE x12 x15) (fp.mul RNE x9 x11)))))
(assert (fp.gt (fp.neg (fp.sub RNE (fp.sub RNE x8 x9) (fp.add RNE x1 x5))) (fp.mul RNE (fp.neg (fp.mul RNE x4 x14)) (fp.div RNE (fp.div RNE x11 x14) (fp.neg x12)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.add RNE x8 x14)) (fp.neg (fp.div RNE x9 x12))) (fp.div RNE (fp.sub RNE (fp.div RNE x5 x16) (fp.neg x13)) (fp.add RNE (fp.mul RNE x1 x4) (fp.mul RNE x7 x2)))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.div RNE x7 x10) (fp.mul RNE x0 x9)) (fp.neg (fp.sub RNE x16 x1))) (fp.mul RNE (fp.div RNE (fp.neg x5) (fp.neg x15)) (fp.add RNE (fp.mul RNE x4 x3) (fp.neg x15)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.add RNE x6 x5) (fp.div RNE x5 x1)) (fp.div RNE (fp.div RNE x9 x1) (fp.div RNE x8 x3))) (fp.div RNE (fp.neg (fp.mul RNE x4 x2)) (fp.sub RNE (fp.div RNE x16 x0) (fp.sub RNE x6 x9)))))
(assert (fp.leq (fp.add RNE (fp.sub RNE (fp.neg x9) (fp.sub RNE x1 x6)) (fp.mul RNE (fp.sub RNE x15 x12) (fp.sub RNE x1 x15))) (fp.mul RNE (fp.mul RNE (fp.sub RNE x2 x14) (fp.sub RNE x7 x4)) (fp.add RNE (fp.neg x4) (fp.mul RNE x14 x12)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.sub RNE x11 x1)) (fp.neg (fp.add RNE x11 x3))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x10 x14) (fp.mul RNE x9 x3)) (fp.add RNE (fp.add RNE x7 x6) (fp.sub RNE x7 x7)))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.neg x0) (fp.sub RNE x15 x15)) (fp.neg (fp.div RNE x3 x0))) (fp.sub RNE (fp.div RNE (fp.sub RNE x13 x13) (fp.add RNE x6 x13)) (fp.mul RNE (fp.neg x13) (fp.add RNE x1 x11)))))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.mul RNE x16 x13) (fp.div RNE x4 x4)) (fp.mul RNE (fp.div RNE x3 x10) (fp.add RNE x10 x4))) (fp.neg (fp.neg (fp.add RNE x7 x4)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.mul RNE x13 x10) (fp.neg x8))) (fp.neg (fp.add RNE (fp.neg x4) (fp.sub RNE x11 x13)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.mul RNE x2 x4) (fp.div RNE x5 x4)) (fp.sub RNE (fp.div RNE x0 x14) (fp.sub RNE x15 x10))) (fp.sub RNE (fp.neg (fp.add RNE x6 x4)) (fp.add RNE (fp.neg x5) (fp.sub RNE x11 x6)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.add RNE x12 x5)) (fp.add RNE (fp.div RNE x1 x12) (fp.mul RNE x9 x5))) (fp.neg (fp.mul RNE (fp.sub RNE x16 x13) (fp.mul RNE x16 x13)))))
(assert (fp.leq (fp.neg (fp.add RNE (fp.add RNE x3 x0) (fp.mul RNE x16 x2))) (fp.mul RNE (fp.neg (fp.mul RNE x11 x14)) (fp.sub RNE (fp.mul RNE x15 x5) (fp.mul RNE x2 x6)))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.add RNE x6 x9) (fp.mul RNE x14 x8)) (fp.mul RNE (fp.add RNE x13 x14) (fp.div RNE x0 x7))) (fp.div RNE (fp.neg (fp.sub RNE x8 x7)) (fp.mul RNE (fp.sub RNE x9 x4) (fp.neg x9)))))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.div RNE x0 x2) (fp.div RNE x14 x15)) (fp.sub RNE (fp.mul RNE x10 x4) (fp.div RNE x9 x8))) (fp.add RNE (fp.neg (fp.mul RNE x12 x5)) (fp.mul RNE (fp.add RNE x6 x2) (fp.neg x0)))))
(check-sat)
