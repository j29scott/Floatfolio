(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.neg (fp.neg (fp.add RNE x9 x2))) (fp.add RNE (fp.mul RNE (fp.add RNE x19 x15) (fp.add RNE x14 x16)) (fp.div RNE (fp.mul RNE x9 x10) (fp.neg x4)))))
(assert (fp.geq (fp.neg (fp.div RNE (fp.add RNE x12 x6) (fp.div RNE x2 x7))) (fp.neg (fp.div RNE (fp.sub RNE x0 x19) (fp.div RNE x19 x12)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.add RNE x5 x4)) (fp.sub RNE (fp.mul RNE x12 x2) (fp.div RNE x1 x17))) (fp.add RNE (fp.neg (fp.sub RNE x2 x1)) (fp.div RNE (fp.neg x15) (fp.sub RNE x2 x17)))))
(assert (fp.gt (fp.neg (fp.sub RNE (fp.add RNE x5 x15) (fp.mul RNE x8 x12))) (fp.div RNE (fp.div RNE (fp.neg x16) (fp.mul RNE x13 x17)) (fp.sub RNE (fp.div RNE x3 x13) (fp.div RNE x0 x19)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.div RNE x0 x10) (fp.neg x7)) (fp.add RNE (fp.add RNE x15 x9) (fp.add RNE x3 x17))) (fp.sub RNE (fp.sub RNE (fp.add RNE x0 x16) (fp.sub RNE x6 x10)) (fp.div RNE (fp.add RNE x13 x3) (fp.sub RNE x18 x19)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.add RNE x12 x2) (fp.div RNE x1 x17)) (fp.mul RNE (fp.sub RNE x14 x3) (fp.div RNE x18 x7))) (fp.neg (fp.mul RNE (fp.div RNE x2 x8) (fp.mul RNE x6 x12)))))
(assert (fp.eq (fp.sub RNE (fp.neg (fp.add RNE x7 x9)) (fp.mul RNE (fp.neg x14) (fp.mul RNE x15 x5))) (fp.add RNE (fp.div RNE (fp.mul RNE x9 x7) (fp.sub RNE x6 x4)) (fp.mul RNE (fp.neg x5) (fp.mul RNE x0 x17)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.mul RNE x19 x19)) (fp.div RNE (fp.div RNE x17 x15) (fp.sub RNE x3 x2))) (fp.mul RNE (fp.mul RNE (fp.div RNE x16 x10) (fp.div RNE x7 x14)) (fp.neg (fp.mul RNE x15 x7)))))
(assert (fp.geq (fp.sub RNE (fp.div RNE (fp.sub RNE x11 x0) (fp.sub RNE x5 x8)) (fp.sub RNE (fp.neg x15) (fp.div RNE x12 x10))) (fp.add RNE (fp.mul RNE (fp.div RNE x1 x2) (fp.add RNE x16 x4)) (fp.mul RNE (fp.add RNE x1 x8) (fp.sub RNE x8 x12)))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.div RNE x6 x17) (fp.neg x17)) (fp.add RNE (fp.mul RNE x7 x0) (fp.add RNE x16 x5))) (fp.add RNE (fp.div RNE (fp.add RNE x1 x9) (fp.sub RNE x14 x6)) (fp.mul RNE (fp.add RNE x5 x11) (fp.sub RNE x17 x7)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.div RNE x11 x13) (fp.add RNE x2 x17)) (fp.add RNE (fp.add RNE x7 x15) (fp.div RNE x10 x5))) (fp.sub RNE (fp.neg (fp.mul RNE x9 x13)) (fp.mul RNE (fp.add RNE x2 x10) (fp.div RNE x8 x16)))))
(check-sat)
