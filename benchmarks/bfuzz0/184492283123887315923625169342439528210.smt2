(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.sub RNE x11 x13)) (fp.mul RNE (fp.mul RNE x4 x6) (fp.neg x17))))
(assert (fp.lt (fp.sub RNE (fp.div RNE x12 x21) (fp.div RNE x5 x9)) (fp.div RNE (fp.add RNE x18 x0) (fp.add RNE x23 x17))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x19 x16) (fp.add RNE x8 x14)) (fp.add RNE (fp.sub RNE x10 x6) (fp.add RNE x3 x7))))
(assert (fp.leq (fp.neg (fp.add RNE x19 x15)) (fp.mul RNE (fp.sub RNE x11 x9) (fp.sub RNE x7 x5))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x22 x17) (fp.neg x13)) (fp.sub RNE (fp.div RNE x5 x12) (fp.add RNE x21 x5))))
(assert (fp.geq (fp.add RNE (fp.div RNE x4 x15) (fp.div RNE x9 x10)) (fp.neg (fp.add RNE x1 x17))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x19 x21) (fp.neg x16)) (fp.sub RNE (fp.sub RNE x19 x22) (fp.add RNE x15 x13))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x20 x14) (fp.add RNE x3 x4)) (fp.neg (fp.sub RNE x10 x14))))
(assert (fp.lt (fp.div RNE (fp.neg x21) (fp.sub RNE x20 x19)) (fp.add RNE (fp.mul RNE x15 x4) (fp.div RNE x0 x22))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x23 x5) (fp.neg x8)) (fp.mul RNE (fp.sub RNE x15 x5) (fp.add RNE x1 x11))))
(assert (fp.geq (fp.neg (fp.neg x23)) (fp.mul RNE (fp.mul RNE x8 x13) (fp.mul RNE x6 x23))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x3 x2) (fp.sub RNE x23 x6)) (fp.neg (fp.add RNE x7 x18))))
(check-sat)
