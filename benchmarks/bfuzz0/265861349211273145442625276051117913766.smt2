(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.mul RNE (fp.add RNE x18 x15) (fp.sub RNE x11 x11)) (fp.mul RNE (fp.div RNE x5 x9) (fp.mul RNE x3 x15))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x15 x20) (fp.div RNE x13 x22)) (fp.neg (fp.mul RNE x22 x17))))
(assert (fp.geq (fp.sub RNE (fp.neg x10) (fp.div RNE x20 x21)) (fp.mul RNE (fp.mul RNE x11 x17) (fp.div RNE x0 x0))))
(assert (fp.geq (fp.neg (fp.add RNE x0 x17)) (fp.neg (fp.add RNE x5 x21))))
(assert (fp.geq (fp.mul RNE (fp.neg x16) (fp.sub RNE x21 x7)) (fp.sub RNE (fp.neg x20) (fp.add RNE x14 x19))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x7 x3) (fp.mul RNE x16 x2)) (fp.mul RNE (fp.add RNE x2 x14) (fp.add RNE x9 x18))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x7 x3) (fp.mul RNE x11 x2)) (fp.div RNE (fp.mul RNE x21 x16) (fp.sub RNE x8 x18))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x9 x1) (fp.neg x16)) (fp.neg (fp.mul RNE x22 x13))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x15 x2) (fp.add RNE x16 x13)) (fp.div RNE (fp.mul RNE x6 x17) (fp.sub RNE x0 x19))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x20 x8) (fp.div RNE x7 x19)) (fp.sub RNE (fp.div RNE x16 x5) (fp.neg x0))))
(assert (fp.gt (fp.div RNE (fp.neg x0) (fp.add RNE x10 x22)) (fp.div RNE (fp.sub RNE x10 x10) (fp.sub RNE x21 x12))))
(check-sat)
