(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.add RNE (fp.add RNE x18 x2) (fp.add RNE x15 x16))) (fp.div RNE (fp.div RNE (fp.sub RNE x18 x12) (fp.div RNE x10 x0)) (fp.div RNE (fp.mul RNE x6 x6) (fp.add RNE x7 x19)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.neg x16)) (fp.div RNE (fp.neg x0) (fp.mul RNE x7 x10))) (fp.div RNE (fp.div RNE (fp.add RNE x1 x15) (fp.neg x18)) (fp.div RNE (fp.sub RNE x15 x14) (fp.mul RNE x17 x20)))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.add RNE x2 x3) (fp.neg x17))) (fp.neg (fp.sub RNE (fp.add RNE x6 x10) (fp.neg x4)))))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.mul RNE x15 x8) (fp.mul RNE x5 x18)) (fp.neg (fp.sub RNE x0 x7))) (fp.neg (fp.add RNE (fp.sub RNE x1 x10) (fp.add RNE x6 x18)))))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.mul RNE x10 x3)) (fp.add RNE (fp.neg x12) (fp.mul RNE x10 x19))) (fp.add RNE (fp.mul RNE (fp.div RNE x1 x10) (fp.mul RNE x15 x3)) (fp.neg (fp.mul RNE x1 x20)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.mul RNE x11 x0) (fp.div RNE x12 x18)) (fp.mul RNE (fp.mul RNE x16 x7) (fp.sub RNE x10 x2))) (fp.div RNE (fp.sub RNE (fp.sub RNE x3 x18) (fp.sub RNE x15 x15)) (fp.neg (fp.sub RNE x12 x10)))))
(assert (fp.lt (fp.add RNE (fp.div RNE (fp.add RNE x8 x9) (fp.div RNE x8 x8)) (fp.neg (fp.add RNE x13 x10))) (fp.div RNE (fp.add RNE (fp.sub RNE x6 x19) (fp.neg x10)) (fp.neg (fp.add RNE x12 x15)))))
(assert (fp.lt (fp.div RNE (fp.neg (fp.sub RNE x19 x13)) (fp.mul RNE (fp.div RNE x14 x9) (fp.neg x16))) (fp.div RNE (fp.neg (fp.div RNE x0 x1)) (fp.sub RNE (fp.sub RNE x5 x17) (fp.add RNE x6 x10)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.div RNE x2 x15) (fp.neg x6)) (fp.add RNE (fp.div RNE x8 x20) (fp.neg x0))) (fp.neg (fp.div RNE (fp.neg x4) (fp.div RNE x9 x4)))))
(assert (fp.gt (fp.neg (fp.add RNE (fp.mul RNE x15 x13) (fp.div RNE x20 x10))) (fp.mul RNE (fp.sub RNE (fp.add RNE x16 x0) (fp.div RNE x12 x4)) (fp.neg (fp.div RNE x6 x9)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.add RNE x0 x17) (fp.mul RNE x3 x18)) (fp.mul RNE (fp.add RNE x7 x14) (fp.add RNE x12 x0))) (fp.div RNE (fp.sub RNE (fp.neg x13) (fp.neg x3)) (fp.div RNE (fp.mul RNE x20 x8) (fp.sub RNE x3 x18)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.mul RNE x14 x8) (fp.neg x10))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x11 x17) (fp.mul RNE x20 x15)) (fp.neg (fp.neg x14)))))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.div RNE x10 x14) (fp.add RNE x4 x17))) (fp.mul RNE (fp.sub RNE (fp.add RNE x15 x12) (fp.add RNE x13 x9)) (fp.neg (fp.mul RNE x2 x15)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.div RNE x8 x6) (fp.div RNE x9 x17)) (fp.neg (fp.add RNE x11 x16))) (fp.neg (fp.mul RNE (fp.sub RNE x7 x0) (fp.add RNE x9 x8)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.add RNE x9 x12) (fp.mul RNE x19 x15)) (fp.div RNE (fp.mul RNE x16 x10) (fp.mul RNE x15 x9))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x18 x5) (fp.neg x9)) (fp.mul RNE (fp.div RNE x2 x18) (fp.sub RNE x14 x14)))))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.add RNE x10 x7) (fp.add RNE x6 x13))) (fp.div RNE (fp.div RNE (fp.sub RNE x6 x10) (fp.div RNE x4 x9)) (fp.sub RNE (fp.mul RNE x9 x6) (fp.add RNE x14 x14)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.mul RNE x11 x7)) (fp.mul RNE (fp.mul RNE x10 x12) (fp.add RNE x6 x2))) (fp.neg (fp.div RNE (fp.mul RNE x6 x20) (fp.sub RNE x7 x13)))))
(check-sat)
