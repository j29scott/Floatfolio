(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.sub RNE x16 x12)) (fp.div RNE (fp.sub RNE x0 x1) (fp.div RNE x16 x4))))
(assert (fp.gt (fp.div RNE (fp.add RNE x3 x4) (fp.div RNE x13 x16)) (fp.add RNE (fp.sub RNE x15 x12) (fp.add RNE x21 x14))))
(assert (fp.leq (fp.add RNE (fp.div RNE x3 x21) (fp.neg x20)) (fp.sub RNE (fp.neg x1) (fp.neg x10))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x1 x17) (fp.mul RNE x1 x2)) (fp.add RNE (fp.add RNE x13 x0) (fp.div RNE x15 x20))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x17 x4) (fp.sub RNE x15 x19)) (fp.sub RNE (fp.mul RNE x16 x6) (fp.div RNE x12 x0))))
(assert (fp.leq (fp.sub RNE (fp.neg x8) (fp.add RNE x14 x20)) (fp.neg (fp.div RNE x0 x11))))
(assert (fp.eq (fp.div RNE (fp.div RNE x12 x14) (fp.mul RNE x13 x7)) (fp.neg (fp.sub RNE x6 x12))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x8 x1) (fp.div RNE x17 x17)) (fp.add RNE (fp.mul RNE x5 x13) (fp.div RNE x19 x21))))
(assert (fp.leq (fp.mul RNE (fp.neg x4) (fp.mul RNE x20 x15)) (fp.mul RNE (fp.neg x20) (fp.div RNE x16 x11))))
(assert (fp.gt (fp.neg (fp.neg x17)) (fp.div RNE (fp.neg x11) (fp.add RNE x9 x1))))
(assert (fp.geq (fp.div RNE (fp.add RNE x4 x8) (fp.neg x1)) (fp.sub RNE (fp.neg x7) (fp.sub RNE x6 x1))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x5 x1) (fp.mul RNE x10 x5)) (fp.mul RNE (fp.div RNE x13 x20) (fp.sub RNE x11 x9))))
(assert (fp.leq (fp.neg (fp.div RNE x17 x7)) (fp.div RNE (fp.neg x16) (fp.mul RNE x8 x17))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x9 x8) (fp.div RNE x0 x3)) (fp.add RNE (fp.div RNE x0 x10) (fp.sub RNE x18 x0))))
(assert (fp.eq (fp.add RNE (fp.add RNE x10 x0) (fp.neg x13)) (fp.neg (fp.add RNE x16 x13))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x9 x15) (fp.div RNE x1 x3)) (fp.div RNE (fp.mul RNE x4 x3) (fp.add RNE x15 x16))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x20 x10) (fp.sub RNE x17 x6)) (fp.sub RNE (fp.add RNE x20 x3) (fp.sub RNE x11 x6))))
(assert (fp.gt (fp.div RNE (fp.sub RNE x6 x10) (fp.div RNE x11 x13)) (fp.neg (fp.div RNE x7 x6))))
(assert (fp.eq (fp.add RNE (fp.neg x12) (fp.neg x12)) (fp.neg (fp.mul RNE x0 x2))))
(check-sat)
