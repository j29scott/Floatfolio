(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x4 x16) (fp.div RNE x8 x13)) (fp.mul RNE (fp.neg x16) (fp.div RNE x6 x6))))
(assert (fp.eq (fp.neg (fp.neg x16)) (fp.neg (fp.add RNE x5 x2))))
(assert (fp.lt (fp.mul RNE (fp.neg x3) (fp.mul RNE x1 x0)) (fp.div RNE (fp.sub RNE x12 x1) (fp.mul RNE x13 x6))))
(assert (fp.gt (fp.add RNE (fp.div RNE x0 x4) (fp.neg x13)) (fp.add RNE (fp.neg x15) (fp.add RNE x13 x0))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x3 x16) (fp.div RNE x0 x11)) (fp.div RNE (fp.add RNE x12 x4) (fp.sub RNE x13 x6))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x11 x11) (fp.sub RNE x6 x8)) (fp.mul RNE (fp.neg x12) (fp.mul RNE x5 x13))))
(assert (fp.lt (fp.neg (fp.mul RNE x0 x6)) (fp.neg (fp.add RNE x2 x7))))
(assert (fp.gt (fp.neg (fp.sub RNE x16 x12)) (fp.add RNE (fp.mul RNE x4 x4) (fp.mul RNE x5 x14))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x3 x3) (fp.div RNE x7 x4)) (fp.neg (fp.sub RNE x1 x6))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x11 x8) (fp.neg x3)) (fp.add RNE (fp.sub RNE x0 x11) (fp.mul RNE x9 x15))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x12 x16) (fp.neg x1)) (fp.neg (fp.add RNE x16 x5))))
(assert (fp.eq (fp.neg (fp.mul RNE x16 x11)) (fp.sub RNE (fp.mul RNE x6 x1) (fp.add RNE x13 x13))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x7 x8) (fp.div RNE x1 x16)) (fp.div RNE (fp.add RNE x14 x7) (fp.div RNE x10 x8))))
(assert (fp.eq (fp.neg (fp.mul RNE x2 x7)) (fp.neg (fp.sub RNE x1 x15))))
(assert (fp.lt (fp.neg (fp.div RNE x7 x0)) (fp.add RNE (fp.neg x15) (fp.div RNE x5 x6))))
(assert (fp.eq (fp.add RNE (fp.div RNE x16 x10) (fp.sub RNE x10 x10)) (fp.div RNE (fp.neg x0) (fp.mul RNE x10 x7))))
(check-sat)
