(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.add RNE x11 x6) (fp.mul RNE x20 x8)) (fp.add RNE (fp.mul RNE x3 x20) (fp.div RNE x16 x15))) (fp.sub RNE (fp.neg (fp.div RNE x20 x20)) (fp.add RNE (fp.add RNE x20 x5) (fp.add RNE x19 x1)))))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.neg x1) (fp.div RNE x18 x4)) (fp.mul RNE (fp.div RNE x1 x5) (fp.add RNE x17 x6))) (fp.div RNE (fp.mul RNE (fp.sub RNE x1 x7) (fp.add RNE x5 x19)) (fp.sub RNE (fp.neg x20) (fp.sub RNE x20 x8)))))
(check-sat)
