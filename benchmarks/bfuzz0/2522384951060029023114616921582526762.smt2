(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.neg x10) (fp.sub RNE x7 x8)) (fp.add RNE (fp.mul RNE x12 x7) (fp.mul RNE x1 x2))))
(assert (fp.gt (fp.add RNE (fp.neg x5) (fp.div RNE x7 x9)) (fp.neg (fp.neg x6))))
(assert (fp.gt (fp.neg (fp.div RNE x9 x7)) (fp.mul RNE (fp.add RNE x5 x12) (fp.div RNE x3 x0))))
(assert (fp.lt (fp.add RNE (fp.add RNE x1 x7) (fp.sub RNE x1 x6)) (fp.add RNE (fp.div RNE x12 x4) (fp.mul RNE x11 x12))))
(assert (fp.eq (fp.div RNE (fp.div RNE x3 x12) (fp.sub RNE x6 x4)) (fp.add RNE (fp.sub RNE x4 x9) (fp.add RNE x12 x5))))
(assert (fp.gt (fp.div RNE (fp.add RNE x5 x12) (fp.neg x12)) (fp.add RNE (fp.div RNE x6 x1) (fp.add RNE x7 x10))))
(assert (fp.geq (fp.add RNE (fp.neg x1) (fp.neg x6)) (fp.sub RNE (fp.mul RNE x6 x10) (fp.mul RNE x12 x3))))
(assert (fp.gt (fp.div RNE (fp.add RNE x3 x6) (fp.mul RNE x4 x3)) (fp.sub RNE (fp.sub RNE x5 x11) (fp.div RNE x11 x4))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x3 x6) (fp.neg x10)) (fp.div RNE (fp.mul RNE x10 x11) (fp.sub RNE x9 x12))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x4 x3) (fp.mul RNE x2 x12)) (fp.mul RNE (fp.mul RNE x12 x4) (fp.div RNE x8 x11))))
(assert (fp.eq (fp.div RNE (fp.div RNE x7 x3) (fp.div RNE x3 x0)) (fp.neg (fp.mul RNE x10 x12))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x0 x1) (fp.div RNE x12 x12)) (fp.neg (fp.div RNE x8 x8))))
(assert (fp.eq (fp.div RNE (fp.div RNE x3 x6) (fp.add RNE x7 x11)) (fp.neg (fp.sub RNE x5 x8))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x4 x1) (fp.sub RNE x1 x6)) (fp.add RNE (fp.add RNE x0 x0) (fp.neg x7))))
(assert (fp.leq (fp.neg (fp.add RNE x12 x6)) (fp.add RNE (fp.neg x0) (fp.neg x6))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE x3 x12) (fp.neg x8)) (fp.sub RNE (fp.add RNE x9 x7) (fp.add RNE x2 x4))))
(check-sat)
