(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.div RNE (fp.neg x12) (fp.neg x1)) (fp.div RNE (fp.mul RNE x5 x1) (fp.add RNE x11 x1))))
(assert (fp.eq (fp.add RNE (fp.div RNE x6 x1) (fp.sub RNE x3 x9)) (fp.mul RNE (fp.div RNE x10 x3) (fp.mul RNE x3 x11))))
(assert (fp.eq (fp.neg (fp.neg x0)) (fp.div RNE (fp.sub RNE x11 x4) (fp.mul RNE x8 x8))))
(assert (fp.gt (fp.neg (fp.div RNE x12 x4)) (fp.add RNE (fp.mul RNE x8 x11) (fp.sub RNE x6 x8))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x5 x4) (fp.neg x12)) (fp.neg (fp.add RNE x11 x5))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x11 x11) (fp.sub RNE x7 x12)) (fp.div RNE (fp.neg x4) (fp.sub RNE x4 x2))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x8 x0) (fp.mul RNE x9 x3)) (fp.neg (fp.add RNE x10 x8))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x5 x4) (fp.div RNE x11 x1)) (fp.neg (fp.add RNE x0 x0))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x10 x6) (fp.add RNE x4 x3)) (fp.div RNE (fp.mul RNE x7 x5) (fp.mul RNE x6 x7))))
(assert (fp.eq (fp.div RNE (fp.add RNE x6 x2) (fp.mul RNE x4 x11)) (fp.div RNE (fp.sub RNE x5 x11) (fp.sub RNE x8 x12))))
(assert (fp.leq (fp.div RNE (fp.add RNE x7 x12) (fp.neg x3)) (fp.div RNE (fp.mul RNE x1 x2) (fp.mul RNE x8 x7))))
(assert (fp.geq (fp.neg (fp.sub RNE x2 x4)) (fp.add RNE (fp.sub RNE x5 x11) (fp.mul RNE x10 x11))))
(assert (fp.leq (fp.neg (fp.mul RNE x7 x10)) (fp.div RNE (fp.neg x7) (fp.neg x5))))
(assert (fp.gt (fp.sub RNE (fp.neg x12) (fp.sub RNE x0 x12)) (fp.add RNE (fp.sub RNE x11 x0) (fp.div RNE x4 x5))))
(assert (fp.eq (fp.neg (fp.add RNE x6 x0)) (fp.div RNE (fp.sub RNE x1 x5) (fp.mul RNE x6 x4))))
(check-sat)
