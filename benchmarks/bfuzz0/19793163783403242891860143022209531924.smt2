(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.div RNE (fp.neg x4) (fp.div RNE x8 x18)) (fp.div RNE (fp.neg x10) (fp.mul RNE x18 x2))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x0 x16) (fp.add RNE x19 x13)) (fp.add RNE (fp.neg x14) (fp.div RNE x6 x11))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x17 x15) (fp.neg x3)) (fp.sub RNE (fp.add RNE x19 x4) (fp.sub RNE x19 x11))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x6 x0) (fp.sub RNE x2 x18)) (fp.neg (fp.neg x6))))
(assert (fp.geq (fp.div RNE (fp.add RNE x10 x2) (fp.div RNE x2 x7)) (fp.add RNE (fp.mul RNE x17 x10) (fp.mul RNE x3 x0))))
(assert (fp.lt (fp.sub RNE (fp.div RNE x14 x19) (fp.div RNE x18 x1)) (fp.neg (fp.div RNE x7 x17))))
(assert (fp.gt (fp.neg (fp.div RNE x7 x0)) (fp.add RNE (fp.mul RNE x3 x5) (fp.sub RNE x9 x16))))
(assert (fp.geq (fp.neg (fp.sub RNE x15 x16)) (fp.div RNE (fp.add RNE x4 x10) (fp.add RNE x9 x13))))
(assert (fp.gt (fp.add RNE (fp.add RNE x2 x12) (fp.sub RNE x10 x14)) (fp.neg (fp.neg x15))))
(assert (fp.geq (fp.neg (fp.mul RNE x14 x7)) (fp.div RNE (fp.neg x3) (fp.add RNE x6 x12))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x18 x7) (fp.sub RNE x12 x7)) (fp.div RNE (fp.mul RNE x17 x13) (fp.neg x16))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x12 x2) (fp.mul RNE x15 x14)) (fp.neg (fp.sub RNE x8 x9))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x3 x15) (fp.div RNE x5 x1)) (fp.mul RNE (fp.neg x14) (fp.neg x18))))
(check-sat)
