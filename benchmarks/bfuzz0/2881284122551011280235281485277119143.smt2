(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.neg (fp.add RNE (fp.add RNE x8 x15) (fp.div RNE x9 x15))) (fp.mul RNE (fp.add RNE (fp.mul RNE x6 x13) (fp.add RNE x9 x13)) (fp.sub RNE (fp.add RNE x11 x15) (fp.neg x3)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.sub RNE x10 x6) (fp.add RNE x10 x15)) (fp.mul RNE (fp.neg x12) (fp.add RNE x12 x0))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x3 x0) (fp.neg x5)) (fp.mul RNE (fp.div RNE x5 x8) (fp.add RNE x2 x13)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.div RNE x2 x8) (fp.add RNE x15 x0))) (fp.mul RNE (fp.neg (fp.mul RNE x3 x3)) (fp.sub RNE (fp.div RNE x14 x8) (fp.mul RNE x11 x11)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.neg x4) (fp.mul RNE x3 x15)) (fp.mul RNE (fp.add RNE x5 x3) (fp.sub RNE x10 x1))) (fp.add RNE (fp.div RNE (fp.div RNE x12 x13) (fp.div RNE x1 x14)) (fp.sub RNE (fp.sub RNE x14 x2) (fp.mul RNE x12 x7)))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.neg x7) (fp.neg x3)) (fp.sub RNE (fp.neg x2) (fp.sub RNE x1 x9))) (fp.sub RNE (fp.neg (fp.mul RNE x14 x5)) (fp.mul RNE (fp.neg x9) (fp.div RNE x9 x1)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.add RNE x11 x1) (fp.neg x6)) (fp.div RNE (fp.div RNE x6 x3) (fp.sub RNE x1 x0))) (fp.sub RNE (fp.add RNE (fp.add RNE x6 x15) (fp.mul RNE x10 x6)) (fp.div RNE (fp.mul RNE x5 x4) (fp.sub RNE x1 x4)))))
(assert (fp.geq (fp.neg (fp.add RNE (fp.sub RNE x5 x8) (fp.neg x9))) (fp.sub RNE (fp.mul RNE (fp.div RNE x4 x15) (fp.neg x12)) (fp.neg (fp.sub RNE x10 x11)))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE (fp.div RNE x8 x1) (fp.div RNE x0 x2)) (fp.sub RNE (fp.mul RNE x8 x13) (fp.mul RNE x2 x10))) (fp.div RNE (fp.neg (fp.neg x7)) (fp.sub RNE (fp.add RNE x8 x14) (fp.div RNE x0 x15)))))
(assert (fp.gt (fp.neg (fp.mul RNE (fp.neg x14) (fp.add RNE x3 x0))) (fp.sub RNE (fp.sub RNE (fp.add RNE x0 x15) (fp.div RNE x0 x7)) (fp.add RNE (fp.neg x12) (fp.mul RNE x1 x8)))))
(assert (fp.lt (fp.div RNE (fp.neg (fp.neg x5)) (fp.sub RNE (fp.neg x13) (fp.sub RNE x6 x2))) (fp.sub RNE (fp.sub RNE (fp.add RNE x5 x4) (fp.sub RNE x6 x1)) (fp.div RNE (fp.mul RNE x12 x0) (fp.div RNE x0 x11)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.neg x4) (fp.mul RNE x15 x13)) (fp.sub RNE (fp.sub RNE x6 x13) (fp.add RNE x1 x5))) (fp.add RNE (fp.add RNE (fp.mul RNE x3 x14) (fp.div RNE x8 x10)) (fp.div RNE (fp.add RNE x7 x8) (fp.add RNE x3 x8)))))
(check-sat)
