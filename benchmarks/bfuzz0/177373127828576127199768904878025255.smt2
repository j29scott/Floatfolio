(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x4 x8) (fp.neg x9)) (fp.mul RNE (fp.neg x2) (fp.neg x8))))
(assert (fp.geq (fp.mul RNE (fp.neg x0) (fp.neg x9)) (fp.neg (fp.div RNE x7 x4))))
(assert (fp.gt (fp.div RNE (fp.add RNE x10 x5) (fp.mul RNE x16 x11)) (fp.div RNE (fp.mul RNE x1 x1) (fp.sub RNE x2 x15))))
(assert (fp.eq (fp.add RNE (fp.add RNE x0 x15) (fp.div RNE x2 x10)) (fp.neg (fp.div RNE x7 x13))))
(assert (fp.lt (fp.div RNE (fp.div RNE x1 x16) (fp.mul RNE x11 x14)) (fp.sub RNE (fp.add RNE x13 x3) (fp.neg x14))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x16 x0) (fp.mul RNE x10 x6)) (fp.div RNE (fp.mul RNE x14 x11) (fp.sub RNE x2 x5))))
(assert (fp.leq (fp.div RNE (fp.div RNE x15 x16) (fp.neg x3)) (fp.div RNE (fp.add RNE x1 x7) (fp.add RNE x4 x11))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x15 x4) (fp.mul RNE x7 x15)) (fp.add RNE (fp.mul RNE x11 x10) (fp.neg x1))))
(assert (fp.geq (fp.neg (fp.div RNE x10 x9)) (fp.div RNE (fp.mul RNE x11 x1) (fp.sub RNE x10 x0))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x13 x7) (fp.neg x4)) (fp.mul RNE (fp.neg x1) (fp.add RNE x9 x9))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x3 x11) (fp.sub RNE x13 x7)) (fp.mul RNE (fp.mul RNE x5 x1) (fp.add RNE x8 x3))))
(assert (fp.gt (fp.div RNE (fp.add RNE x10 x2) (fp.sub RNE x13 x15)) (fp.div RNE (fp.sub RNE x13 x5) (fp.add RNE x6 x8))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x10 x7) (fp.mul RNE x3 x15)) (fp.div RNE (fp.neg x10) (fp.mul RNE x2 x3))))
(check-sat)
