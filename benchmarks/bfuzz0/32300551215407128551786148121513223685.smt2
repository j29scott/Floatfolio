(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.add RNE x11 x3) (fp.sub RNE x0 x12)) (fp.div RNE (fp.mul RNE x7 x2) (fp.neg x5))) (fp.sub RNE (fp.add RNE (fp.neg x6) (fp.div RNE x5 x2)) (fp.add RNE (fp.neg x12) (fp.add RNE x7 x4)))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.neg x9) (fp.neg x12))) (fp.neg (fp.sub RNE (fp.neg x10) (fp.neg x0)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.neg x11) (fp.mul RNE x8 x3)) (fp.neg (fp.sub RNE x8 x4))) (fp.div RNE (fp.mul RNE (fp.div RNE x5 x1) (fp.div RNE x9 x0)) (fp.add RNE (fp.neg x2) (fp.sub RNE x8 x0)))))
(check-sat)
