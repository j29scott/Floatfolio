(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.neg (fp.sub RNE x6 x15)) (fp.div RNE (fp.add RNE x13 x13) (fp.sub RNE x14 x11))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x19 x17) (fp.neg x10)) (fp.add RNE (fp.div RNE x6 x20) (fp.div RNE x18 x0))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x8 x22) (fp.mul RNE x17 x1)) (fp.neg (fp.div RNE x19 x13))))
(assert (fp.leq (fp.neg (fp.div RNE x6 x9)) (fp.div RNE (fp.sub RNE x14 x2) (fp.div RNE x12 x5))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x1 x8) (fp.mul RNE x2 x21)) (fp.div RNE (fp.neg x9) (fp.neg x16))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x18 x20) (fp.mul RNE x19 x20)) (fp.add RNE (fp.mul RNE x13 x14) (fp.div RNE x7 x0))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x6 x9) (fp.sub RNE x9 x5)) (fp.sub RNE (fp.add RNE x6 x16) (fp.sub RNE x9 x0))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x6 x14) (fp.add RNE x1 x8)) (fp.neg (fp.sub RNE x3 x16))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x21 x5) (fp.sub RNE x10 x17)) (fp.div RNE (fp.sub RNE x1 x6) (fp.mul RNE x22 x3))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x10 x17) (fp.add RNE x17 x19)) (fp.div RNE (fp.neg x1) (fp.div RNE x20 x19))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x4 x22) (fp.div RNE x7 x15)) (fp.div RNE (fp.mul RNE x1 x6) (fp.neg x20))))
(check-sat)
