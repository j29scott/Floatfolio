(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.add RNE x18 x12) (fp.add RNE x2 x1)) (fp.sub RNE (fp.neg x14) (fp.mul RNE x15 x11))))
(assert (fp.gt (fp.neg (fp.add RNE x0 x12)) (fp.neg (fp.div RNE x6 x8))))
(assert (fp.geq (fp.div RNE (fp.div RNE x17 x9) (fp.neg x10)) (fp.add RNE (fp.div RNE x14 x18) (fp.div RNE x5 x5))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x4 x14) (fp.neg x11)) (fp.sub RNE (fp.add RNE x15 x9) (fp.div RNE x13 x17))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x11 x4) (fp.neg x14)) (fp.mul RNE (fp.div RNE x3 x17) (fp.add RNE x4 x13))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x20 x11) (fp.div RNE x17 x10)) (fp.div RNE (fp.neg x4) (fp.div RNE x11 x15))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x15 x6) (fp.div RNE x6 x6)) (fp.div RNE (fp.sub RNE x17 x16) (fp.sub RNE x15 x1))))
(assert (fp.eq (fp.div RNE (fp.add RNE x20 x16) (fp.neg x0)) (fp.add RNE (fp.mul RNE x20 x17) (fp.mul RNE x12 x16))))
(assert (fp.leq (fp.add RNE (fp.div RNE x9 x7) (fp.div RNE x13 x2)) (fp.neg (fp.div RNE x6 x8))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x12 x15) (fp.neg x10)) (fp.div RNE (fp.neg x14) (fp.sub RNE x7 x13))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x15 x18) (fp.mul RNE x1 x14)) (fp.sub RNE (fp.div RNE x10 x15) (fp.add RNE x9 x6))))
(assert (fp.gt (fp.neg (fp.mul RNE x4 x7)) (fp.neg (fp.sub RNE x2 x9))))
(check-sat)
