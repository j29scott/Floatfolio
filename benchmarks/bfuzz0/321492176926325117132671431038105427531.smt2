(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x7 x4) (fp.div RNE x4 x5)) (fp.add RNE (fp.sub RNE x11 x12) (fp.neg x9))))
(assert (fp.eq (fp.neg (fp.neg x0)) (fp.div RNE (fp.add RNE x6 x7) (fp.neg x4))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x12 x11) (fp.mul RNE x2 x10)) (fp.sub RNE (fp.sub RNE x4 x6) (fp.add RNE x14 x9))))
(assert (fp.gt (fp.div RNE (fp.div RNE x3 x3) (fp.mul RNE x5 x8)) (fp.div RNE (fp.add RNE x3 x2) (fp.add RNE x5 x2))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x6 x11) (fp.sub RNE x11 x5)) (fp.sub RNE (fp.div RNE x5 x2) (fp.add RNE x4 x6))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x12 x14) (fp.add RNE x10 x2)) (fp.sub RNE (fp.div RNE x11 x9) (fp.neg x2))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x1 x14) (fp.sub RNE x4 x4)) (fp.add RNE (fp.sub RNE x0 x0) (fp.div RNE x0 x5))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x7 x9) (fp.mul RNE x6 x4)) (fp.neg (fp.mul RNE x0 x3))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x3 x11) (fp.sub RNE x6 x4)) (fp.sub RNE (fp.div RNE x7 x3) (fp.div RNE x9 x4))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x7 x11) (fp.div RNE x9 x3)) (fp.mul RNE (fp.div RNE x13 x13) (fp.add RNE x0 x0))))
(assert (fp.leq (fp.mul RNE (fp.neg x9) (fp.sub RNE x0 x7)) (fp.sub RNE (fp.add RNE x6 x6) (fp.sub RNE x9 x1))))
(assert (fp.lt (fp.neg (fp.add RNE x12 x5)) (fp.mul RNE (fp.add RNE x1 x14) (fp.sub RNE x10 x14))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x14 x13) (fp.mul RNE x2 x1)) (fp.add RNE (fp.div RNE x4 x0) (fp.add RNE x0 x11))))
(assert (fp.lt (fp.div RNE (fp.div RNE x1 x14) (fp.div RNE x0 x14)) (fp.neg (fp.add RNE x14 x4))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x9 x8) (fp.add RNE x4 x5)) (fp.div RNE (fp.add RNE x0 x0) (fp.neg x1))))
(check-sat)
