(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.neg x13) (fp.sub RNE x1 x17)) (fp.mul RNE (fp.add RNE x10 x1) (fp.mul RNE x6 x19))))
(assert (fp.leq (fp.neg (fp.sub RNE x16 x7)) (fp.sub RNE (fp.mul RNE x17 x11) (fp.div RNE x12 x7))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x16 x10) (fp.sub RNE x5 x4)) (fp.neg (fp.neg x6))))
(assert (fp.geq (fp.neg (fp.neg x9)) (fp.mul RNE (fp.mul RNE x0 x17) (fp.mul RNE x1 x9))))
(assert (fp.gt (fp.neg (fp.div RNE x3 x1)) (fp.sub RNE (fp.add RNE x19 x1) (fp.neg x9))))
(assert (fp.geq (fp.neg (fp.add RNE x16 x17)) (fp.div RNE (fp.div RNE x10 x10) (fp.neg x8))))
(assert (fp.geq (fp.div RNE (fp.add RNE x20 x14) (fp.div RNE x19 x11)) (fp.add RNE (fp.add RNE x15 x4) (fp.div RNE x20 x1))))
(assert (fp.geq (fp.sub RNE (fp.neg x16) (fp.mul RNE x15 x16)) (fp.neg (fp.neg x11))))
(assert (fp.geq (fp.div RNE (fp.div RNE x8 x11) (fp.mul RNE x11 x16)) (fp.div RNE (fp.mul RNE x5 x4) (fp.neg x2))))
(assert (fp.geq (fp.div RNE (fp.neg x11) (fp.mul RNE x10 x11)) (fp.neg (fp.div RNE x8 x1))))
(assert (fp.lt (fp.neg (fp.mul RNE x20 x4)) (fp.mul RNE (fp.mul RNE x20 x12) (fp.add RNE x15 x6))))
(assert (fp.gt (fp.div RNE (fp.sub RNE x0 x7) (fp.neg x16)) (fp.neg (fp.sub RNE x1 x4))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x3 x16) (fp.add RNE x1 x5)) (fp.add RNE (fp.add RNE x20 x0) (fp.add RNE x4 x9))))
(assert (fp.geq (fp.add RNE (fp.div RNE x17 x7) (fp.add RNE x18 x7)) (fp.div RNE (fp.mul RNE x4 x13) (fp.div RNE x15 x9))))
(assert (fp.lt (fp.add RNE (fp.add RNE x15 x15) (fp.sub RNE x19 x8)) (fp.mul RNE (fp.sub RNE x2 x1) (fp.mul RNE x10 x2))))
(check-sat)
