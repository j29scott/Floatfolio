(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.mul RNE (fp.add RNE x7 x3) (fp.sub RNE x0 x10)) (fp.add RNE (fp.add RNE x4 x8) (fp.neg x2))))
(assert (fp.gt (fp.neg (fp.sub RNE x10 x5)) (fp.sub RNE (fp.div RNE x7 x8) (fp.neg x1))))
(assert (fp.leq (fp.mul RNE (fp.neg x5) (fp.neg x5)) (fp.div RNE (fp.mul RNE x10 x1) (fp.sub RNE x3 x5))))
(assert (fp.gt (fp.div RNE (fp.sub RNE x3 x6) (fp.sub RNE x8 x9)) (fp.add RNE (fp.add RNE x3 x0) (fp.sub RNE x2 x6))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x1 x8) (fp.sub RNE x1 x3)) (fp.mul RNE (fp.add RNE x0 x5) (fp.div RNE x3 x10))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x1 x10) (fp.add RNE x3 x0)) (fp.neg (fp.neg x10))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x3 x2) (fp.neg x5)) (fp.mul RNE (fp.neg x3) (fp.sub RNE x2 x9))))
(assert (fp.leq (fp.div RNE (fp.neg x2) (fp.neg x2)) (fp.div RNE (fp.neg x7) (fp.sub RNE x3 x4))))
(assert (fp.geq (fp.neg (fp.add RNE x1 x4)) (fp.add RNE (fp.div RNE x0 x6) (fp.neg x8))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x8 x3) (fp.mul RNE x6 x2)) (fp.sub RNE (fp.div RNE x9 x9) (fp.div RNE x9 x6))))
(assert (fp.lt (fp.mul RNE (fp.neg x2) (fp.mul RNE x1 x3)) (fp.mul RNE (fp.mul RNE x8 x9) (fp.add RNE x7 x0))))
(assert (fp.geq (fp.div RNE (fp.neg x5) (fp.sub RNE x6 x0)) (fp.neg (fp.div RNE x9 x0))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x9 x5) (fp.mul RNE x0 x1)) (fp.add RNE (fp.mul RNE x8 x6) (fp.sub RNE x9 x5))))
(assert (fp.leq (fp.mul RNE (fp.neg x1) (fp.mul RNE x5 x4)) (fp.div RNE (fp.mul RNE x4 x7) (fp.add RNE x0 x0))))
(assert (fp.geq (fp.neg (fp.mul RNE x6 x7)) (fp.mul RNE (fp.div RNE x6 x6) (fp.add RNE x10 x7))))
(assert (fp.leq (fp.div RNE (fp.neg x8) (fp.add RNE x0 x10)) (fp.neg (fp.sub RNE x10 x6))))
(check-sat)
