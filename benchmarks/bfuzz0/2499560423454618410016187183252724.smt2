(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(declare-const x26 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE x18 x15) (fp.mul RNE x11 x19)))
(assert (fp.leq (fp.mul RNE x8 x26) (fp.neg x8)))
(assert (fp.geq (fp.div RNE x14 x9) (fp.div RNE x6 x1)))
(assert (fp.eq (fp.add RNE x24 x17) (fp.add RNE x0 x1)))
(assert (fp.leq (fp.add RNE x3 x3) (fp.add RNE x16 x13)))
(assert (fp.leq (fp.neg x15) (fp.neg x20)))
(assert (fp.geq (fp.neg x26) (fp.add RNE x8 x2)))
(assert (fp.gt (fp.add RNE x22 x18) (fp.div RNE x18 x21)))
(assert (fp.leq (fp.mul RNE x5 x10) (fp.add RNE x3 x8)))
(assert (fp.lt (fp.neg x8) (fp.add RNE x6 x22)))
(assert (fp.geq (fp.neg x20) (fp.div RNE x19 x4)))
(assert (fp.lt (fp.mul RNE x15 x4) (fp.sub RNE x21 x14)))
(assert (fp.leq (fp.sub RNE x4 x0) (fp.neg x3)))
(assert (fp.eq (fp.div RNE x20 x16) (fp.div RNE x2 x17)))
(assert (fp.leq (fp.div RNE x16 x18) (fp.neg x16)))
(assert (fp.geq (fp.add RNE x17 x2) (fp.mul RNE x18 x1)))
(assert (fp.geq (fp.div RNE x0 x1) (fp.neg x24)))
(assert (fp.eq (fp.div RNE x18 x7) (fp.sub RNE x16 x18)))
(check-sat)
