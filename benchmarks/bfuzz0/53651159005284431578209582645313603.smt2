(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.mul RNE x16 x16) (fp.neg x1)) (fp.sub RNE (fp.neg x14) (fp.add RNE x7 x17))) (fp.mul RNE (fp.neg (fp.neg x13)) (fp.mul RNE (fp.div RNE x1 x11) (fp.sub RNE x2 x7)))))
(assert (fp.geq (fp.sub RNE (fp.div RNE (fp.div RNE x18 x11) (fp.div RNE x14 x3)) (fp.sub RNE (fp.add RNE x11 x8) (fp.neg x6))) (fp.add RNE (fp.sub RNE (fp.div RNE x20 x18) (fp.add RNE x9 x0)) (fp.neg (fp.div RNE x11 x2)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.div RNE x1 x7) (fp.mul RNE x1 x9))) (fp.sub RNE (fp.add RNE (fp.neg x14) (fp.add RNE x15 x21)) (fp.sub RNE (fp.div RNE x18 x20) (fp.mul RNE x18 x15)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.sub RNE x17 x3) (fp.neg x12))) (fp.add RNE (fp.neg (fp.neg x6)) (fp.neg (fp.sub RNE x10 x7)))))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.neg x15) (fp.mul RNE x8 x9)) (fp.mul RNE (fp.neg x8) (fp.sub RNE x4 x8))) (fp.div RNE (fp.mul RNE (fp.neg x1) (fp.sub RNE x0 x14)) (fp.sub RNE (fp.div RNE x12 x13) (fp.div RNE x8 x10)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.mul RNE x1 x11) (fp.mul RNE x0 x5)) (fp.div RNE (fp.mul RNE x21 x22) (fp.sub RNE x10 x19))) (fp.mul RNE (fp.div RNE (fp.div RNE x8 x9) (fp.mul RNE x22 x13)) (fp.sub RNE (fp.mul RNE x11 x20) (fp.neg x10)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.mul RNE x16 x0) (fp.mul RNE x18 x16)) (fp.neg (fp.add RNE x2 x5))) (fp.neg (fp.neg (fp.add RNE x3 x2)))))
(check-sat)
