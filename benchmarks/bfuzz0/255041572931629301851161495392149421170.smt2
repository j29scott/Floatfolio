(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE (fp.neg x11) (fp.div RNE x2 x0)) (fp.div RNE (fp.mul RNE x3 x10) (fp.mul RNE x7 x6))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x6 x8) (fp.mul RNE x2 x4)) (fp.add RNE (fp.div RNE x9 x7) (fp.div RNE x5 x7))))
(assert (fp.eq (fp.neg (fp.mul RNE x10 x6)) (fp.sub RNE (fp.neg x10) (fp.add RNE x11 x4))))
(assert (fp.eq (fp.add RNE (fp.add RNE x5 x3) (fp.div RNE x4 x4)) (fp.mul RNE (fp.div RNE x2 x0) (fp.div RNE x7 x8))))
(assert (fp.geq (fp.neg (fp.add RNE x5 x10)) (fp.neg (fp.add RNE x7 x2))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x8 x0) (fp.mul RNE x7 x11)) (fp.sub RNE (fp.neg x3) (fp.sub RNE x2 x11))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x0 x11) (fp.add RNE x7 x9)) (fp.neg (fp.mul RNE x0 x4))))
(assert (fp.eq (fp.sub RNE (fp.neg x11) (fp.mul RNE x11 x4)) (fp.mul RNE (fp.add RNE x3 x11) (fp.neg x10))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x0 x1) (fp.neg x7)) (fp.neg (fp.neg x10))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x1 x8) (fp.neg x3)) (fp.add RNE (fp.neg x1) (fp.add RNE x6 x7))))
(assert (fp.gt (fp.neg (fp.sub RNE x4 x3)) (fp.neg (fp.div RNE x2 x7))))
(assert (fp.gt (fp.neg (fp.add RNE x5 x10)) (fp.add RNE (fp.mul RNE x7 x5) (fp.div RNE x4 x8))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x9 x11) (fp.sub RNE x3 x7)) (fp.neg (fp.mul RNE x3 x1))))
(assert (fp.geq (fp.add RNE (fp.neg x6) (fp.neg x1)) (fp.div RNE (fp.mul RNE x9 x1) (fp.div RNE x7 x11))))
(assert (fp.leq (fp.div RNE (fp.neg x4) (fp.div RNE x2 x8)) (fp.add RNE (fp.neg x6) (fp.mul RNE x4 x0))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x10 x4) (fp.add RNE x4 x4)) (fp.sub RNE (fp.sub RNE x3 x5) (fp.add RNE x8 x9))))
(assert (fp.eq (fp.div RNE (fp.div RNE x8 x4) (fp.mul RNE x8 x2)) (fp.sub RNE (fp.neg x8) (fp.mul RNE x9 x5))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x4 x5) (fp.div RNE x8 x2)) (fp.add RNE (fp.neg x7) (fp.neg x6))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE x7 x9) (fp.add RNE x10 x3)) (fp.sub RNE (fp.neg x0) (fp.mul RNE x5 x7))))
(check-sat)
