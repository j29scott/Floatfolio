(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(declare-const x27 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.sub RNE x5 x19) (fp.div RNE x7 x6)))
(assert (fp.leq (fp.div RNE x8 x16) (fp.div RNE x11 x24)))
(assert (fp.lt (fp.div RNE x12 x8) (fp.add RNE x14 x18)))
(assert (fp.gt (fp.div RNE x14 x20) (fp.mul RNE x7 x26)))
(assert (fp.lt (fp.sub RNE x20 x5) (fp.mul RNE x5 x16)))
(assert (fp.geq (fp.neg x18) (fp.sub RNE x23 x9)))
(assert (fp.leq (fp.add RNE x0 x5) (fp.mul RNE x14 x11)))
(assert (fp.geq (fp.sub RNE x19 x17) (fp.mul RNE x4 x10)))
(assert (fp.leq (fp.neg x1) (fp.sub RNE x6 x7)))
(assert (fp.leq (fp.neg x16) (fp.mul RNE x17 x23)))
(assert (fp.leq (fp.add RNE x5 x9) (fp.neg x16)))
(assert (fp.eq (fp.add RNE x0 x22) (fp.div RNE x0 x2)))
(assert (fp.geq (fp.sub RNE x5 x4) (fp.sub RNE x8 x13)))
(assert (fp.geq (fp.div RNE x25 x17) (fp.sub RNE x1 x0)))
(assert (fp.leq (fp.mul RNE x21 x12) (fp.neg x8)))
(assert (fp.lt (fp.mul RNE x14 x10) (fp.mul RNE x9 x24)))
(check-sat)
