(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.neg (fp.add RNE (fp.neg x8) (fp.sub RNE x12 x10))) (fp.add RNE (fp.mul RNE (fp.mul RNE x8 x4) (fp.mul RNE x2 x8)) (fp.div RNE (fp.neg x0) (fp.add RNE x12 x3)))))
(assert (fp.geq (fp.add RNE (fp.neg (fp.div RNE x14 x13)) (fp.mul RNE (fp.neg x9) (fp.sub RNE x7 x9))) (fp.mul RNE (fp.div RNE (fp.neg x10) (fp.add RNE x14 x2)) (fp.neg (fp.div RNE x9 x14)))))
(assert (fp.gt (fp.neg (fp.div RNE (fp.mul RNE x1 x11) (fp.add RNE x7 x6))) (fp.div RNE (fp.sub RNE (fp.mul RNE x13 x1) (fp.neg x0)) (fp.add RNE (fp.mul RNE x0 x4) (fp.mul RNE x10 x6)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.div RNE x4 x1) (fp.div RNE x2 x13)) (fp.sub RNE (fp.div RNE x0 x6) (fp.add RNE x11 x5))) (fp.mul RNE (fp.add RNE (fp.add RNE x2 x1) (fp.sub RNE x12 x0)) (fp.add RNE (fp.div RNE x11 x1) (fp.div RNE x13 x12)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.add RNE x3 x3) (fp.div RNE x11 x13))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x10 x10) (fp.neg x4)) (fp.sub RNE (fp.add RNE x1 x13) (fp.mul RNE x11 x1)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.sub RNE x1 x10) (fp.neg x4))) (fp.add RNE (fp.mul RNE (fp.sub RNE x2 x5) (fp.mul RNE x11 x11)) (fp.div RNE (fp.sub RNE x14 x12) (fp.mul RNE x11 x1)))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.div RNE x2 x5) (fp.neg x6))) (fp.sub RNE (fp.add RNE (fp.neg x5) (fp.neg x12)) (fp.sub RNE (fp.div RNE x9 x14) (fp.div RNE x5 x3)))))
(assert (fp.geq (fp.sub RNE (fp.div RNE (fp.mul RNE x10 x12) (fp.add RNE x1 x5)) (fp.div RNE (fp.neg x14) (fp.sub RNE x5 x2))) (fp.add RNE (fp.mul RNE (fp.mul RNE x13 x6) (fp.mul RNE x10 x11)) (fp.div RNE (fp.add RNE x2 x10) (fp.div RNE x1 x11)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.div RNE x13 x4) (fp.div RNE x2 x9)) (fp.add RNE (fp.div RNE x1 x4) (fp.add RNE x2 x6))) (fp.neg (fp.add RNE (fp.add RNE x1 x13) (fp.mul RNE x7 x13)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.sub RNE x9 x12)) (fp.neg (fp.mul RNE x8 x7))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x8 x9) (fp.sub RNE x11 x4)) (fp.neg (fp.neg x1)))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.add RNE x1 x9) (fp.mul RNE x12 x10)) (fp.sub RNE (fp.div RNE x9 x4) (fp.sub RNE x5 x6))) (fp.sub RNE (fp.add RNE (fp.sub RNE x4 x14) (fp.div RNE x9 x9)) (fp.div RNE (fp.neg x2) (fp.neg x4)))))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.sub RNE x9 x0) (fp.add RNE x8 x14))) (fp.neg (fp.add RNE (fp.add RNE x4 x6) (fp.sub RNE x7 x3)))))
(check-sat)
