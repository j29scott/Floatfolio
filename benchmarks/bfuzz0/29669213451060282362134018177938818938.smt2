(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.neg (fp.add RNE x8 x11)) (fp.add RNE (fp.sub RNE x4 x9) (fp.div RNE x0 x7))) (fp.div RNE (fp.sub RNE (fp.neg x11) (fp.div RNE x12 x13)) (fp.neg (fp.mul RNE x6 x14)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.div RNE x0 x9)) (fp.div RNE (fp.mul RNE x6 x1) (fp.neg x3))) (fp.mul RNE (fp.neg (fp.add RNE x2 x3)) (fp.mul RNE (fp.add RNE x3 x14) (fp.div RNE x1 x4)))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.neg x11)) (fp.div RNE (fp.sub RNE x1 x8) (fp.neg x9))) (fp.div RNE (fp.mul RNE (fp.div RNE x12 x6) (fp.sub RNE x5 x13)) (fp.add RNE (fp.sub RNE x1 x1) (fp.sub RNE x9 x12)))))
(assert (fp.geq (fp.mul RNE (fp.neg (fp.add RNE x2 x6)) (fp.mul RNE (fp.sub RNE x11 x6) (fp.add RNE x0 x8))) (fp.mul RNE (fp.sub RNE (fp.div RNE x11 x14) (fp.sub RNE x8 x0)) (fp.sub RNE (fp.add RNE x10 x2) (fp.sub RNE x10 x4)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.div RNE x14 x5) (fp.add RNE x5 x3)) (fp.add RNE (fp.sub RNE x14 x0) (fp.neg x4))) (fp.sub RNE (fp.add RNE (fp.div RNE x5 x8) (fp.neg x5)) (fp.sub RNE (fp.add RNE x1 x8) (fp.neg x11)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.div RNE x9 x10) (fp.sub RNE x3 x1))) (fp.div RNE (fp.add RNE (fp.mul RNE x5 x6) (fp.sub RNE x9 x1)) (fp.sub RNE (fp.neg x12) (fp.mul RNE x0 x9)))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.mul RNE x14 x13) (fp.neg x11)) (fp.mul RNE (fp.neg x7) (fp.neg x1))) (fp.neg (fp.mul RNE (fp.mul RNE x5 x5) (fp.mul RNE x11 x1)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.neg x0) (fp.mul RNE x3 x0)) (fp.sub RNE (fp.sub RNE x9 x9) (fp.div RNE x8 x0))) (fp.add RNE (fp.sub RNE (fp.add RNE x14 x7) (fp.div RNE x10 x13)) (fp.sub RNE (fp.mul RNE x12 x5) (fp.add RNE x14 x8)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.mul RNE x3 x5) (fp.neg x4))) (fp.div RNE (fp.add RNE (fp.div RNE x4 x3) (fp.sub RNE x12 x0)) (fp.neg (fp.add RNE x1 x4)))))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.mul RNE x4 x8) (fp.neg x3)) (fp.div RNE (fp.neg x1) (fp.neg x7))) (fp.mul RNE (fp.div RNE (fp.neg x8) (fp.add RNE x0 x4)) (fp.div RNE (fp.mul RNE x12 x7) (fp.mul RNE x0 x9)))))
(check-sat)
