(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.add RNE x22 x9) (fp.neg x16)) (fp.mul RNE (fp.neg x16) (fp.sub RNE x16 x0))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x14 x5) (fp.neg x5)) (fp.mul RNE (fp.mul RNE x4 x10) (fp.mul RNE x17 x11))))
(assert (fp.eq (fp.neg (fp.neg x7)) (fp.add RNE (fp.mul RNE x1 x16) (fp.neg x5))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x19 x19) (fp.neg x13)) (fp.mul RNE (fp.neg x6) (fp.add RNE x4 x18))))
(assert (fp.gt (fp.neg (fp.add RNE x9 x1)) (fp.sub RNE (fp.mul RNE x16 x0) (fp.add RNE x6 x8))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x0 x20) (fp.div RNE x7 x20)) (fp.add RNE (fp.mul RNE x5 x13) (fp.sub RNE x11 x17))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x1 x18) (fp.div RNE x20 x5)) (fp.add RNE (fp.mul RNE x20 x23) (fp.div RNE x18 x18))))
(assert (fp.lt (fp.neg (fp.sub RNE x19 x9)) (fp.div RNE (fp.add RNE x20 x20) (fp.add RNE x17 x19))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x19 x16) (fp.neg x2)) (fp.sub RNE (fp.mul RNE x7 x13) (fp.sub RNE x18 x13))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE x16 x7) (fp.add RNE x2 x16)) (fp.div RNE (fp.mul RNE x10 x5) (fp.div RNE x11 x0))))
(assert (fp.lt (fp.div RNE (fp.neg x21) (fp.div RNE x23 x5)) (fp.sub RNE (fp.sub RNE x9 x7) (fp.sub RNE x19 x8))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x3 x8) (fp.mul RNE x3 x8)) (fp.neg (fp.neg x14))))
(assert (fp.gt (fp.div RNE (fp.neg x18) (fp.neg x0)) (fp.div RNE (fp.mul RNE x22 x12) (fp.add RNE x13 x4))))
(check-sat)
