(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.mul RNE (fp.neg x3) (fp.neg x12)) (fp.div RNE (fp.mul RNE x2 x3) (fp.div RNE x11 x9))))
(assert (fp.geq (fp.div RNE (fp.add RNE x0 x6) (fp.mul RNE x2 x0)) (fp.neg (fp.add RNE x7 x9))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x9 x2) (fp.div RNE x7 x9)) (fp.mul RNE (fp.sub RNE x12 x2) (fp.sub RNE x11 x3))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x2 x5) (fp.mul RNE x4 x6)) (fp.mul RNE (fp.neg x1) (fp.neg x8))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x8 x4) (fp.add RNE x12 x12)) (fp.add RNE (fp.div RNE x7 x11) (fp.add RNE x2 x10))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x7 x6) (fp.neg x6)) (fp.add RNE (fp.mul RNE x10 x5) (fp.sub RNE x7 x1))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x0 x12) (fp.mul RNE x6 x8)) (fp.sub RNE (fp.add RNE x2 x7) (fp.add RNE x12 x10))))
(assert (fp.lt (fp.mul RNE (fp.neg x0) (fp.neg x6)) (fp.div RNE (fp.mul RNE x4 x0) (fp.mul RNE x0 x8))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x6 x9) (fp.add RNE x3 x3)) (fp.add RNE (fp.neg x0) (fp.sub RNE x4 x4))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x9 x3) (fp.add RNE x9 x5)) (fp.add RNE (fp.div RNE x8 x11) (fp.mul RNE x0 x8))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE x12 x10) (fp.mul RNE x8 x5)) (fp.mul RNE (fp.div RNE x0 x9) (fp.mul RNE x1 x12))))
(assert (fp.gt (fp.neg (fp.mul RNE x4 x4)) (fp.div RNE (fp.add RNE x7 x3) (fp.div RNE x9 x1))))
(assert (fp.lt (fp.add RNE (fp.neg x12) (fp.div RNE x3 x3)) (fp.neg (fp.mul RNE x4 x8))))
(assert (fp.lt (fp.sub RNE (fp.div RNE x0 x8) (fp.mul RNE x7 x5)) (fp.mul RNE (fp.sub RNE x1 x2) (fp.div RNE x8 x9))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x9 x3) (fp.mul RNE x9 x5)) (fp.neg (fp.add RNE x6 x4))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x7 x7) (fp.sub RNE x7 x6)) (fp.add RNE (fp.sub RNE x4 x3) (fp.div RNE x3 x12))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x9 x5) (fp.sub RNE x10 x4)) (fp.mul RNE (fp.neg x3) (fp.sub RNE x10 x7))))
(assert (fp.lt (fp.div RNE (fp.add RNE x0 x5) (fp.add RNE x1 x1)) (fp.neg (fp.neg x10))))
(check-sat)
