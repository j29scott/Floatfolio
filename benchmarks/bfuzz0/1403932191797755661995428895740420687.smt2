(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.neg x0) (fp.sub RNE x17 x12))) (fp.div RNE (fp.add RNE (fp.sub RNE x10 x14) (fp.add RNE x3 x1)) (fp.div RNE (fp.sub RNE x5 x2) (fp.neg x3)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.add RNE x15 x17) (fp.mul RNE x16 x7))) (fp.add RNE (fp.neg (fp.neg x0)) (fp.add RNE (fp.div RNE x4 x14) (fp.sub RNE x10 x3)))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.add RNE x9 x12) (fp.sub RNE x12 x9)) (fp.neg (fp.add RNE x8 x9))) (fp.sub RNE (fp.sub RNE (fp.div RNE x10 x0) (fp.add RNE x16 x15)) (fp.add RNE (fp.neg x10) (fp.div RNE x4 x8)))))
(check-sat)
