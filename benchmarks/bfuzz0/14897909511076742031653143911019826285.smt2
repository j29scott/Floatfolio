(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.div RNE x2 x2) (fp.sub RNE x18 x3)) (fp.neg (fp.neg x12))) (fp.add RNE (fp.mul RNE (fp.div RNE x15 x9) (fp.add RNE x9 x18)) (fp.mul RNE (fp.mul RNE x17 x14) (fp.sub RNE x6 x0)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.sub RNE x11 x7) (fp.neg x9)) (fp.div RNE (fp.sub RNE x17 x4) (fp.neg x12))) (fp.div RNE (fp.sub RNE (fp.add RNE x17 x4) (fp.div RNE x10 x14)) (fp.add RNE (fp.add RNE x18 x3) (fp.mul RNE x5 x0)))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.add RNE x10 x17)) (fp.sub RNE (fp.add RNE x5 x7) (fp.add RNE x6 x8))) (fp.neg (fp.mul RNE (fp.mul RNE x1 x13) (fp.mul RNE x13 x13)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.add RNE x10 x3) (fp.neg x7))) (fp.sub RNE (fp.add RNE (fp.neg x4) (fp.div RNE x10 x18)) (fp.div RNE (fp.div RNE x13 x0) (fp.sub RNE x1 x5)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x9 x5) (fp.neg x7)) (fp.sub RNE (fp.add RNE x17 x14) (fp.sub RNE x0 x1))) (fp.mul RNE (fp.add RNE (fp.sub RNE x5 x8) (fp.add RNE x16 x13)) (fp.div RNE (fp.sub RNE x14 x7) (fp.mul RNE x9 x11)))))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.add RNE x14 x15) (fp.neg x15)) (fp.add RNE (fp.neg x0) (fp.mul RNE x4 x0))) (fp.neg (fp.sub RNE (fp.neg x11) (fp.neg x6)))))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.mul RNE x12 x11) (fp.sub RNE x9 x4)) (fp.sub RNE (fp.add RNE x13 x8) (fp.neg x12))) (fp.add RNE (fp.add RNE (fp.add RNE x18 x18) (fp.sub RNE x5 x1)) (fp.sub RNE (fp.div RNE x17 x16) (fp.neg x0)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.mul RNE x11 x6) (fp.sub RNE x14 x7)) (fp.neg (fp.div RNE x6 x2))) (fp.add RNE (fp.neg (fp.add RNE x10 x9)) (fp.add RNE (fp.sub RNE x10 x8) (fp.div RNE x6 x13)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.add RNE x17 x8) (fp.div RNE x1 x1)) (fp.neg (fp.add RNE x18 x0))) (fp.sub RNE (fp.neg (fp.div RNE x13 x4)) (fp.div RNE (fp.mul RNE x10 x18) (fp.mul RNE x10 x14)))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.add RNE x17 x7)) (fp.add RNE (fp.mul RNE x11 x12) (fp.add RNE x16 x6))) (fp.mul RNE (fp.add RNE (fp.mul RNE x1 x11) (fp.neg x8)) (fp.sub RNE (fp.mul RNE x10 x12) (fp.add RNE x5 x17)))))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.div RNE x9 x8) (fp.mul RNE x16 x13)) (fp.sub RNE (fp.mul RNE x7 x15) (fp.mul RNE x6 x5))) (fp.neg (fp.sub RNE (fp.mul RNE x16 x1) (fp.sub RNE x12 x7)))))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.neg x17) (fp.div RNE x9 x15)) (fp.sub RNE (fp.add RNE x2 x9) (fp.mul RNE x7 x10))) (fp.sub RNE (fp.sub RNE (fp.neg x1) (fp.sub RNE x4 x7)) (fp.neg (fp.add RNE x5 x16)))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.add RNE x18 x18) (fp.div RNE x15 x0))) (fp.neg (fp.neg (fp.neg x11)))))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.mul RNE x13 x11) (fp.div RNE x10 x8)) (fp.sub RNE (fp.mul RNE x3 x10) (fp.sub RNE x4 x10))) (fp.mul RNE (fp.sub RNE (fp.div RNE x1 x15) (fp.neg x4)) (fp.sub RNE (fp.div RNE x12 x0) (fp.add RNE x3 x3)))))
(assert (fp.gt (fp.neg (fp.sub RNE (fp.add RNE x17 x12) (fp.div RNE x10 x6))) (fp.div RNE (fp.mul RNE (fp.add RNE x13 x2) (fp.div RNE x1 x16)) (fp.div RNE (fp.add RNE x4 x7) (fp.mul RNE x4 x8)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.div RNE x9 x12) (fp.neg x7)) (fp.mul RNE (fp.sub RNE x8 x13) (fp.div RNE x0 x12))) (fp.div RNE (fp.mul RNE (fp.add RNE x15 x5) (fp.mul RNE x5 x5)) (fp.add RNE (fp.mul RNE x8 x1) (fp.div RNE x0 x5)))))
(check-sat)
