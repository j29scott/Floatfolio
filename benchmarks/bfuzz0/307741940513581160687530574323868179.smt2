(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.div RNE x13 x0) (fp.add RNE x5 x3)) (fp.add RNE (fp.div RNE x12 x6) (fp.sub RNE x2 x8))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x13 x4) (fp.sub RNE x13 x1)) (fp.mul RNE (fp.mul RNE x10 x5) (fp.mul RNE x8 x13)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.div RNE x11 x11) (fp.add RNE x12 x11)) (fp.div RNE (fp.mul RNE x12 x8) (fp.div RNE x3 x12))) (fp.mul RNE (fp.sub RNE (fp.add RNE x2 x5) (fp.add RNE x14 x6)) (fp.neg (fp.sub RNE x5 x12)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.div RNE x8 x7) (fp.neg x13)) (fp.mul RNE (fp.mul RNE x3 x0) (fp.mul RNE x9 x6))) (fp.sub RNE (fp.add RNE (fp.sub RNE x9 x11) (fp.add RNE x7 x0)) (fp.neg (fp.sub RNE x14 x3)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.mul RNE x2 x6) (fp.neg x13)) (fp.div RNE (fp.div RNE x11 x12) (fp.div RNE x14 x6))) (fp.add RNE (fp.neg (fp.add RNE x0 x5)) (fp.sub RNE (fp.neg x13) (fp.mul RNE x1 x2)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.div RNE x13 x11) (fp.add RNE x3 x14))) (fp.add RNE (fp.div RNE (fp.sub RNE x13 x14) (fp.add RNE x6 x2)) (fp.neg (fp.sub RNE x13 x8)))))
(assert (fp.geq (fp.mul RNE (fp.neg (fp.sub RNE x7 x14)) (fp.add RNE (fp.div RNE x14 x0) (fp.add RNE x2 x6))) (fp.div RNE (fp.mul RNE (fp.sub RNE x4 x8) (fp.mul RNE x4 x5)) (fp.add RNE (fp.mul RNE x5 x2) (fp.mul RNE x4 x8)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.div RNE x10 x3) (fp.div RNE x14 x1)) (fp.add RNE (fp.div RNE x8 x0) (fp.neg x8))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x0 x3) (fp.sub RNE x9 x13)) (fp.sub RNE (fp.add RNE x13 x9) (fp.div RNE x5 x10)))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.sub RNE x13 x9) (fp.add RNE x1 x12)) (fp.div RNE (fp.add RNE x1 x2) (fp.neg x7))) (fp.add RNE (fp.div RNE (fp.sub RNE x13 x12) (fp.sub RNE x10 x4)) (fp.mul RNE (fp.mul RNE x4 x7) (fp.div RNE x12 x11)))))
(assert (fp.geq (fp.mul RNE (fp.neg (fp.sub RNE x10 x3)) (fp.add RNE (fp.div RNE x10 x12) (fp.mul RNE x7 x5))) (fp.sub RNE (fp.add RNE (fp.neg x10) (fp.neg x6)) (fp.div RNE (fp.sub RNE x13 x0) (fp.add RNE x0 x13)))))
(assert (fp.gt (fp.sub RNE (fp.add RNE (fp.add RNE x5 x7) (fp.mul RNE x14 x11)) (fp.div RNE (fp.mul RNE x8 x3) (fp.div RNE x8 x7))) (fp.add RNE (fp.neg (fp.add RNE x2 x9)) (fp.mul RNE (fp.mul RNE x6 x0) (fp.add RNE x9 x2)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.sub RNE x14 x3) (fp.mul RNE x12 x0)) (fp.neg (fp.sub RNE x10 x10))) (fp.div RNE (fp.div RNE (fp.add RNE x1 x10) (fp.sub RNE x2 x1)) (fp.sub RNE (fp.mul RNE x5 x8) (fp.div RNE x13 x7)))))
(check-sat)
