(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.div RNE (fp.neg x6) (fp.sub RNE x6 x0))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x6 x0) (fp.neg x1)) (fp.add RNE (fp.neg x3) (fp.sub RNE x5 x4)))) (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.add RNE x5 x6) (fp.add RNE x3 x6)) (fp.div RNE (fp.neg x5) (fp.add RNE x1 x1))) (fp.sub RNE (fp.sub RNE (fp.neg x3) (fp.add RNE x2 x0)) (fp.div RNE (fp.add RNE x4 x4) (fp.mul RNE x4 x1))))))
(assert (fp.geq (fp.neg (fp.neg (fp.div RNE (fp.neg x0) (fp.sub RNE x1 x3)))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.add RNE x3 x0) (fp.sub RNE x2 x4)) (fp.div RNE (fp.add RNE x3 x4) (fp.div RNE x3 x1))) (fp.add RNE (fp.mul RNE (fp.mul RNE x6 x2) (fp.mul RNE x3 x6)) (fp.div RNE (fp.neg x2) (fp.div RNE x2 x1))))))
(check-sat)
