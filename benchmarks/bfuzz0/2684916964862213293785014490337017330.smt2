(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.add RNE (fp.neg x21) (fp.neg x15)) (fp.neg (fp.sub RNE x17 x4))))
(assert (fp.lt (fp.neg (fp.add RNE x3 x7)) (fp.neg (fp.div RNE x18 x12))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x2 x0) (fp.sub RNE x9 x10)) (fp.div RNE (fp.mul RNE x13 x18) (fp.add RNE x4 x20))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x18 x20) (fp.div RNE x18 x1)) (fp.mul RNE (fp.sub RNE x11 x9) (fp.sub RNE x0 x7))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x16 x15) (fp.mul RNE x17 x21)) (fp.mul RNE (fp.div RNE x2 x2) (fp.neg x2))))
(assert (fp.gt (fp.div RNE (fp.neg x18) (fp.add RNE x2 x1)) (fp.mul RNE (fp.add RNE x2 x17) (fp.sub RNE x12 x8))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x0 x3) (fp.neg x12)) (fp.sub RNE (fp.add RNE x11 x20) (fp.mul RNE x15 x3))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x4 x15) (fp.neg x1)) (fp.div RNE (fp.div RNE x16 x4) (fp.neg x1))))
(assert (fp.lt (fp.neg (fp.div RNE x0 x1)) (fp.div RNE (fp.sub RNE x11 x8) (fp.div RNE x8 x9))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x5 x12) (fp.neg x5)) (fp.add RNE (fp.add RNE x0 x10) (fp.neg x0))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x13 x15) (fp.sub RNE x14 x2)) (fp.mul RNE (fp.sub RNE x0 x15) (fp.add RNE x5 x18))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x12 x6) (fp.add RNE x1 x20)) (fp.add RNE (fp.add RNE x2 x8) (fp.div RNE x1 x16))))
(assert (fp.geq (fp.add RNE (fp.add RNE x11 x5) (fp.div RNE x2 x15)) (fp.add RNE (fp.neg x6) (fp.mul RNE x11 x9))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x21 x19) (fp.div RNE x4 x17)) (fp.add RNE (fp.mul RNE x8 x17) (fp.add RNE x21 x0))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x8 x21) (fp.mul RNE x15 x11)) (fp.sub RNE (fp.div RNE x7 x13) (fp.add RNE x12 x21))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x5 x0) (fp.add RNE x2 x3)) (fp.mul RNE (fp.add RNE x12 x15) (fp.mul RNE x12 x17))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x21 x8) (fp.sub RNE x11 x18)) (fp.div RNE (fp.div RNE x7 x5) (fp.mul RNE x8 x0))))
(check-sat)
