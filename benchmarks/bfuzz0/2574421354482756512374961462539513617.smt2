(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.neg x21) (fp.mul RNE x23 x15)) (fp.add RNE (fp.mul RNE x13 x18) (fp.div RNE x12 x16))) (fp.add RNE (fp.div RNE (fp.sub RNE x20 x17) (fp.mul RNE x21 x21)) (fp.mul RNE (fp.neg x23) (fp.div RNE x10 x18)))))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.add RNE x15 x5) (fp.div RNE x10 x10)) (fp.neg (fp.add RNE x11 x4))) (fp.add RNE (fp.div RNE (fp.mul RNE x1 x11) (fp.neg x14)) (fp.add RNE (fp.div RNE x5 x6) (fp.mul RNE x15 x5)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.neg x3) (fp.sub RNE x5 x11)) (fp.div RNE (fp.neg x2) (fp.div RNE x22 x18))) (fp.add RNE (fp.add RNE (fp.sub RNE x15 x23) (fp.add RNE x3 x5)) (fp.div RNE (fp.neg x1) (fp.neg x3)))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.div RNE x14 x22) (fp.div RNE x9 x22)) (fp.add RNE (fp.neg x9) (fp.sub RNE x13 x21))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x18 x23) (fp.sub RNE x5 x5)) (fp.neg (fp.sub RNE x11 x16)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.sub RNE x2 x6) (fp.mul RNE x18 x17)) (fp.sub RNE (fp.div RNE x18 x3) (fp.mul RNE x19 x19))) (fp.div RNE (fp.neg (fp.div RNE x6 x19)) (fp.neg (fp.div RNE x7 x6)))))
(check-sat)
