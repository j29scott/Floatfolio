(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.add RNE (fp.neg x2) (fp.mul RNE x2 x2)) (fp.div RNE (fp.add RNE x9 x9) (fp.mul RNE x3 x0))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x1 x3) (fp.mul RNE x4 x7)) (fp.mul RNE (fp.sub RNE x7 x11) (fp.neg x9))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x0 x7) (fp.neg x6)) (fp.sub RNE (fp.neg x6) (fp.neg x4))))
(assert (fp.eq (fp.mul RNE (fp.neg x11) (fp.div RNE x7 x5)) (fp.add RNE (fp.neg x5) (fp.sub RNE x8 x3))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x3 x6) (fp.sub RNE x5 x1)) (fp.mul RNE (fp.mul RNE x11 x1) (fp.sub RNE x8 x11))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x2 x1) (fp.div RNE x1 x11)) (fp.div RNE (fp.mul RNE x9 x1) (fp.mul RNE x11 x3))))
(check-sat)
