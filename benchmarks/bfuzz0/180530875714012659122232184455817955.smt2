(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.add RNE x3 x5) (fp.sub RNE x10 x11)) (fp.add RNE (fp.neg x0) (fp.sub RNE x8 x10))))
(assert (fp.eq (fp.neg (fp.neg x4)) (fp.sub RNE (fp.neg x6) (fp.div RNE x4 x12))))
(assert (fp.gt (fp.add RNE (fp.add RNE x8 x5) (fp.neg x9)) (fp.div RNE (fp.mul RNE x7 x1) (fp.add RNE x11 x8))))
(assert (fp.lt (fp.add RNE (fp.neg x5) (fp.div RNE x9 x3)) (fp.div RNE (fp.div RNE x4 x9) (fp.add RNE x7 x4))))
(assert (fp.leq (fp.div RNE (fp.div RNE x4 x9) (fp.neg x8)) (fp.sub RNE (fp.neg x11) (fp.sub RNE x3 x0))))
(assert (fp.leq (fp.neg (fp.mul RNE x6 x12)) (fp.sub RNE (fp.add RNE x11 x10) (fp.add RNE x11 x0))))
(assert (fp.eq (fp.div RNE (fp.add RNE x0 x2) (fp.add RNE x9 x2)) (fp.sub RNE (fp.add RNE x10 x7) (fp.neg x2))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x4 x9) (fp.sub RNE x11 x6)) (fp.div RNE (fp.mul RNE x9 x10) (fp.div RNE x0 x0))))
(assert (fp.gt (fp.add RNE (fp.neg x6) (fp.add RNE x3 x4)) (fp.neg (fp.div RNE x10 x10))))
(assert (fp.eq (fp.mul RNE (fp.neg x0) (fp.div RNE x7 x10)) (fp.mul RNE (fp.neg x2) (fp.neg x11))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x6 x10) (fp.neg x7)) (fp.div RNE (fp.sub RNE x3 x8) (fp.sub RNE x8 x2))))
(assert (fp.geq (fp.neg (fp.neg x4)) (fp.add RNE (fp.div RNE x6 x7) (fp.div RNE x6 x12))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x11 x9) (fp.div RNE x12 x2)) (fp.mul RNE (fp.add RNE x3 x8) (fp.add RNE x7 x1))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x3 x5) (fp.sub RNE x0 x4)) (fp.mul RNE (fp.div RNE x12 x2) (fp.neg x4))))
(assert (fp.lt (fp.neg (fp.sub RNE x8 x10)) (fp.div RNE (fp.div RNE x1 x0) (fp.add RNE x9 x11))))
(assert (fp.leq (fp.div RNE (fp.add RNE x10 x3) (fp.add RNE x3 x9)) (fp.add RNE (fp.div RNE x0 x4) (fp.sub RNE x9 x8))))
(assert (fp.leq (fp.mul RNE (fp.neg x11) (fp.sub RNE x5 x2)) (fp.neg (fp.div RNE x7 x6))))
(assert (fp.gt (fp.neg (fp.neg x6)) (fp.neg (fp.neg x1))))
(check-sat)
