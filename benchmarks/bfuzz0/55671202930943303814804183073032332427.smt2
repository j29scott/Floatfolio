(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.div RNE x7 x11) (fp.mul RNE x19 x0)) (fp.mul RNE (fp.neg x7) (fp.sub RNE x9 x5))) (fp.div RNE (fp.sub RNE (fp.div RNE x10 x16) (fp.sub RNE x7 x8)) (fp.sub RNE (fp.sub RNE x13 x4) (fp.sub RNE x18 x15)))) (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x9 x8) (fp.div RNE x17 x8)) (fp.add RNE (fp.sub RNE x3 x8) (fp.mul RNE x0 x12))) (fp.sub RNE (fp.div RNE (fp.add RNE x5 x9) (fp.add RNE x1 x0)) (fp.add RNE (fp.div RNE x10 x10) (fp.neg x4))))))
(check-sat)
