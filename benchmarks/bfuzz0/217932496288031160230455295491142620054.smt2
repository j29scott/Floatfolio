(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.mul RNE (fp.add RNE x2 x20) (fp.mul RNE x18 x1)) (fp.mul RNE (fp.div RNE x20 x9) (fp.add RNE x8 x1))))
(assert (fp.geq (fp.add RNE (fp.add RNE x8 x15) (fp.add RNE x16 x4)) (fp.sub RNE (fp.add RNE x2 x8) (fp.div RNE x14 x1))))
(assert (fp.gt (fp.sub RNE (fp.neg x20) (fp.mul RNE x16 x6)) (fp.div RNE (fp.sub RNE x5 x6) (fp.add RNE x9 x17))))
(assert (fp.leq (fp.mul RNE (fp.neg x13) (fp.div RNE x17 x4)) (fp.div RNE (fp.neg x7) (fp.neg x0))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x18 x7) (fp.neg x11)) (fp.mul RNE (fp.mul RNE x18 x5) (fp.sub RNE x15 x5))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x20 x20) (fp.mul RNE x18 x0)) (fp.neg (fp.add RNE x8 x7))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x5 x3) (fp.div RNE x14 x18)) (fp.mul RNE (fp.neg x5) (fp.mul RNE x11 x5))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x0 x6) (fp.mul RNE x12 x4)) (fp.add RNE (fp.mul RNE x8 x21) (fp.add RNE x21 x9))))
(assert (fp.eq (fp.div RNE (fp.neg x11) (fp.mul RNE x17 x6)) (fp.sub RNE (fp.mul RNE x7 x3) (fp.neg x17))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x14 x15) (fp.sub RNE x2 x16)) (fp.div RNE (fp.sub RNE x9 x18) (fp.neg x10))))
(assert (fp.geq (fp.neg (fp.add RNE x13 x14)) (fp.add RNE (fp.div RNE x18 x9) (fp.add RNE x19 x20))))
(assert (fp.leq (fp.add RNE (fp.neg x12) (fp.neg x20)) (fp.add RNE (fp.add RNE x13 x0) (fp.neg x11))))
(check-sat)
