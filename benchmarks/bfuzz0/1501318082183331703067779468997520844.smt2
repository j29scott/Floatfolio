(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.add RNE (fp.mul RNE x9 x8) (fp.add RNE x8 x8))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x9 x0) (fp.add RNE x16 x3)) (fp.sub RNE (fp.add RNE x6 x13) (fp.neg x16)))))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.div RNE x6 x7) (fp.mul RNE x6 x9)) (fp.mul RNE (fp.mul RNE x10 x1) (fp.add RNE x15 x0))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x7 x1) (fp.div RNE x16 x6)) (fp.neg (fp.div RNE x0 x14)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.sub RNE x7 x5) (fp.mul RNE x2 x14)) (fp.neg (fp.mul RNE x9 x11))) (fp.add RNE (fp.add RNE (fp.sub RNE x14 x10) (fp.neg x10)) (fp.neg (fp.neg x3)))))
(assert (fp.gt (fp.neg (fp.mul RNE (fp.sub RNE x16 x2) (fp.neg x16))) (fp.neg (fp.div RNE (fp.div RNE x5 x9) (fp.mul RNE x13 x2)))))
(assert (fp.gt (fp.sub RNE (fp.neg (fp.add RNE x8 x16)) (fp.sub RNE (fp.neg x17) (fp.sub RNE x1 x4))) (fp.div RNE (fp.div RNE (fp.add RNE x10 x16) (fp.neg x7)) (fp.div RNE (fp.neg x9) (fp.add RNE x4 x6)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.sub RNE x13 x3)) (fp.sub RNE (fp.div RNE x0 x8) (fp.mul RNE x13 x9))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x9 x17) (fp.add RNE x15 x16)) (fp.mul RNE (fp.sub RNE x17 x13) (fp.neg x16)))))
(assert (fp.lt (fp.neg (fp.neg (fp.mul RNE x3 x14))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x7 x9) (fp.add RNE x1 x1)) (fp.sub RNE (fp.neg x7) (fp.div RNE x0 x0)))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.neg x6) (fp.add RNE x10 x0)) (fp.sub RNE (fp.add RNE x0 x1) (fp.div RNE x5 x8))) (fp.div RNE (fp.div RNE (fp.neg x2) (fp.mul RNE x6 x2)) (fp.sub RNE (fp.div RNE x0 x10) (fp.neg x11)))))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.neg x15) (fp.add RNE x1 x3)) (fp.mul RNE (fp.neg x5) (fp.div RNE x11 x1))) (fp.div RNE (fp.sub RNE (fp.neg x7) (fp.add RNE x8 x10)) (fp.div RNE (fp.neg x9) (fp.sub RNE x13 x8)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.mul RNE x0 x2) (fp.div RNE x2 x11)) (fp.mul RNE (fp.add RNE x10 x1) (fp.mul RNE x2 x12))) (fp.div RNE (fp.mul RNE (fp.mul RNE x0 x7) (fp.neg x0)) (fp.neg (fp.neg x17)))))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.neg x12) (fp.add RNE x2 x0)) (fp.add RNE (fp.neg x10) (fp.sub RNE x17 x16))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x14 x10) (fp.neg x8)) (fp.neg (fp.sub RNE x12 x16)))))
(check-sat)
