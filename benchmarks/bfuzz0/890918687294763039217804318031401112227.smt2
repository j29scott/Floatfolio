(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.neg (fp.div RNE x2 x13)) (fp.div RNE (fp.add RNE x11 x2) (fp.sub RNE x6 x6))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x14 x6) (fp.mul RNE x5 x8)) (fp.div RNE (fp.div RNE x2 x11) (fp.sub RNE x13 x11))))
(assert (fp.leq (fp.add RNE (fp.add RNE x4 x3) (fp.sub RNE x5 x5)) (fp.mul RNE (fp.neg x13) (fp.neg x7))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x12 x7) (fp.mul RNE x1 x4)) (fp.neg (fp.neg x1))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x5 x2) (fp.mul RNE x6 x9)) (fp.sub RNE (fp.div RNE x10 x0) (fp.div RNE x8 x3))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x3 x3) (fp.div RNE x8 x5)) (fp.neg (fp.div RNE x6 x6))))
(assert (fp.lt (fp.neg (fp.neg x7)) (fp.neg (fp.add RNE x9 x1))))
(assert (fp.eq (fp.sub RNE (fp.neg x11) (fp.mul RNE x3 x3)) (fp.sub RNE (fp.div RNE x14 x0) (fp.add RNE x0 x13))))
(assert (fp.gt (fp.add RNE (fp.add RNE x14 x13) (fp.div RNE x4 x14)) (fp.neg (fp.add RNE x2 x3))))
(assert (fp.eq (fp.neg (fp.mul RNE x11 x13)) (fp.sub RNE (fp.neg x5) (fp.sub RNE x12 x7))))
(assert (fp.gt (fp.mul RNE (fp.neg x11) (fp.mul RNE x9 x9)) (fp.mul RNE (fp.mul RNE x11 x8) (fp.sub RNE x14 x11))))
(assert (fp.leq (fp.sub RNE (fp.neg x2) (fp.sub RNE x11 x6)) (fp.add RNE (fp.div RNE x1 x8) (fp.mul RNE x2 x1))))
(assert (fp.leq (fp.sub RNE (fp.neg x3) (fp.mul RNE x2 x0)) (fp.add RNE (fp.neg x13) (fp.add RNE x3 x1))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x13 x4) (fp.mul RNE x4 x6)) (fp.sub RNE (fp.sub RNE x8 x14) (fp.neg x9))))
(assert (fp.lt (fp.add RNE (fp.sub RNE x9 x6) (fp.neg x9)) (fp.mul RNE (fp.neg x13) (fp.div RNE x0 x6))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x0 x8) (fp.add RNE x12 x8)) (fp.sub RNE (fp.add RNE x11 x4) (fp.div RNE x14 x2))))
(check-sat)
