(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.div RNE (fp.neg (fp.div RNE x5 x18)) (fp.add RNE (fp.neg x16) (fp.neg x5))) (fp.add RNE (fp.add RNE (fp.add RNE x12 x3) (fp.add RNE x14 x8)) (fp.sub RNE (fp.mul RNE x11 x10) (fp.mul RNE x3 x10)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.sub RNE x10 x1) (fp.mul RNE x3 x15)) (fp.mul RNE (fp.add RNE x15 x14) (fp.neg x9))) (fp.mul RNE (fp.sub RNE (fp.add RNE x18 x9) (fp.mul RNE x12 x0)) (fp.mul RNE (fp.neg x4) (fp.mul RNE x5 x8)))))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.add RNE x0 x15) (fp.neg x12)) (fp.neg (fp.sub RNE x19 x10))) (fp.add RNE (fp.sub RNE (fp.sub RNE x3 x8) (fp.mul RNE x5 x16)) (fp.sub RNE (fp.div RNE x14 x17) (fp.sub RNE x2 x0)))))
(assert (fp.geq (fp.add RNE (fp.div RNE (fp.mul RNE x15 x0) (fp.neg x0)) (fp.neg (fp.div RNE x13 x10))) (fp.mul RNE (fp.add RNE (fp.sub RNE x11 x1) (fp.div RNE x8 x5)) (fp.neg (fp.mul RNE x12 x1)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.sub RNE x11 x3) (fp.div RNE x18 x11)) (fp.add RNE (fp.div RNE x10 x6) (fp.div RNE x18 x1))) (fp.sub RNE (fp.neg (fp.add RNE x10 x11)) (fp.mul RNE (fp.div RNE x13 x3) (fp.mul RNE x4 x3)))))
(assert (fp.gt (fp.sub RNE (fp.neg (fp.div RNE x17 x1)) (fp.neg (fp.sub RNE x8 x2))) (fp.sub RNE (fp.sub RNE (fp.neg x17) (fp.sub RNE x13 x4)) (fp.neg (fp.sub RNE x7 x11)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.neg x1) (fp.mul RNE x15 x10))) (fp.neg (fp.neg (fp.div RNE x2 x11)))))
(check-sat)
