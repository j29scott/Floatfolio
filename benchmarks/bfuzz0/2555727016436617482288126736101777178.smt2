(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.sub RNE x12 x3) (fp.add RNE x5 x15)) (fp.div RNE (fp.add RNE x8 x8) (fp.add RNE x16 x11))) (fp.add RNE (fp.sub RNE (fp.div RNE x12 x2) (fp.div RNE x9 x3)) (fp.mul RNE (fp.div RNE x10 x4) (fp.mul RNE x12 x4)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.neg x11) (fp.sub RNE x14 x14)) (fp.mul RNE (fp.mul RNE x0 x4) (fp.div RNE x7 x7))) (fp.add RNE (fp.neg (fp.add RNE x13 x0)) (fp.div RNE (fp.mul RNE x16 x8) (fp.div RNE x12 x2)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.mul RNE x4 x4)) (fp.sub RNE (fp.neg x1) (fp.add RNE x4 x14))) (fp.mul RNE (fp.add RNE (fp.add RNE x12 x8) (fp.sub RNE x7 x5)) (fp.neg (fp.div RNE x5 x9)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.sub RNE x13 x13) (fp.neg x9)) (fp.sub RNE (fp.div RNE x2 x13) (fp.sub RNE x16 x3))) (fp.add RNE (fp.mul RNE (fp.sub RNE x10 x14) (fp.div RNE x1 x3)) (fp.mul RNE (fp.add RNE x15 x8) (fp.add RNE x14 x14)))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.div RNE x16 x4) (fp.add RNE x7 x2)) (fp.sub RNE (fp.sub RNE x3 x9) (fp.add RNE x2 x15))) (fp.div RNE (fp.mul RNE (fp.div RNE x4 x16) (fp.mul RNE x11 x5)) (fp.sub RNE (fp.mul RNE x5 x6) (fp.neg x16)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.neg x11) (fp.mul RNE x4 x15)) (fp.mul RNE (fp.div RNE x15 x15) (fp.add RNE x15 x0))) (fp.div RNE (fp.neg (fp.div RNE x0 x12)) (fp.add RNE (fp.neg x16) (fp.div RNE x6 x5)))))
(check-sat)
