(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.add RNE (fp.div RNE x22 x8) (fp.div RNE x6 x2)) (fp.neg (fp.mul RNE x5 x2))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x9 x11) (fp.mul RNE x14 x19)) (fp.sub RNE (fp.div RNE x17 x6) (fp.mul RNE x9 x12))))
(assert (fp.leq (fp.neg (fp.mul RNE x20 x14)) (fp.mul RNE (fp.div RNE x2 x17) (fp.neg x3))))
(assert (fp.leq (fp.mul RNE (fp.neg x22) (fp.add RNE x20 x18)) (fp.mul RNE (fp.mul RNE x21 x11) (fp.add RNE x21 x16))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x21 x1) (fp.neg x15)) (fp.div RNE (fp.add RNE x0 x7) (fp.add RNE x7 x23))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x20 x18) (fp.div RNE x14 x15)) (fp.add RNE (fp.neg x13) (fp.neg x17))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x10 x8) (fp.mul RNE x16 x10)) (fp.mul RNE (fp.mul RNE x16 x18) (fp.div RNE x4 x16))))
(assert (fp.lt (fp.div RNE (fp.add RNE x5 x7) (fp.add RNE x4 x12)) (fp.div RNE (fp.div RNE x6 x19) (fp.sub RNE x18 x24))))
(assert (fp.geq (fp.div RNE (fp.div RNE x12 x2) (fp.add RNE x22 x20)) (fp.sub RNE (fp.sub RNE x15 x10) (fp.neg x21))))
(assert (fp.eq (fp.neg (fp.div RNE x24 x20)) (fp.mul RNE (fp.sub RNE x22 x5) (fp.mul RNE x24 x9))))
(assert (fp.lt (fp.add RNE (fp.neg x21) (fp.add RNE x19 x3)) (fp.div RNE (fp.mul RNE x16 x8) (fp.sub RNE x19 x4))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x18 x5) (fp.neg x1)) (fp.mul RNE (fp.neg x18) (fp.add RNE x5 x16))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x8 x8) (fp.mul RNE x10 x0)) (fp.mul RNE (fp.sub RNE x5 x0) (fp.mul RNE x7 x1))))
(check-sat)
