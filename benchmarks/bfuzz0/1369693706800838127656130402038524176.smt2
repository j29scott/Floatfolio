(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.div RNE (fp.sub RNE x13 x2) (fp.div RNE x12 x7)) (fp.sub RNE (fp.mul RNE x12 x9) (fp.add RNE x3 x9))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x9 x1) (fp.neg x3)) (fp.neg (fp.neg x11))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE x6 x9) (fp.div RNE x4 x0)) (fp.div RNE (fp.div RNE x4 x11) (fp.neg x13))))
(assert (fp.leq (fp.add RNE (fp.add RNE x0 x10) (fp.sub RNE x8 x11)) (fp.sub RNE (fp.add RNE x8 x5) (fp.sub RNE x2 x0))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x2 x0) (fp.neg x12)) (fp.mul RNE (fp.neg x13) (fp.div RNE x3 x8))))
(assert (fp.leq (fp.neg (fp.neg x5)) (fp.neg (fp.sub RNE x13 x1))))
(assert (fp.lt (fp.div RNE (fp.neg x12) (fp.mul RNE x10 x5)) (fp.sub RNE (fp.neg x0) (fp.mul RNE x13 x6))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x11 x3) (fp.sub RNE x9 x5)) (fp.add RNE (fp.neg x3) (fp.sub RNE x13 x1))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x0 x13) (fp.neg x9)) (fp.neg (fp.add RNE x5 x7))))
(assert (fp.leq (fp.div RNE (fp.div RNE x10 x1) (fp.div RNE x7 x9)) (fp.sub RNE (fp.mul RNE x7 x13) (fp.add RNE x12 x7))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x2 x2) (fp.sub RNE x9 x10)) (fp.div RNE (fp.div RNE x13 x6) (fp.neg x6))))
(assert (fp.gt (fp.add RNE (fp.add RNE x5 x5) (fp.div RNE x1 x11)) (fp.sub RNE (fp.div RNE x13 x4) (fp.div RNE x10 x12))))
(assert (fp.leq (fp.sub RNE (fp.neg x10) (fp.div RNE x12 x1)) (fp.div RNE (fp.sub RNE x8 x9) (fp.neg x5))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x9 x1) (fp.neg x5)) (fp.div RNE (fp.neg x7) (fp.sub RNE x2 x5))))
(assert (fp.leq (fp.neg (fp.div RNE x3 x11)) (fp.sub RNE (fp.add RNE x0 x10) (fp.neg x2))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x0 x10) (fp.sub RNE x9 x0)) (fp.add RNE (fp.add RNE x0 x7) (fp.div RNE x2 x6))))
(check-sat)
