(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.add RNE (fp.neg (fp.add RNE x0 x1)) (fp.add RNE (fp.mul RNE x12 x9) (fp.div RNE x12 x11))) (fp.add RNE (fp.neg (fp.sub RNE x1 x9)) (fp.div RNE (fp.div RNE x10 x3) (fp.sub RNE x11 x3)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.neg x7) (fp.div RNE x6 x2)) (fp.add RNE (fp.div RNE x7 x12) (fp.sub RNE x8 x5))) (fp.div RNE (fp.add RNE (fp.neg x11) (fp.add RNE x11 x6)) (fp.add RNE (fp.sub RNE x11 x7) (fp.mul RNE x3 x10)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.div RNE x9 x8) (fp.div RNE x2 x12)) (fp.mul RNE (fp.mul RNE x11 x2) (fp.neg x2))) (fp.sub RNE (fp.sub RNE (fp.neg x4) (fp.add RNE x5 x10)) (fp.add RNE (fp.add RNE x7 x10) (fp.add RNE x7 x6)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.add RNE x1 x12) (fp.add RNE x11 x5)) (fp.div RNE (fp.sub RNE x9 x9) (fp.neg x1))) (fp.neg (fp.div RNE (fp.neg x7) (fp.mul RNE x4 x10)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.div RNE x6 x1) (fp.sub RNE x8 x11)) (fp.sub RNE (fp.mul RNE x4 x5) (fp.mul RNE x6 x9))) (fp.mul RNE (fp.div RNE (fp.sub RNE x6 x5) (fp.div RNE x10 x8)) (fp.mul RNE (fp.sub RNE x11 x0) (fp.mul RNE x1 x10)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.add RNE x7 x8)) (fp.sub RNE (fp.add RNE x7 x4) (fp.sub RNE x3 x12))) (fp.add RNE (fp.add RNE (fp.mul RNE x11 x2) (fp.neg x8)) (fp.mul RNE (fp.neg x1) (fp.neg x5)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.add RNE x8 x6) (fp.sub RNE x12 x1)) (fp.add RNE (fp.sub RNE x9 x7) (fp.mul RNE x0 x8))) (fp.mul RNE (fp.add RNE (fp.div RNE x4 x9) (fp.neg x9)) (fp.add RNE (fp.add RNE x8 x2) (fp.div RNE x4 x9)))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.add RNE x1 x5) (fp.add RNE x4 x6)) (fp.mul RNE (fp.sub RNE x8 x6) (fp.mul RNE x12 x3))) (fp.sub RNE (fp.div RNE (fp.add RNE x11 x9) (fp.add RNE x3 x5)) (fp.neg (fp.neg x11)))))
(assert (fp.gt (fp.div RNE (fp.div RNE (fp.mul RNE x1 x9) (fp.mul RNE x12 x0)) (fp.neg (fp.div RNE x2 x7))) (fp.neg (fp.neg (fp.mul RNE x4 x2)))))
(check-sat)
