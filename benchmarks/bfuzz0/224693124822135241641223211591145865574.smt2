(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.add RNE x8 x6) (fp.mul RNE x0 x0)) (fp.neg (fp.mul RNE x13 x6))) (fp.mul RNE (fp.add RNE (fp.sub RNE x9 x6) (fp.mul RNE x7 x3)) (fp.add RNE (fp.sub RNE x9 x1) (fp.neg x2)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.sub RNE x0 x7) (fp.neg x13)) (fp.mul RNE (fp.mul RNE x8 x9) (fp.neg x5))) (fp.sub RNE (fp.div RNE (fp.add RNE x0 x0) (fp.div RNE x10 x2)) (fp.add RNE (fp.sub RNE x12 x0) (fp.sub RNE x13 x6)))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.sub RNE x11 x3) (fp.mul RNE x5 x7)) (fp.add RNE (fp.mul RNE x11 x7) (fp.mul RNE x1 x6))) (fp.add RNE (fp.add RNE (fp.div RNE x11 x3) (fp.sub RNE x5 x7)) (fp.mul RNE (fp.neg x11) (fp.sub RNE x13 x10)))))
(assert (fp.geq (fp.neg (fp.neg (fp.mul RNE x8 x3))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x9 x11) (fp.neg x12)) (fp.add RNE (fp.sub RNE x5 x6) (fp.mul RNE x9 x8)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.neg x6) (fp.sub RNE x2 x12)) (fp.add RNE (fp.mul RNE x10 x9) (fp.sub RNE x6 x7))) (fp.add RNE (fp.div RNE (fp.neg x12) (fp.add RNE x6 x6)) (fp.sub RNE (fp.div RNE x5 x12) (fp.sub RNE x0 x8)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.mul RNE x4 x0)) (fp.div RNE (fp.sub RNE x3 x11) (fp.sub RNE x8 x12))) (fp.neg (fp.neg (fp.div RNE x5 x11)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.sub RNE x2 x8) (fp.sub RNE x9 x2)) (fp.add RNE (fp.div RNE x11 x4) (fp.div RNE x5 x11))) (fp.mul RNE (fp.add RNE (fp.div RNE x6 x12) (fp.sub RNE x3 x1)) (fp.div RNE (fp.neg x2) (fp.div RNE x6 x4)))))
(check-sat)
