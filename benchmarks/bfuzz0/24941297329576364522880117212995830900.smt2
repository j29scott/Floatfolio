(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.sub RNE (fp.div RNE x5 x3) (fp.sub RNE x6 x7)) (fp.div RNE (fp.mul RNE x9 x3) (fp.neg x0))))
(assert (fp.leq (fp.add RNE (fp.add RNE x6 x4) (fp.add RNE x3 x9)) (fp.neg (fp.sub RNE x6 x3))))
(assert (fp.gt (fp.sub RNE (fp.neg x7) (fp.mul RNE x2 x4)) (fp.sub RNE (fp.div RNE x6 x4) (fp.neg x5))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x8 x5) (fp.sub RNE x4 x3)) (fp.mul RNE (fp.mul RNE x0 x2) (fp.mul RNE x5 x7))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x4 x9) (fp.div RNE x3 x5)) (fp.neg (fp.div RNE x2 x4))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x5 x0) (fp.neg x7)) (fp.neg (fp.sub RNE x2 x8))))
(check-sat)
