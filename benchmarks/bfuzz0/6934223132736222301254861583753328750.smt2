(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.div RNE (fp.add RNE x16 x9) (fp.add RNE x8 x9)) (fp.sub RNE (fp.div RNE x16 x0) (fp.sub RNE x17 x11))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x13 x11) (fp.div RNE x16 x15)) (fp.add RNE (fp.add RNE x3 x14) (fp.mul RNE x9 x9))))
(assert (fp.eq (fp.add RNE (fp.neg x12) (fp.div RNE x8 x17)) (fp.sub RNE (fp.add RNE x13 x17) (fp.div RNE x0 x13))))
(assert (fp.eq (fp.sub RNE (fp.neg x5) (fp.add RNE x16 x6)) (fp.mul RNE (fp.add RNE x12 x16) (fp.div RNE x3 x15))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x4 x14) (fp.sub RNE x9 x13)) (fp.div RNE (fp.div RNE x0 x2) (fp.div RNE x5 x12))))
(assert (fp.leq (fp.add RNE (fp.add RNE x0 x13) (fp.div RNE x14 x15)) (fp.add RNE (fp.sub RNE x17 x8) (fp.sub RNE x15 x0))))
(assert (fp.eq (fp.div RNE (fp.div RNE x9 x1) (fp.add RNE x14 x4)) (fp.neg (fp.neg x10))))
(assert (fp.gt (fp.add RNE (fp.add RNE x0 x8) (fp.neg x9)) (fp.mul RNE (fp.div RNE x10 x3) (fp.div RNE x10 x12))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x2 x4) (fp.add RNE x4 x10)) (fp.neg (fp.neg x3))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x12 x8) (fp.add RNE x12 x8)) (fp.neg (fp.add RNE x0 x5))))
(assert (fp.lt (fp.add RNE (fp.neg x14) (fp.add RNE x16 x17)) (fp.mul RNE (fp.neg x3) (fp.neg x4))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x0 x13) (fp.sub RNE x2 x3)) (fp.mul RNE (fp.add RNE x0 x1) (fp.div RNE x14 x10))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x5 x15) (fp.sub RNE x3 x14)) (fp.neg (fp.sub RNE x15 x9))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x10 x6) (fp.sub RNE x15 x15)) (fp.mul RNE (fp.neg x15) (fp.mul RNE x4 x7))))
(assert (fp.gt (fp.neg (fp.add RNE x6 x2)) (fp.neg (fp.sub RNE x2 x11))))
(check-sat)
