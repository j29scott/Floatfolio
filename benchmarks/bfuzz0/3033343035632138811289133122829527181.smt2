(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.sub RNE (fp.add RNE x6 x2) (fp.add RNE x2 x9)) (fp.neg (fp.sub RNE x9 x4))))
(assert (fp.geq (fp.div RNE (fp.div RNE x0 x6) (fp.mul RNE x3 x9)) (fp.mul RNE (fp.div RNE x8 x3) (fp.add RNE x5 x4))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x1 x8) (fp.sub RNE x1 x8)) (fp.sub RNE (fp.mul RNE x5 x5) (fp.div RNE x7 x9))))
(assert (fp.geq (fp.add RNE (fp.add RNE x7 x8) (fp.mul RNE x0 x0)) (fp.sub RNE (fp.add RNE x6 x8) (fp.mul RNE x8 x2))))
(assert (fp.eq (fp.neg (fp.mul RNE x2 x6)) (fp.mul RNE (fp.sub RNE x4 x7) (fp.neg x4))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x1 x9) (fp.sub RNE x6 x0)) (fp.sub RNE (fp.add RNE x10 x4) (fp.neg x8))))
(assert (fp.leq (fp.div RNE (fp.add RNE x6 x9) (fp.div RNE x2 x10)) (fp.neg (fp.neg x1))))
(assert (fp.eq (fp.div RNE (fp.add RNE x7 x3) (fp.neg x7)) (fp.neg (fp.div RNE x4 x10))))
(assert (fp.leq (fp.neg (fp.mul RNE x3 x6)) (fp.sub RNE (fp.div RNE x5 x5) (fp.div RNE x8 x0))))
(assert (fp.lt (fp.div RNE (fp.neg x9) (fp.div RNE x0 x7)) (fp.div RNE (fp.sub RNE x9 x1) (fp.sub RNE x10 x10))))
(assert (fp.geq (fp.div RNE (fp.div RNE x0 x7) (fp.neg x9)) (fp.add RNE (fp.neg x6) (fp.mul RNE x7 x2))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x9 x1) (fp.add RNE x5 x6)) (fp.add RNE (fp.sub RNE x10 x8) (fp.add RNE x6 x3))))
(assert (fp.eq (fp.div RNE (fp.neg x9) (fp.neg x3)) (fp.neg (fp.neg x5))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x4 x10) (fp.neg x10)) (fp.add RNE (fp.add RNE x3 x3) (fp.sub RNE x6 x4))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x2 x7) (fp.add RNE x5 x5)) (fp.div RNE (fp.neg x4) (fp.neg x6))))
(assert (fp.leq (fp.div RNE (fp.neg x5) (fp.sub RNE x9 x9)) (fp.mul RNE (fp.neg x6) (fp.add RNE x0 x7))))
(assert (fp.gt (fp.add RNE (fp.div RNE x5 x7) (fp.add RNE x7 x2)) (fp.mul RNE (fp.add RNE x2 x3) (fp.mul RNE x7 x3))))
(check-sat)
