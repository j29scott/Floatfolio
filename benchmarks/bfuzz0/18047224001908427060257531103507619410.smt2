(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.neg (fp.add RNE x13 x3)) (fp.div RNE (fp.sub RNE x16 x19) (fp.add RNE x0 x5))))
(assert (fp.geq (fp.sub RNE (fp.neg x22) (fp.div RNE x23 x24)) (fp.add RNE (fp.mul RNE x16 x17) (fp.add RNE x18 x22))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x19 x6) (fp.mul RNE x17 x7)) (fp.add RNE (fp.add RNE x15 x9) (fp.sub RNE x12 x1))))
(assert (fp.geq (fp.neg (fp.add RNE x0 x2)) (fp.sub RNE (fp.sub RNE x8 x16) (fp.neg x4))))
(assert (fp.lt (fp.sub RNE (fp.neg x2) (fp.add RNE x11 x13)) (fp.div RNE (fp.div RNE x4 x15) (fp.add RNE x10 x23))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x13 x3) (fp.div RNE x4 x4)) (fp.sub RNE (fp.add RNE x11 x1) (fp.add RNE x24 x5))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x5 x13) (fp.neg x20)) (fp.add RNE (fp.sub RNE x7 x14) (fp.sub RNE x3 x0))))
(assert (fp.geq (fp.sub RNE (fp.neg x0) (fp.sub RNE x22 x0)) (fp.sub RNE (fp.add RNE x2 x14) (fp.add RNE x6 x9))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x12 x22) (fp.neg x17)) (fp.mul RNE (fp.div RNE x6 x5) (fp.div RNE x3 x0))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x23 x2) (fp.mul RNE x14 x11)) (fp.add RNE (fp.add RNE x16 x20) (fp.div RNE x14 x13))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x19 x9) (fp.mul RNE x20 x22)) (fp.mul RNE (fp.add RNE x15 x5) (fp.add RNE x2 x16))))
(assert (fp.geq (fp.div RNE (fp.add RNE x9 x14) (fp.sub RNE x12 x10)) (fp.mul RNE (fp.mul RNE x21 x4) (fp.add RNE x17 x8))))
(assert (fp.gt (fp.mul RNE (fp.neg x14) (fp.neg x22)) (fp.add RNE (fp.sub RNE x20 x13) (fp.add RNE x11 x1))))
(assert (fp.leq (fp.add RNE (fp.add RNE x16 x13) (fp.sub RNE x0 x4)) (fp.div RNE (fp.mul RNE x4 x9) (fp.div RNE x11 x10))))
(assert (fp.leq (fp.div RNE (fp.sub RNE x17 x19) (fp.neg x10)) (fp.add RNE (fp.add RNE x3 x5) (fp.sub RNE x10 x2))))
(assert (fp.eq (fp.neg (fp.neg x1)) (fp.sub RNE (fp.neg x12) (fp.sub RNE x8 x10))))
(assert (fp.leq (fp.neg (fp.sub RNE x12 x8)) (fp.neg (fp.sub RNE x20 x23))))
(check-sat)
