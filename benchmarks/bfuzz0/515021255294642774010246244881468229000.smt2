(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.add RNE (fp.neg (fp.div RNE x17 x3)) (fp.neg (fp.neg x14))) (fp.mul RNE (fp.div RNE (fp.mul RNE x17 x16) (fp.sub RNE x3 x17)) (fp.div RNE (fp.neg x3) (fp.div RNE x15 x3)))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE (fp.add RNE x3 x9) (fp.sub RNE x5 x15)) (fp.add RNE (fp.mul RNE x4 x14) (fp.div RNE x8 x7))) (fp.div RNE (fp.sub RNE (fp.neg x2) (fp.div RNE x0 x7)) (fp.add RNE (fp.neg x15) (fp.sub RNE x12 x4)))))
(assert (fp.gt (fp.neg (fp.div RNE (fp.mul RNE x11 x11) (fp.div RNE x5 x6))) (fp.sub RNE (fp.add RNE (fp.sub RNE x7 x7) (fp.sub RNE x8 x3)) (fp.div RNE (fp.mul RNE x10 x14) (fp.neg x12)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.neg x8) (fp.add RNE x8 x3)) (fp.div RNE (fp.div RNE x5 x7) (fp.sub RNE x13 x5))) (fp.add RNE (fp.mul RNE (fp.sub RNE x16 x1) (fp.add RNE x1 x4)) (fp.add RNE (fp.mul RNE x15 x15) (fp.div RNE x17 x10)))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.div RNE x13 x5) (fp.sub RNE x0 x6))) (fp.div RNE (fp.add RNE (fp.mul RNE x1 x16) (fp.mul RNE x3 x3)) (fp.neg (fp.div RNE x12 x17)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.div RNE x15 x16) (fp.neg x15)) (fp.div RNE (fp.neg x14) (fp.sub RNE x0 x13))) (fp.neg (fp.neg (fp.neg x7)))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.neg x6) (fp.add RNE x7 x0)) (fp.neg (fp.mul RNE x14 x7))) (fp.neg (fp.sub RNE (fp.neg x13) (fp.div RNE x11 x15)))))
(assert (fp.gt (fp.neg (fp.add RNE (fp.mul RNE x15 x8) (fp.mul RNE x2 x9))) (fp.neg (fp.div RNE (fp.div RNE x11 x1) (fp.div RNE x3 x8)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.add RNE x7 x16) (fp.neg x9))) (fp.sub RNE (fp.add RNE (fp.add RNE x1 x5) (fp.sub RNE x16 x11)) (fp.add RNE (fp.neg x12) (fp.mul RNE x1 x17)))))
(assert (fp.geq (fp.neg (fp.add RNE (fp.neg x16) (fp.mul RNE x9 x1))) (fp.div RNE (fp.sub RNE (fp.div RNE x14 x0) (fp.add RNE x12 x8)) (fp.add RNE (fp.mul RNE x14 x8) (fp.div RNE x13 x12)))))
(assert (fp.lt (fp.add RNE (fp.div RNE (fp.sub RNE x11 x11) (fp.neg x0)) (fp.div RNE (fp.mul RNE x16 x12) (fp.div RNE x14 x5))) (fp.add RNE (fp.sub RNE (fp.sub RNE x12 x8) (fp.add RNE x1 x6)) (fp.div RNE (fp.neg x12) (fp.div RNE x1 x6)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.mul RNE x8 x9) (fp.sub RNE x3 x12))) (fp.neg (fp.neg (fp.mul RNE x14 x1)))))
(assert (fp.leq (fp.neg (fp.neg (fp.mul RNE x13 x8))) (fp.sub RNE (fp.mul RNE (fp.neg x3) (fp.div RNE x14 x3)) (fp.neg (fp.neg x16)))))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.div RNE x16 x16) (fp.neg x4)) (fp.div RNE (fp.mul RNE x7 x11) (fp.add RNE x0 x10))) (fp.sub RNE (fp.neg (fp.add RNE x13 x13)) (fp.neg (fp.div RNE x15 x16)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.sub RNE x16 x14) (fp.sub RNE x12 x11)) (fp.div RNE (fp.div RNE x11 x6) (fp.sub RNE x12 x15))) (fp.neg (fp.sub RNE (fp.sub RNE x1 x4) (fp.mul RNE x3 x3)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.neg x11) (fp.neg x3)) (fp.div RNE (fp.div RNE x3 x5) (fp.neg x3))) (fp.sub RNE (fp.neg (fp.sub RNE x5 x9)) (fp.div RNE (fp.neg x4) (fp.sub RNE x7 x16)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.sub RNE x2 x1) (fp.div RNE x9 x12)) (fp.neg (fp.sub RNE x16 x8))) (fp.mul RNE (fp.neg (fp.sub RNE x9 x6)) (fp.mul RNE (fp.add RNE x12 x4) (fp.div RNE x7 x2)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.sub RNE x12 x9) (fp.add RNE x10 x14)) (fp.sub RNE (fp.sub RNE x14 x2) (fp.add RNE x5 x3))) (fp.div RNE (fp.mul RNE (fp.neg x3) (fp.neg x4)) (fp.neg (fp.add RNE x3 x1)))))
(check-sat)
