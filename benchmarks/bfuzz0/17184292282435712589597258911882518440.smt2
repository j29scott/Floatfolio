(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.neg (fp.neg x5)) (fp.add RNE (fp.add RNE x15 x18) (fp.sub RNE x18 x1))))
(assert (fp.eq (fp.neg (fp.add RNE x12 x0)) (fp.add RNE (fp.add RNE x5 x8) (fp.neg x4))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x19 x3) (fp.mul RNE x12 x10)) (fp.sub RNE (fp.sub RNE x9 x19) (fp.neg x3))))
(assert (fp.gt (fp.add RNE (fp.div RNE x3 x5) (fp.sub RNE x12 x8)) (fp.neg (fp.mul RNE x13 x17))))
(assert (fp.eq (fp.div RNE (fp.neg x15) (fp.mul RNE x11 x2)) (fp.neg (fp.add RNE x3 x13))))
(assert (fp.eq (fp.div RNE (fp.neg x3) (fp.neg x2)) (fp.mul RNE (fp.neg x5) (fp.mul RNE x5 x0))))
(assert (fp.geq (fp.neg (fp.add RNE x13 x4)) (fp.neg (fp.neg x13))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE x6 x20) (fp.add RNE x8 x0)) (fp.add RNE (fp.add RNE x11 x9) (fp.div RNE x16 x19))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x16 x18) (fp.div RNE x4 x15)) (fp.sub RNE (fp.add RNE x12 x14) (fp.neg x19))))
(assert (fp.geq (fp.neg (fp.add RNE x11 x1)) (fp.neg (fp.sub RNE x10 x13))))
(assert (fp.eq (fp.add RNE (fp.neg x17) (fp.mul RNE x16 x20)) (fp.mul RNE (fp.neg x6) (fp.add RNE x18 x8))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x19 x15) (fp.add RNE x4 x0)) (fp.div RNE (fp.neg x16) (fp.mul RNE x6 x3))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x3 x1) (fp.add RNE x9 x9)) (fp.sub RNE (fp.div RNE x20 x10) (fp.neg x12))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x8 x16) (fp.div RNE x2 x13)) (fp.sub RNE (fp.neg x8) (fp.sub RNE x1 x13))))
(check-sat)
