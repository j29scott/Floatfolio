(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.div RNE (fp.div RNE x3 x14) (fp.neg x8)) (fp.sub RNE (fp.div RNE x14 x5) (fp.sub RNE x16 x1))))
(assert (fp.leq (fp.neg (fp.mul RNE x0 x17)) (fp.add RNE (fp.add RNE x9 x18) (fp.div RNE x4 x0))))
(assert (fp.geq (fp.sub RNE (fp.neg x19) (fp.add RNE x8 x20)) (fp.div RNE (fp.div RNE x3 x16) (fp.mul RNE x10 x14))))
(assert (fp.leq (fp.mul RNE (fp.add RNE x15 x19) (fp.mul RNE x8 x0)) (fp.sub RNE (fp.mul RNE x0 x4) (fp.mul RNE x12 x3))))
(assert (fp.lt (fp.neg (fp.neg x0)) (fp.sub RNE (fp.mul RNE x21 x22) (fp.add RNE x1 x15))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x5 x8) (fp.neg x19)) (fp.div RNE (fp.sub RNE x15 x13) (fp.div RNE x15 x8))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x19 x11) (fp.neg x18)) (fp.sub RNE (fp.add RNE x6 x2) (fp.neg x15))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x13 x3) (fp.neg x11)) (fp.add RNE (fp.sub RNE x14 x3) (fp.mul RNE x8 x3))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x1 x21) (fp.neg x18)) (fp.sub RNE (fp.sub RNE x0 x16) (fp.div RNE x11 x9))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x10 x19) (fp.add RNE x11 x1)) (fp.neg (fp.neg x18))))
(assert (fp.lt (fp.sub RNE (fp.neg x17) (fp.add RNE x15 x5)) (fp.mul RNE (fp.div RNE x0 x2) (fp.neg x8))))
(assert (fp.lt (fp.mul RNE (fp.neg x18) (fp.neg x22)) (fp.add RNE (fp.div RNE x10 x9) (fp.div RNE x18 x2))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x2 x19) (fp.add RNE x17 x19)) (fp.mul RNE (fp.sub RNE x13 x5) (fp.sub RNE x9 x22))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x2 x3) (fp.mul RNE x15 x21)) (fp.add RNE (fp.div RNE x21 x5) (fp.add RNE x9 x19))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x8 x9) (fp.neg x1)) (fp.div RNE (fp.neg x14) (fp.mul RNE x15 x20))))
(assert (fp.geq (fp.add RNE (fp.div RNE x1 x19) (fp.div RNE x8 x5)) (fp.mul RNE (fp.div RNE x22 x16) (fp.mul RNE x1 x2))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x20 x9) (fp.add RNE x10 x7)) (fp.div RNE (fp.neg x9) (fp.mul RNE x8 x18))))
(assert (fp.gt (fp.add RNE (fp.add RNE x18 x11) (fp.div RNE x12 x10)) (fp.sub RNE (fp.add RNE x5 x21) (fp.neg x3))))
(check-sat)
