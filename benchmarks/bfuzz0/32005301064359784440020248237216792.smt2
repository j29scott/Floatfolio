(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.add RNE x12 x6) (fp.mul RNE x7 x11)) (fp.add RNE (fp.sub RNE x18 x4) (fp.neg x10))) (fp.mul RNE (fp.add RNE (fp.neg x8) (fp.neg x18)) (fp.sub RNE (fp.sub RNE x19 x1) (fp.mul RNE x16 x1)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.add RNE x13 x11) (fp.mul RNE x18 x0)) (fp.add RNE (fp.sub RNE x2 x16) (fp.add RNE x13 x19))) (fp.div RNE (fp.neg (fp.sub RNE x10 x0)) (fp.sub RNE (fp.neg x0) (fp.sub RNE x5 x13)))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.add RNE x1 x8) (fp.div RNE x8 x12)) (fp.add RNE (fp.neg x2) (fp.div RNE x15 x10))) (fp.neg (fp.mul RNE (fp.mul RNE x13 x8) (fp.sub RNE x12 x10)))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.sub RNE x10 x10) (fp.mul RNE x10 x11)) (fp.mul RNE (fp.sub RNE x5 x14) (fp.sub RNE x15 x2))) (fp.add RNE (fp.mul RNE (fp.add RNE x11 x15) (fp.mul RNE x19 x16)) (fp.neg (fp.neg x6)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.mul RNE x11 x16) (fp.neg x11)) (fp.sub RNE (fp.div RNE x13 x3) (fp.neg x5))) (fp.mul RNE (fp.sub RNE (fp.div RNE x2 x10) (fp.neg x10)) (fp.add RNE (fp.neg x15) (fp.add RNE x8 x19)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.mul RNE x11 x18) (fp.add RNE x2 x14)) (fp.neg (fp.mul RNE x1 x18))) (fp.add RNE (fp.div RNE (fp.mul RNE x7 x19) (fp.sub RNE x7 x6)) (fp.add RNE (fp.sub RNE x15 x11) (fp.neg x18)))))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.sub RNE x19 x19) (fp.neg x17)) (fp.mul RNE (fp.mul RNE x9 x12) (fp.sub RNE x4 x16))) (fp.mul RNE (fp.div RNE (fp.sub RNE x8 x9) (fp.sub RNE x3 x7)) (fp.div RNE (fp.add RNE x5 x12) (fp.neg x10)))))
(check-sat)
