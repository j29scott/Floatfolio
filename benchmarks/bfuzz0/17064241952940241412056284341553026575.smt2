(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.div RNE (fp.add RNE x6 x5) (fp.neg x15)) (fp.sub RNE (fp.mul RNE x14 x0) (fp.mul RNE x9 x14))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x11 x4) (fp.neg x15)) (fp.div RNE (fp.mul RNE x21 x20) (fp.mul RNE x13 x6))))
(assert (fp.eq (fp.div RNE (fp.div RNE x19 x16) (fp.neg x10)) (fp.sub RNE (fp.div RNE x15 x3) (fp.div RNE x10 x23))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x19 x18) (fp.add RNE x10 x19)) (fp.add RNE (fp.add RNE x22 x9) (fp.div RNE x15 x3))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x20 x18) (fp.add RNE x6 x9)) (fp.neg (fp.sub RNE x12 x11))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x4 x4) (fp.neg x9)) (fp.neg (fp.div RNE x17 x2))))
(assert (fp.geq (fp.mul RNE (fp.neg x3) (fp.add RNE x1 x2)) (fp.mul RNE (fp.mul RNE x9 x0) (fp.sub RNE x21 x10))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x16 x4) (fp.add RNE x12 x9)) (fp.add RNE (fp.mul RNE x21 x6) (fp.sub RNE x0 x5))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x8 x20) (fp.sub RNE x12 x8)) (fp.neg (fp.sub RNE x11 x22))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x4 x3) (fp.neg x12)) (fp.div RNE (fp.neg x7) (fp.mul RNE x0 x20))))
(check-sat)
