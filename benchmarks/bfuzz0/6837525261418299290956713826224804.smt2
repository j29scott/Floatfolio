(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.neg (fp.div RNE x17 x19))) (fp.mul RNE (fp.sub RNE (fp.add RNE x10 x13) (fp.sub RNE x0 x10)) (fp.mul RNE (fp.sub RNE x16 x13) (fp.sub RNE x15 x17)))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.add RNE x14 x9) (fp.sub RNE x4 x16))) (fp.add RNE (fp.sub RNE (fp.mul RNE x13 x0) (fp.mul RNE x2 x2)) (fp.neg (fp.mul RNE x9 x5)))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.sub RNE x3 x5) (fp.mul RNE x5 x6)) (fp.sub RNE (fp.sub RNE x16 x1) (fp.mul RNE x7 x14))) (fp.div RNE (fp.div RNE (fp.sub RNE x16 x17) (fp.div RNE x1 x7)) (fp.div RNE (fp.sub RNE x5 x17) (fp.div RNE x9 x6)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.add RNE x10 x8) (fp.mul RNE x15 x7)) (fp.mul RNE (fp.sub RNE x16 x16) (fp.add RNE x15 x13))) (fp.div RNE (fp.div RNE (fp.sub RNE x4 x14) (fp.div RNE x8 x10)) (fp.sub RNE (fp.mul RNE x5 x3) (fp.div RNE x9 x11)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.mul RNE x18 x10) (fp.div RNE x1 x7)) (fp.add RNE (fp.sub RNE x13 x2) (fp.mul RNE x8 x8))) (fp.neg (fp.div RNE (fp.neg x18) (fp.mul RNE x16 x17)))))
(assert (fp.lt (fp.neg (fp.neg (fp.div RNE x17 x7))) (fp.sub RNE (fp.sub RNE (fp.neg x17) (fp.div RNE x1 x18)) (fp.div RNE (fp.neg x6) (fp.sub RNE x3 x1)))))
(assert (fp.gt (fp.sub RNE (fp.add RNE (fp.add RNE x6 x15) (fp.sub RNE x13 x15)) (fp.mul RNE (fp.add RNE x1 x16) (fp.add RNE x16 x6))) (fp.sub RNE (fp.sub RNE (fp.div RNE x13 x8) (fp.neg x7)) (fp.add RNE (fp.mul RNE x5 x18) (fp.add RNE x1 x7)))))
(check-sat)
