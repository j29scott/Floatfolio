(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.div RNE (fp.div RNE x6 x3) (fp.div RNE x2 x6)) (fp.div RNE (fp.mul RNE x6 x3) (fp.div RNE x5 x0))))
(assert (fp.geq (fp.add RNE (fp.add RNE x1 x7) (fp.div RNE x6 x6)) (fp.sub RNE (fp.neg x5) (fp.div RNE x1 x6))))
(assert (fp.leq (fp.sub RNE (fp.neg x1) (fp.mul RNE x1 x4)) (fp.sub RNE (fp.sub RNE x0 x0) (fp.mul RNE x2 x3))))
(assert (fp.lt (fp.neg (fp.div RNE x7 x0)) (fp.div RNE (fp.sub RNE x6 x0) (fp.sub RNE x2 x4))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x6 x7) (fp.mul RNE x2 x4)) (fp.mul RNE (fp.add RNE x7 x6) (fp.mul RNE x0 x0))))
(assert (fp.leq (fp.div RNE (fp.neg x3) (fp.neg x0)) (fp.neg (fp.div RNE x2 x0))))
(check-sat)
