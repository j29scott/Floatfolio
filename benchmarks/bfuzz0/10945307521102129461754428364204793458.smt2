(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.neg (fp.div RNE (fp.mul RNE x4 x0) (fp.mul RNE x4 x4))) (fp.neg (fp.mul RNE (fp.add RNE x5 x9) (fp.add RNE x1 x14)))))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.neg x2) (fp.div RNE x2 x0)) (fp.sub RNE (fp.neg x5) (fp.neg x9))) (fp.add RNE (fp.div RNE (fp.div RNE x4 x7) (fp.add RNE x14 x4)) (fp.add RNE (fp.sub RNE x4 x14) (fp.sub RNE x3 x14)))))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.mul RNE x15 x12) (fp.mul RNE x6 x14)) (fp.add RNE (fp.neg x15) (fp.add RNE x15 x8))) (fp.sub RNE (fp.sub RNE (fp.neg x13) (fp.mul RNE x4 x10)) (fp.sub RNE (fp.div RNE x5 x14) (fp.neg x9)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.div RNE x12 x0)) (fp.div RNE (fp.mul RNE x6 x0) (fp.neg x14))) (fp.neg (fp.mul RNE (fp.neg x9) (fp.mul RNE x13 x12)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.add RNE x10 x13)) (fp.add RNE (fp.sub RNE x1 x4) (fp.mul RNE x13 x2))) (fp.div RNE (fp.div RNE (fp.mul RNE x1 x0) (fp.sub RNE x15 x0)) (fp.div RNE (fp.div RNE x3 x12) (fp.mul RNE x4 x14)))))
(assert (fp.gt (fp.neg (fp.add RNE (fp.div RNE x1 x0) (fp.add RNE x9 x3))) (fp.neg (fp.div RNE (fp.sub RNE x9 x4) (fp.mul RNE x14 x11)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.sub RNE x7 x5)) (fp.mul RNE (fp.div RNE x7 x3) (fp.neg x0))) (fp.div RNE (fp.sub RNE (fp.div RNE x0 x10) (fp.div RNE x12 x14)) (fp.neg (fp.mul RNE x2 x11)))))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.add RNE x4 x0)) (fp.sub RNE (fp.neg x1) (fp.neg x0))) (fp.div RNE (fp.mul RNE (fp.neg x6) (fp.div RNE x7 x6)) (fp.sub RNE (fp.neg x15) (fp.mul RNE x8 x4)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.mul RNE x3 x5) (fp.neg x12)) (fp.mul RNE (fp.sub RNE x6 x14) (fp.div RNE x10 x14))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x12 x0) (fp.neg x12)) (fp.mul RNE (fp.sub RNE x1 x5) (fp.add RNE x2 x13)))))
(check-sat)
