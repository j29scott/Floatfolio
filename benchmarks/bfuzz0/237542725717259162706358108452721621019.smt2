(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.sub RNE x12 x1) (fp.div RNE x16 x3)) (fp.add RNE (fp.mul RNE x19 x15) (fp.sub RNE x9 x13))) (fp.div RNE (fp.div RNE (fp.sub RNE x4 x16) (fp.add RNE x8 x18)) (fp.sub RNE (fp.neg x15) (fp.mul RNE x12 x9)))))
(assert (fp.leq (fp.neg (fp.add RNE (fp.sub RNE x8 x4) (fp.div RNE x10 x2))) (fp.sub RNE (fp.add RNE (fp.div RNE x15 x4) (fp.mul RNE x1 x13)) (fp.add RNE (fp.div RNE x8 x1) (fp.sub RNE x17 x20)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.add RNE x11 x14) (fp.add RNE x6 x0)) (fp.mul RNE (fp.add RNE x2 x6) (fp.sub RNE x12 x16))) (fp.neg (fp.div RNE (fp.div RNE x0 x14) (fp.add RNE x19 x14)))))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.div RNE x5 x8) (fp.div RNE x9 x7)) (fp.sub RNE (fp.mul RNE x5 x14) (fp.div RNE x6 x19))) (fp.sub RNE (fp.div RNE (fp.mul RNE x14 x6) (fp.add RNE x4 x16)) (fp.neg (fp.neg x12)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.neg x16) (fp.div RNE x6 x4)) (fp.sub RNE (fp.sub RNE x6 x9) (fp.sub RNE x0 x20))) (fp.sub RNE (fp.neg (fp.div RNE x12 x21)) (fp.div RNE (fp.mul RNE x13 x3) (fp.add RNE x4 x15)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.neg x12)) (fp.div RNE (fp.div RNE x13 x0) (fp.mul RNE x5 x17))) (fp.neg (fp.neg (fp.add RNE x17 x6)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.mul RNE x16 x14)) (fp.mul RNE (fp.mul RNE x19 x12) (fp.sub RNE x7 x6))) (fp.div RNE (fp.add RNE (fp.add RNE x16 x8) (fp.sub RNE x5 x8)) (fp.mul RNE (fp.neg x11) (fp.mul RNE x10 x4)))))
(assert (fp.eq (fp.sub RNE (fp.neg (fp.sub RNE x12 x6)) (fp.add RNE (fp.mul RNE x14 x20) (fp.sub RNE x6 x14))) (fp.sub RNE (fp.mul RNE (fp.neg x21) (fp.neg x16)) (fp.add RNE (fp.sub RNE x3 x0) (fp.add RNE x5 x2)))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.add RNE x6 x3) (fp.sub RNE x5 x5)) (fp.div RNE (fp.div RNE x9 x21) (fp.neg x20))) (fp.neg (fp.mul RNE (fp.neg x12) (fp.mul RNE x14 x5)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.add RNE x17 x16) (fp.sub RNE x21 x7)) (fp.neg (fp.add RNE x12 x14))) (fp.add RNE (fp.mul RNE (fp.mul RNE x0 x5) (fp.div RNE x9 x9)) (fp.add RNE (fp.div RNE x18 x11) (fp.mul RNE x7 x13)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.sub RNE x20 x21) (fp.neg x12)) (fp.add RNE (fp.neg x6) (fp.sub RNE x19 x6))) (fp.sub RNE (fp.div RNE (fp.neg x14) (fp.mul RNE x11 x7)) (fp.neg (fp.add RNE x6 x12)))))
(check-sat)
