(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.sub RNE (fp.neg x8) (fp.add RNE x1 x9)) (fp.sub RNE (fp.neg x0) (fp.div RNE x7 x2))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x6 x6) (fp.sub RNE x1 x3)) (fp.add RNE (fp.add RNE x1 x9) (fp.add RNE x8 x1))))
(assert (fp.gt (fp.add RNE (fp.neg x1) (fp.sub RNE x6 x8)) (fp.mul RNE (fp.sub RNE x5 x7) (fp.add RNE x8 x0))))
(assert (fp.geq (fp.neg (fp.sub RNE x3 x10)) (fp.mul RNE (fp.div RNE x1 x4) (fp.mul RNE x3 x6))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x7 x2) (fp.div RNE x3 x1)) (fp.div RNE (fp.mul RNE x9 x1) (fp.add RNE x5 x6))))
(assert (fp.lt (fp.neg (fp.mul RNE x9 x7)) (fp.div RNE (fp.div RNE x7 x1) (fp.mul RNE x0 x4))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x5 x6) (fp.sub RNE x4 x0)) (fp.sub RNE (fp.div RNE x6 x1) (fp.add RNE x8 x7))))
(assert (fp.eq (fp.div RNE (fp.div RNE x0 x2) (fp.mul RNE x1 x0)) (fp.sub RNE (fp.add RNE x0 x0) (fp.add RNE x10 x6))))
(assert (fp.leq (fp.div RNE (fp.div RNE x1 x3) (fp.mul RNE x3 x9)) (fp.div RNE (fp.sub RNE x9 x0) (fp.div RNE x6 x6))))
(assert (fp.geq (fp.neg (fp.add RNE x5 x7)) (fp.add RNE (fp.add RNE x0 x7) (fp.div RNE x3 x1))))
(assert (fp.lt (fp.neg (fp.mul RNE x8 x5)) (fp.add RNE (fp.div RNE x10 x4) (fp.div RNE x7 x10))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x10 x7) (fp.div RNE x9 x7)) (fp.div RNE (fp.div RNE x6 x2) (fp.mul RNE x0 x2))))
(assert (fp.eq (fp.add RNE (fp.add RNE x10 x4) (fp.neg x9)) (fp.sub RNE (fp.sub RNE x5 x2) (fp.sub RNE x8 x1))))
(assert (fp.leq (fp.add RNE (fp.neg x1) (fp.neg x0)) (fp.div RNE (fp.add RNE x3 x5) (fp.sub RNE x10 x8))))
(assert (fp.gt (fp.sub RNE (fp.neg x6) (fp.div RNE x9 x2)) (fp.neg (fp.add RNE x2 x7))))
(check-sat)
