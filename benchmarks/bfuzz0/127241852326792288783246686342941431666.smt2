(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(declare-const x27 (_ FloatingPoint 11 53))
(declare-const x28 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.neg (fp.div RNE x13 x4)) (fp.neg (fp.div RNE x15 x8))) (fp.mul RNE (fp.add RNE (fp.mul RNE x22 x25) (fp.sub RNE x3 x22)) (fp.add RNE (fp.mul RNE x14 x13) (fp.sub RNE x0 x2)))) (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.add RNE x22 x19) (fp.sub RNE x6 x8)) (fp.mul RNE (fp.sub RNE x25 x17) (fp.mul RNE x10 x16))) (fp.mul RNE (fp.neg (fp.neg x11)) (fp.add RNE (fp.div RNE x2 x26) (fp.div RNE x7 x18))))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.div RNE (fp.add RNE x0 x2) (fp.sub RNE x25 x13)) (fp.neg (fp.add RNE x2 x8))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x7 x9) (fp.div RNE x9 x7)) (fp.neg (fp.div RNE x13 x14)))) (fp.neg (fp.neg (fp.mul RNE (fp.div RNE x26 x20) (fp.add RNE x0 x12))))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.mul RNE (fp.mul RNE x25 x28) (fp.add RNE x11 x11))) (fp.div RNE (fp.sub RNE (fp.sub RNE x27 x12) (fp.div RNE x22 x3)) (fp.add RNE (fp.mul RNE x12 x24) (fp.sub RNE x0 x3)))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.mul RNE x22 x14) (fp.neg x8)) (fp.add RNE (fp.mul RNE x18 x6) (fp.add RNE x28 x13))) (fp.neg (fp.neg (fp.mul RNE x2 x28))))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.neg x2) (fp.div RNE x1 x27)) (fp.neg (fp.add RNE x17 x3))) (fp.neg (fp.div RNE (fp.mul RNE x8 x0) (fp.add RNE x25 x5)))) (fp.neg (fp.mul RNE (fp.neg (fp.sub RNE x27 x5)) (fp.neg (fp.sub RNE x17 x10))))))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.add RNE (fp.neg x10) (fp.div RNE x17 x20)) (fp.add RNE (fp.add RNE x18 x18) (fp.div RNE x16 x26))) (fp.neg (fp.div RNE (fp.add RNE x14 x24) (fp.add RNE x11 x25)))) (fp.mul RNE (fp.neg (fp.neg (fp.div RNE x9 x22))) (fp.sub RNE (fp.mul RNE (fp.div RNE x25 x23) (fp.mul RNE x21 x12)) (fp.sub RNE (fp.mul RNE x25 x12) (fp.neg x16))))))
(check-sat)
