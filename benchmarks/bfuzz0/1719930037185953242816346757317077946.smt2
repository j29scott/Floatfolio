(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.add RNE (fp.neg x9) (fp.add RNE x18 x10)) (fp.add RNE (fp.mul RNE x1 x12) (fp.neg x4))) (fp.sub RNE (fp.add RNE (fp.sub RNE x0 x6) (fp.mul RNE x12 x4)) (fp.add RNE (fp.sub RNE x17 x5) (fp.mul RNE x14 x6)))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x6 x2) (fp.sub RNE x2 x17)) (fp.sub RNE (fp.div RNE x6 x9) (fp.div RNE x14 x17))) (fp.sub RNE (fp.sub RNE (fp.div RNE x12 x18) (fp.add RNE x20 x15)) (fp.add RNE (fp.sub RNE x9 x0) (fp.mul RNE x7 x1))))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.neg x14) (fp.mul RNE x15 x12)) (fp.neg (fp.div RNE x14 x4))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x1 x4) (fp.add RNE x12 x4)) (fp.neg (fp.sub RNE x10 x16)))) (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.add RNE x6 x8) (fp.div RNE x8 x21)) (fp.div RNE (fp.sub RNE x7 x2) (fp.sub RNE x4 x9))) (fp.add RNE (fp.add RNE (fp.add RNE x5 x21) (fp.div RNE x7 x5)) (fp.sub RNE (fp.neg x12) (fp.neg x12))))))
(assert (fp.lt (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.add RNE x3 x21) (fp.add RNE x16 x3)) (fp.sub RNE (fp.mul RNE x0 x2) (fp.div RNE x11 x19))) (fp.div RNE (fp.mul RNE (fp.sub RNE x7 x21) (fp.sub RNE x4 x11)) (fp.add RNE (fp.mul RNE x4 x16) (fp.mul RNE x13 x7)))) (fp.sub RNE (fp.sub RNE (fp.div RNE (fp.add RNE x1 x1) (fp.mul RNE x5 x17)) (fp.sub RNE (fp.mul RNE x0 x4) (fp.mul RNE x1 x20))) (fp.div RNE (fp.neg (fp.div RNE x6 x7)) (fp.sub RNE (fp.div RNE x2 x12) (fp.mul RNE x5 x0))))))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.add RNE x2 x20) (fp.add RNE x2 x13)) (fp.sub RNE (fp.add RNE x17 x4) (fp.sub RNE x4 x3))) (fp.sub RNE (fp.neg (fp.div RNE x10 x20)) (fp.add RNE (fp.sub RNE x12 x20) (fp.add RNE x19 x0)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.div RNE x10 x10) (fp.neg x1)) (fp.mul RNE (fp.add RNE x16 x5) (fp.add RNE x1 x21))) (fp.mul RNE (fp.add RNE (fp.neg x12) (fp.add RNE x19 x13)) (fp.sub RNE (fp.neg x21) (fp.sub RNE x9 x9))))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.neg (fp.div RNE x11 x8)) (fp.add RNE (fp.sub RNE x1 x10) (fp.neg x3)))) (fp.sub RNE (fp.add RNE (fp.div RNE (fp.sub RNE x12 x20) (fp.sub RNE x6 x6)) (fp.add RNE (fp.div RNE x7 x11) (fp.neg x11))) (fp.div RNE (fp.div RNE (fp.mul RNE x13 x10) (fp.add RNE x6 x1)) (fp.div RNE (fp.add RNE x12 x13) (fp.sub RNE x5 x5))))))
(assert (fp.leq (fp.neg (fp.add RNE (fp.sub RNE (fp.add RNE x21 x15) (fp.neg x20)) (fp.div RNE (fp.sub RNE x7 x15) (fp.mul RNE x4 x21)))) (fp.mul RNE (fp.sub RNE (fp.neg (fp.add RNE x5 x5)) (fp.neg (fp.mul RNE x11 x16))) (fp.neg (fp.mul RNE (fp.div RNE x16 x8) (fp.add RNE x4 x13))))))
(assert (fp.lt (fp.add RNE (fp.neg (fp.add RNE (fp.add RNE x20 x17) (fp.neg x15))) (fp.sub RNE (fp.neg (fp.div RNE x5 x11)) (fp.sub RNE (fp.add RNE x14 x3) (fp.mul RNE x13 x18)))) (fp.add RNE (fp.sub RNE (fp.div RNE (fp.mul RNE x3 x19) (fp.div RNE x21 x19)) (fp.sub RNE (fp.div RNE x19 x7) (fp.add RNE x2 x6))) (fp.add RNE (fp.div RNE (fp.sub RNE x8 x20) (fp.sub RNE x12 x8)) (fp.add RNE (fp.neg x15) (fp.neg x17))))))
(check-sat)
