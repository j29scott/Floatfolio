(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.sub RNE (fp.neg x1) (fp.mul RNE x7 x2)) (fp.div RNE (fp.add RNE x10 x5) (fp.sub RNE x12 x12))))
(assert (fp.geq (fp.sub RNE (fp.neg x7) (fp.mul RNE x8 x7)) (fp.neg (fp.neg x2))))
(assert (fp.gt (fp.neg (fp.mul RNE x0 x4)) (fp.neg (fp.add RNE x11 x2))))
(assert (fp.geq (fp.add RNE (fp.mul RNE x4 x7) (fp.mul RNE x12 x4)) (fp.sub RNE (fp.sub RNE x0 x2) (fp.mul RNE x1 x3))))
(assert (fp.leq (fp.sub RNE (fp.neg x11) (fp.neg x0)) (fp.sub RNE (fp.sub RNE x2 x7) (fp.mul RNE x2 x6))))
(assert (fp.geq (fp.add RNE (fp.div RNE x8 x3) (fp.mul RNE x11 x7)) (fp.sub RNE (fp.sub RNE x6 x10) (fp.neg x4))))
(assert (fp.geq (fp.add RNE (fp.neg x3) (fp.neg x12)) (fp.mul RNE (fp.neg x1) (fp.div RNE x0 x13))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x11 x10) (fp.div RNE x6 x12)) (fp.div RNE (fp.neg x13) (fp.add RNE x8 x11))))
(assert (fp.leq (fp.div RNE (fp.neg x8) (fp.neg x1)) (fp.mul RNE (fp.mul RNE x5 x1) (fp.mul RNE x6 x13))))
(assert (fp.geq (fp.sub RNE (fp.div RNE x4 x11) (fp.sub RNE x7 x11)) (fp.add RNE (fp.mul RNE x10 x4) (fp.add RNE x4 x13))))
(assert (fp.gt (fp.neg (fp.add RNE x12 x5)) (fp.add RNE (fp.div RNE x8 x1) (fp.mul RNE x0 x0))))
(assert (fp.gt (fp.div RNE (fp.add RNE x8 x10) (fp.add RNE x7 x10)) (fp.mul RNE (fp.div RNE x9 x3) (fp.add RNE x11 x4))))
(assert (fp.leq (fp.sub RNE (fp.neg x10) (fp.add RNE x9 x3)) (fp.div RNE (fp.sub RNE x12 x0) (fp.mul RNE x7 x3))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x5 x5) (fp.div RNE x0 x8)) (fp.neg (fp.sub RNE x11 x8))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x0 x4) (fp.neg x4)) (fp.neg (fp.mul RNE x10 x4))))
(check-sat)
