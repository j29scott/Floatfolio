(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x3 x2) (fp.sub RNE x7 x6)) (fp.div RNE (fp.div RNE x11 x6) (fp.sub RNE x10 x6))))
(assert (fp.lt (fp.div RNE (fp.neg x12) (fp.add RNE x8 x2)) (fp.sub RNE (fp.add RNE x12 x9) (fp.div RNE x6 x12))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x6 x8) (fp.div RNE x8 x5)) (fp.div RNE (fp.neg x2) (fp.neg x6))))
(assert (fp.lt (fp.neg (fp.add RNE x6 x12)) (fp.mul RNE (fp.add RNE x1 x9) (fp.sub RNE x7 x12))))
(assert (fp.lt (fp.div RNE (fp.add RNE x8 x5) (fp.add RNE x1 x7)) (fp.sub RNE (fp.mul RNE x6 x0) (fp.div RNE x12 x12))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x3 x1) (fp.mul RNE x7 x7)) (fp.sub RNE (fp.add RNE x4 x12) (fp.add RNE x10 x10))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x0 x8) (fp.mul RNE x3 x12)) (fp.sub RNE (fp.sub RNE x11 x4) (fp.sub RNE x7 x5))))
(assert (fp.leq (fp.neg (fp.mul RNE x2 x7)) (fp.mul RNE (fp.sub RNE x9 x7) (fp.sub RNE x8 x6))))
(assert (fp.eq (fp.sub RNE (fp.neg x9) (fp.add RNE x12 x3)) (fp.add RNE (fp.sub RNE x1 x9) (fp.mul RNE x11 x3))))
(assert (fp.eq (fp.neg (fp.div RNE x9 x2)) (fp.div RNE (fp.add RNE x12 x4) (fp.neg x5))))
(assert (fp.lt (fp.sub RNE (fp.neg x1) (fp.sub RNE x1 x10)) (fp.mul RNE (fp.sub RNE x2 x4) (fp.add RNE x11 x11))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x11 x11) (fp.neg x10)) (fp.neg (fp.neg x10))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x12 x0) (fp.add RNE x0 x6)) (fp.div RNE (fp.sub RNE x8 x0) (fp.sub RNE x7 x3))))
(assert (fp.leq (fp.mul RNE (fp.mul RNE x6 x0) (fp.sub RNE x9 x0)) (fp.add RNE (fp.neg x6) (fp.mul RNE x8 x1))))
(assert (fp.lt (fp.add RNE (fp.add RNE x2 x8) (fp.div RNE x7 x12)) (fp.neg (fp.neg x6))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x5 x6) (fp.mul RNE x0 x3)) (fp.add RNE (fp.neg x9) (fp.mul RNE x4 x9))))
(check-sat)
