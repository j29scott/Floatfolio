(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x11 x5) (fp.div RNE x8 x14)) (fp.mul RNE (fp.mul RNE x5 x7) (fp.add RNE x14 x6))))
(assert (fp.geq (fp.neg (fp.sub RNE x0 x5)) (fp.add RNE (fp.add RNE x8 x9) (fp.neg x9))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x15 x15) (fp.sub RNE x6 x14)) (fp.neg (fp.add RNE x14 x10))))
(assert (fp.gt (fp.neg (fp.neg x9)) (fp.neg (fp.mul RNE x10 x7))))
(assert (fp.gt (fp.neg (fp.add RNE x14 x7)) (fp.div RNE (fp.div RNE x6 x15) (fp.sub RNE x0 x11))))
(assert (fp.geq (fp.mul RNE (fp.div RNE x12 x3) (fp.sub RNE x0 x13)) (fp.mul RNE (fp.div RNE x0 x1) (fp.div RNE x5 x8))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x6 x0) (fp.div RNE x4 x10)) (fp.sub RNE (fp.mul RNE x15 x6) (fp.div RNE x6 x3))))
(assert (fp.lt (fp.neg (fp.div RNE x3 x15)) (fp.div RNE (fp.sub RNE x0 x7) (fp.sub RNE x6 x11))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x12 x2) (fp.neg x13)) (fp.div RNE (fp.div RNE x14 x6) (fp.sub RNE x9 x5))))
(assert (fp.lt (fp.mul RNE (fp.div RNE x4 x7) (fp.mul RNE x2 x12)) (fp.add RNE (fp.neg x5) (fp.neg x13))))
(assert (fp.gt (fp.sub RNE (fp.sub RNE x13 x12) (fp.add RNE x12 x13)) (fp.mul RNE (fp.div RNE x11 x13) (fp.neg x4))))
(assert (fp.eq (fp.neg (fp.mul RNE x11 x6)) (fp.add RNE (fp.add RNE x13 x10) (fp.div RNE x15 x10))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x4 x2) (fp.div RNE x2 x6)) (fp.mul RNE (fp.div RNE x10 x4) (fp.div RNE x0 x0))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x1 x9) (fp.div RNE x12 x15)) (fp.sub RNE (fp.neg x2) (fp.sub RNE x14 x14))))
(assert (fp.geq (fp.sub RNE (fp.add RNE x11 x0) (fp.div RNE x2 x2)) (fp.mul RNE (fp.mul RNE x4 x10) (fp.add RNE x14 x15))))
(assert (fp.leq (fp.add RNE (fp.div RNE x8 x7) (fp.mul RNE x1 x11)) (fp.neg (fp.sub RNE x11 x1))))
(check-sat)
