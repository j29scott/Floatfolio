(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x7 x1) (fp.neg x2)) (fp.neg (fp.add RNE x12 x1))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x2 x10) (fp.div RNE x9 x13)) (fp.neg (fp.mul RNE x8 x4))))
(assert (fp.lt (fp.neg (fp.div RNE x9 x5)) (fp.add RNE (fp.div RNE x2 x6) (fp.sub RNE x6 x6))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x5 x5) (fp.neg x0)) (fp.neg (fp.mul RNE x1 x11))))
(assert (fp.lt (fp.neg (fp.div RNE x0 x12)) (fp.neg (fp.mul RNE x12 x5))))
(assert (fp.leq (fp.add RNE (fp.div RNE x13 x4) (fp.sub RNE x8 x10)) (fp.add RNE (fp.neg x10) (fp.div RNE x10 x3))))
(assert (fp.gt (fp.div RNE (fp.neg x3) (fp.sub RNE x9 x1)) (fp.add RNE (fp.sub RNE x6 x5) (fp.add RNE x0 x9))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE x12 x9) (fp.sub RNE x1 x6)) (fp.sub RNE (fp.mul RNE x10 x10) (fp.div RNE x12 x6))))
(assert (fp.lt (fp.div RNE (fp.neg x10) (fp.add RNE x2 x0)) (fp.add RNE (fp.div RNE x12 x4) (fp.sub RNE x12 x11))))
(assert (fp.eq (fp.sub RNE (fp.neg x9) (fp.add RNE x2 x13)) (fp.div RNE (fp.mul RNE x10 x9) (fp.sub RNE x4 x12))))
(assert (fp.gt (fp.neg (fp.neg x11)) (fp.sub RNE (fp.sub RNE x13 x10) (fp.sub RNE x8 x4))))
(assert (fp.gt (fp.div RNE (fp.div RNE x0 x5) (fp.add RNE x9 x2)) (fp.sub RNE (fp.neg x12) (fp.sub RNE x12 x11))))
(assert (fp.eq (fp.neg (fp.add RNE x7 x11)) (fp.mul RNE (fp.div RNE x1 x0) (fp.sub RNE x9 x10))))
(assert (fp.eq (fp.add RNE (fp.div RNE x8 x12) (fp.div RNE x5 x8)) (fp.div RNE (fp.mul RNE x5 x0) (fp.mul RNE x1 x13))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x7 x10) (fp.mul RNE x1 x2)) (fp.sub RNE (fp.div RNE x1 x11) (fp.sub RNE x13 x8))))
(assert (fp.eq (fp.neg (fp.add RNE x10 x8)) (fp.neg (fp.mul RNE x10 x12))))
(assert (fp.eq (fp.div RNE (fp.div RNE x12 x9) (fp.sub RNE x3 x12)) (fp.add RNE (fp.add RNE x12 x3) (fp.div RNE x12 x1))))
(assert (fp.gt (fp.add RNE (fp.add RNE x13 x8) (fp.mul RNE x6 x2)) (fp.mul RNE (fp.neg x12) (fp.add RNE x12 x12))))
(check-sat)
