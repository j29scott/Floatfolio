(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.neg x1) (fp.mul RNE x6 x8)))
(assert (fp.gt (fp.div RNE x3 x3) (fp.add RNE x6 x7)))
(assert (fp.lt (fp.mul RNE x2 x10) (fp.mul RNE x3 x6)))
(assert (fp.gt (fp.mul RNE x5 x9) (fp.sub RNE x2 x6)))
(assert (fp.geq (fp.mul RNE x3 x3) (fp.neg x0)))
(assert (fp.gt (fp.mul RNE x4 x6) (fp.sub RNE x5 x6)))
(assert (fp.geq (fp.mul RNE x4 x3) (fp.mul RNE x6 x2)))
(assert (fp.eq (fp.neg x8) (fp.add RNE x4 x5)))
(assert (fp.leq (fp.mul RNE x10 x3) (fp.add RNE x8 x2)))
(assert (fp.geq (fp.add RNE x10 x8) (fp.div RNE x1 x5)))
(assert (fp.eq (fp.mul RNE x10 x0) (fp.neg x8)))
(check-sat)
