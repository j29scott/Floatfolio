(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x13 x14) (fp.add RNE x6 x9)) (fp.div RNE (fp.mul RNE x1 x16) (fp.mul RNE x16 x11))))
(assert (fp.leq (fp.neg (fp.mul RNE x9 x17)) (fp.mul RNE (fp.div RNE x15 x0) (fp.div RNE x20 x19))))
(assert (fp.geq (fp.add RNE (fp.add RNE x16 x2) (fp.neg x6)) (fp.div RNE (fp.sub RNE x6 x7) (fp.mul RNE x9 x1))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x2 x9) (fp.mul RNE x8 x3)) (fp.div RNE (fp.mul RNE x6 x16) (fp.div RNE x14 x6))))
(assert (fp.leq (fp.div RNE (fp.add RNE x13 x5) (fp.div RNE x15 x4)) (fp.div RNE (fp.div RNE x12 x15) (fp.div RNE x11 x12))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x1 x5) (fp.sub RNE x6 x8)) (fp.div RNE (fp.div RNE x1 x18) (fp.neg x17))))
(assert (fp.lt (fp.mul RNE (fp.neg x1) (fp.div RNE x8 x19)) (fp.sub RNE (fp.div RNE x12 x18) (fp.neg x4))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x16 x19) (fp.add RNE x14 x18)) (fp.sub RNE (fp.sub RNE x7 x10) (fp.add RNE x6 x0))))
(assert (fp.lt (fp.mul RNE (fp.neg x8) (fp.sub RNE x18 x0)) (fp.sub RNE (fp.neg x4) (fp.add RNE x11 x17))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x6 x17) (fp.neg x15)) (fp.sub RNE (fp.mul RNE x20 x4) (fp.add RNE x18 x0))))
(assert (fp.lt (fp.div RNE (fp.div RNE x0 x20) (fp.sub RNE x6 x0)) (fp.sub RNE (fp.sub RNE x2 x0) (fp.div RNE x10 x6))))
(assert (fp.geq (fp.div RNE (fp.neg x18) (fp.sub RNE x20 x13)) (fp.add RNE (fp.sub RNE x4 x3) (fp.div RNE x1 x3))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x16 x7) (fp.add RNE x10 x16)) (fp.div RNE (fp.neg x13) (fp.sub RNE x20 x13))))
(check-sat)
