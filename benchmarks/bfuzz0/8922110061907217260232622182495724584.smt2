(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.add RNE x12 x7) (fp.sub RNE x3 x11)) (fp.div RNE (fp.div RNE x15 x6) (fp.mul RNE x8 x2))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x16 x5) (fp.mul RNE x14 x15)) (fp.neg (fp.mul RNE x8 x13))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x5 x10) (fp.neg x12)) (fp.neg (fp.sub RNE x10 x13))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x5 x13) (fp.neg x11)) (fp.sub RNE (fp.sub RNE x17 x11) (fp.sub RNE x17 x7))))
(assert (fp.lt (fp.div RNE (fp.sub RNE x15 x13) (fp.div RNE x11 x1)) (fp.div RNE (fp.sub RNE x12 x15) (fp.mul RNE x1 x6))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x8 x15) (fp.mul RNE x17 x12)) (fp.add RNE (fp.add RNE x16 x8) (fp.add RNE x4 x6))))
(assert (fp.geq (fp.add RNE (fp.add RNE x1 x0) (fp.sub RNE x17 x4)) (fp.sub RNE (fp.div RNE x6 x16) (fp.sub RNE x6 x14))))
(assert (fp.lt (fp.neg (fp.add RNE x16 x13)) (fp.mul RNE (fp.add RNE x15 x5) (fp.mul RNE x9 x3))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE x13 x6) (fp.sub RNE x1 x7)) (fp.mul RNE (fp.neg x18) (fp.sub RNE x15 x8))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x11 x13) (fp.mul RNE x9 x2)) (fp.div RNE (fp.sub RNE x14 x7) (fp.div RNE x0 x8))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x12 x6) (fp.div RNE x18 x9)) (fp.div RNE (fp.mul RNE x15 x10) (fp.neg x7))))
(check-sat)
