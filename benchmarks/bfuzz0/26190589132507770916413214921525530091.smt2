(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.add RNE (fp.add RNE x1 x6) (fp.neg x21)) (fp.neg (fp.mul RNE x17 x10))))
(assert (fp.eq (fp.neg (fp.add RNE x16 x13)) (fp.mul RNE (fp.add RNE x13 x1) (fp.div RNE x12 x15))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x12 x15) (fp.neg x21)) (fp.sub RNE (fp.add RNE x7 x12) (fp.sub RNE x2 x7))))
(assert (fp.eq (fp.sub RNE (fp.neg x7) (fp.div RNE x17 x9)) (fp.div RNE (fp.div RNE x19 x14) (fp.mul RNE x9 x0))))
(assert (fp.gt (fp.add RNE (fp.sub RNE x4 x12) (fp.sub RNE x4 x15)) (fp.add RNE (fp.mul RNE x13 x13) (fp.div RNE x20 x15))))
(assert (fp.leq (fp.sub RNE (fp.neg x8) (fp.sub RNE x6 x7)) (fp.add RNE (fp.sub RNE x3 x19) (fp.add RNE x2 x0))))
(assert (fp.geq (fp.add RNE (fp.div RNE x9 x14) (fp.sub RNE x3 x9)) (fp.mul RNE (fp.neg x4) (fp.sub RNE x0 x20))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x10 x21) (fp.add RNE x15 x3)) (fp.neg (fp.div RNE x11 x11))))
(assert (fp.gt (fp.mul RNE (fp.neg x3) (fp.add RNE x7 x12)) (fp.mul RNE (fp.div RNE x6 x15) (fp.add RNE x4 x13))))
(assert (fp.geq (fp.add RNE (fp.div RNE x4 x11) (fp.mul RNE x17 x6)) (fp.div RNE (fp.div RNE x0 x21) (fp.add RNE x4 x1))))
(assert (fp.lt (fp.div RNE (fp.div RNE x20 x6) (fp.neg x8)) (fp.mul RNE (fp.neg x5) (fp.neg x12))))
(assert (fp.gt (fp.mul RNE (fp.neg x7) (fp.mul RNE x5 x2)) (fp.sub RNE (fp.div RNE x12 x10) (fp.sub RNE x21 x7))))
(check-sat)
