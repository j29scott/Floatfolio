(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.div RNE (fp.mul RNE x18 x1) (fp.div RNE x8 x10)) (fp.sub RNE (fp.mul RNE x10 x10) (fp.div RNE x0 x14))))
(assert (fp.leq (fp.mul RNE (fp.neg x14) (fp.mul RNE x12 x5)) (fp.add RNE (fp.mul RNE x1 x16) (fp.div RNE x9 x2))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x11 x8) (fp.mul RNE x3 x7)) (fp.div RNE (fp.neg x13) (fp.neg x3))))
(assert (fp.lt (fp.div RNE (fp.div RNE x6 x8) (fp.add RNE x18 x20)) (fp.div RNE (fp.mul RNE x1 x16) (fp.div RNE x5 x4))))
(assert (fp.eq (fp.sub RNE (fp.neg x1) (fp.mul RNE x15 x17)) (fp.sub RNE (fp.neg x4) (fp.mul RNE x17 x9))))
(assert (fp.lt (fp.neg (fp.sub RNE x18 x15)) (fp.add RNE (fp.mul RNE x3 x9) (fp.sub RNE x2 x8))))
(assert (fp.leq (fp.add RNE (fp.div RNE x16 x7) (fp.sub RNE x8 x7)) (fp.sub RNE (fp.add RNE x13 x20) (fp.add RNE x1 x8))))
(assert (fp.geq (fp.neg (fp.neg x20)) (fp.sub RNE (fp.mul RNE x18 x3) (fp.div RNE x8 x10))))
(assert (fp.gt (fp.div RNE (fp.neg x0) (fp.add RNE x5 x20)) (fp.add RNE (fp.sub RNE x14 x18) (fp.add RNE x14 x18))))
(assert (fp.gt (fp.neg (fp.add RNE x9 x9)) (fp.sub RNE (fp.sub RNE x16 x15) (fp.neg x19))))
(assert (fp.gt (fp.mul RNE (fp.neg x6) (fp.div RNE x5 x2)) (fp.sub RNE (fp.neg x5) (fp.div RNE x2 x5))))
(check-sat)
