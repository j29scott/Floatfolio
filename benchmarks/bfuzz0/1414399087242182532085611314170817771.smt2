(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.neg x0) (fp.neg x8)))
(assert (fp.lt (fp.neg x2) (fp.mul RNE x0 x0)))
(assert (fp.eq (fp.mul RNE x7 x6) (fp.sub RNE x5 x5)))
(assert (fp.eq (fp.add RNE x3 x3) (fp.mul RNE x6 x5)))
(assert (fp.lt (fp.div RNE x1 x5) (fp.div RNE x5 x6)))
(assert (fp.eq (fp.div RNE x5 x7) (fp.neg x8)))
(assert (fp.leq (fp.sub RNE x5 x8) (fp.div RNE x5 x8)))
(assert (fp.gt (fp.neg x8) (fp.mul RNE x3 x3)))
(assert (fp.gt (fp.mul RNE x0 x4) (fp.sub RNE x0 x5)))
(assert (fp.geq (fp.div RNE x3 x1) (fp.sub RNE x8 x6)))
(assert (fp.leq (fp.add RNE x3 x5) (fp.mul RNE x7 x7)))
(assert (fp.gt (fp.sub RNE x0 x0) (fp.mul RNE x2 x0)))
(assert (fp.eq (fp.neg x8) (fp.sub RNE x1 x4)))
(check-sat)
