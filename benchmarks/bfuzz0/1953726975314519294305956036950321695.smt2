(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.neg (fp.mul RNE (fp.div RNE (fp.sub RNE x7 x6) (fp.mul RNE x9 x20)) (fp.mul RNE (fp.mul RNE x7 x8) (fp.sub RNE x18 x7)))) (fp.add RNE (fp.neg (fp.sub RNE (fp.add RNE x18 x12) (fp.mul RNE x7 x10))) (fp.sub RNE (fp.neg (fp.mul RNE x13 x2)) (fp.mul RNE (fp.add RNE x13 x11) (fp.div RNE x2 x14))))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.div RNE (fp.mul RNE x19 x13) (fp.div RNE x18 x7))) (fp.div RNE (fp.neg (fp.div RNE x17 x2)) (fp.sub RNE (fp.div RNE x19 x20) (fp.neg x2)))) (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x17 x0) (fp.sub RNE x18 x3)) (fp.neg (fp.neg x16))) (fp.sub RNE (fp.add RNE (fp.add RNE x3 x18) (fp.sub RNE x10 x9)) (fp.div RNE (fp.mul RNE x14 x4) (fp.sub RNE x3 x19))))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.neg (fp.mul RNE x14 x12))) (fp.add RNE (fp.mul RNE (fp.div RNE x19 x5) (fp.neg x6)) (fp.neg (fp.neg x19)))) (fp.div RNE (fp.sub RNE (fp.add RNE (fp.add RNE x17 x17) (fp.add RNE x5 x19)) (fp.mul RNE (fp.neg x6) (fp.neg x12))) (fp.add RNE (fp.add RNE (fp.mul RNE x19 x10) (fp.div RNE x10 x20)) (fp.add RNE (fp.mul RNE x3 x14) (fp.neg x9))))))
(assert (fp.gt (fp.neg (fp.add RNE (fp.div RNE (fp.div RNE x4 x17) (fp.sub RNE x3 x0)) (fp.sub RNE (fp.mul RNE x11 x18) (fp.neg x6)))) (fp.neg (fp.neg (fp.div RNE (fp.div RNE x9 x1) (fp.div RNE x0 x4))))))
(check-sat)
