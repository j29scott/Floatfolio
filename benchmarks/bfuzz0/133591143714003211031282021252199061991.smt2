(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.neg (fp.neg (fp.add RNE x2 x7))) (fp.sub RNE (fp.mul RNE (fp.add RNE x7 x7) (fp.neg x7)) (fp.mul RNE (fp.add RNE x7 x4) (fp.neg x9)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.add RNE x10 x5) (fp.neg x5)) (fp.add RNE (fp.add RNE x2 x4) (fp.neg x12))) (fp.div RNE (fp.neg (fp.div RNE x9 x5)) (fp.mul RNE (fp.add RNE x3 x5) (fp.mul RNE x2 x10)))))
(assert (fp.leq (fp.neg (fp.sub RNE (fp.sub RNE x12 x6) (fp.div RNE x8 x12))) (fp.div RNE (fp.neg (fp.neg x1)) (fp.add RNE (fp.mul RNE x2 x4) (fp.add RNE x0 x2)))))
(assert (fp.eq (fp.neg (fp.neg (fp.add RNE x4 x7))) (fp.sub RNE (fp.mul RNE (fp.div RNE x2 x6) (fp.add RNE x4 x12)) (fp.mul RNE (fp.sub RNE x7 x5) (fp.mul RNE x11 x1)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.neg x2)) (fp.mul RNE (fp.add RNE x8 x3) (fp.div RNE x10 x6))) (fp.add RNE (fp.mul RNE (fp.mul RNE x7 x5) (fp.neg x6)) (fp.div RNE (fp.sub RNE x2 x5) (fp.neg x1)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.sub RNE x6 x5) (fp.add RNE x8 x3))) (fp.add RNE (fp.sub RNE (fp.mul RNE x10 x5) (fp.div RNE x2 x9)) (fp.sub RNE (fp.add RNE x6 x6) (fp.mul RNE x8 x10)))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE (fp.neg x0) (fp.sub RNE x4 x12)) (fp.mul RNE (fp.div RNE x9 x1) (fp.sub RNE x0 x2))) (fp.neg (fp.add RNE (fp.add RNE x10 x12) (fp.sub RNE x11 x2)))))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.add RNE x3 x4) (fp.add RNE x12 x8)) (fp.add RNE (fp.add RNE x10 x3) (fp.add RNE x6 x1))) (fp.sub RNE (fp.add RNE (fp.sub RNE x10 x0) (fp.mul RNE x1 x11)) (fp.sub RNE (fp.sub RNE x9 x1) (fp.mul RNE x7 x1)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.mul RNE x11 x11) (fp.div RNE x10 x12))) (fp.neg (fp.sub RNE (fp.add RNE x5 x8) (fp.neg x0)))))
(check-sat)
