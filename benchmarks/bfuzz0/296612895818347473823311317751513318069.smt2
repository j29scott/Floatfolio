(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.add RNE (fp.div RNE x7 x7) (fp.neg x4)) (fp.neg (fp.add RNE x2 x4))))
(assert (fp.gt (fp.add RNE (fp.add RNE x5 x10) (fp.neg x7)) (fp.div RNE (fp.add RNE x6 x1) (fp.sub RNE x8 x6))))
(assert (fp.gt (fp.div RNE (fp.add RNE x7 x4) (fp.add RNE x10 x5)) (fp.add RNE (fp.add RNE x10 x7) (fp.div RNE x8 x4))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x10 x10) (fp.add RNE x7 x10)) (fp.mul RNE (fp.mul RNE x2 x8) (fp.add RNE x2 x10))))
(assert (fp.eq (fp.neg (fp.mul RNE x7 x5)) (fp.add RNE (fp.sub RNE x7 x7) (fp.sub RNE x7 x1))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x7 x10) (fp.mul RNE x9 x1)) (fp.neg (fp.div RNE x10 x5))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x3 x8) (fp.neg x10)) (fp.sub RNE (fp.neg x10) (fp.add RNE x1 x0))))
(assert (fp.lt (fp.add RNE (fp.div RNE x5 x8) (fp.mul RNE x5 x0)) (fp.sub RNE (fp.neg x4) (fp.add RNE x9 x2))))
(assert (fp.leq (fp.neg (fp.div RNE x7 x7)) (fp.add RNE (fp.neg x10) (fp.neg x4))))
(assert (fp.leq (fp.div RNE (fp.mul RNE x5 x8) (fp.sub RNE x10 x3)) (fp.neg (fp.neg x8))))
(assert (fp.eq (fp.div RNE (fp.neg x7) (fp.sub RNE x8 x0)) (fp.div RNE (fp.add RNE x7 x2) (fp.sub RNE x8 x10))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE x1 x6) (fp.sub RNE x4 x10)) (fp.neg (fp.sub RNE x10 x0))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x10 x9) (fp.mul RNE x2 x5)) (fp.add RNE (fp.div RNE x6 x6) (fp.neg x1))))
(assert (fp.geq (fp.neg (fp.sub RNE x9 x3)) (fp.div RNE (fp.div RNE x8 x10) (fp.add RNE x6 x3))))
(assert (fp.leq (fp.mul RNE (fp.div RNE x2 x6) (fp.mul RNE x10 x4)) (fp.neg (fp.sub RNE x9 x7))))
(assert (fp.leq (fp.neg (fp.mul RNE x7 x7)) (fp.neg (fp.add RNE x1 x5))))
(assert (fp.eq (fp.neg (fp.div RNE x8 x3)) (fp.neg (fp.sub RNE x2 x2))))
(check-sat)
