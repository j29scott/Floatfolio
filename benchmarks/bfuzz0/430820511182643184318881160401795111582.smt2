(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.sub RNE x11 x7) (fp.neg x22)) (fp.div RNE (fp.neg x5) (fp.mul RNE x23 x22))) (fp.sub RNE (fp.div RNE (fp.add RNE x24 x18) (fp.add RNE x23 x7)) (fp.sub RNE (fp.sub RNE x6 x25) (fp.add RNE x3 x10)))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.neg x19) (fp.add RNE x6 x23)) (fp.add RNE (fp.sub RNE x6 x3) (fp.neg x17))) (fp.add RNE (fp.neg (fp.add RNE x15 x10)) (fp.sub RNE (fp.sub RNE x16 x2) (fp.sub RNE x2 x6)))))
(assert (fp.gt (fp.neg (fp.div RNE (fp.neg x19) (fp.div RNE x15 x4))) (fp.sub RNE (fp.mul RNE (fp.add RNE x2 x1) (fp.add RNE x7 x17)) (fp.sub RNE (fp.mul RNE x19 x16) (fp.div RNE x7 x26)))))
(assert (fp.lt (fp.sub RNE (fp.add RNE (fp.div RNE x26 x2) (fp.neg x12)) (fp.sub RNE (fp.div RNE x22 x10) (fp.mul RNE x14 x17))) (fp.neg (fp.div RNE (fp.sub RNE x17 x8) (fp.mul RNE x16 x13)))))
(check-sat)
