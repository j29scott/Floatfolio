(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.div RNE x11 x13) (fp.add RNE x2 x0)) (fp.mul RNE (fp.div RNE x10 x9) (fp.mul RNE x9 x12))) (fp.neg (fp.add RNE (fp.sub RNE x7 x14) (fp.div RNE x0 x7)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.mul RNE x5 x6) (fp.neg x1)) (fp.neg (fp.sub RNE x3 x9))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x12 x12) (fp.mul RNE x7 x1)) (fp.add RNE (fp.div RNE x6 x13) (fp.mul RNE x2 x2)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.add RNE x12 x12) (fp.neg x12)) (fp.sub RNE (fp.add RNE x5 x12) (fp.add RNE x3 x7))) (fp.add RNE (fp.div RNE (fp.neg x14) (fp.sub RNE x6 x3)) (fp.mul RNE (fp.add RNE x13 x13) (fp.mul RNE x3 x1)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.mul RNE x10 x2)) (fp.sub RNE (fp.div RNE x7 x8) (fp.add RNE x7 x14))) (fp.sub RNE (fp.add RNE (fp.mul RNE x11 x2) (fp.div RNE x6 x7)) (fp.neg (fp.mul RNE x3 x12)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.neg x10)) (fp.div RNE (fp.mul RNE x6 x11) (fp.sub RNE x7 x15))) (fp.div RNE (fp.neg (fp.sub RNE x8 x2)) (fp.add RNE (fp.add RNE x11 x3) (fp.div RNE x5 x7)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.mul RNE x14 x2) (fp.div RNE x11 x7)) (fp.div RNE (fp.mul RNE x8 x11) (fp.add RNE x3 x11))) (fp.div RNE (fp.mul RNE (fp.div RNE x3 x11) (fp.mul RNE x8 x9)) (fp.add RNE (fp.sub RNE x7 x4) (fp.sub RNE x8 x14)))))
(assert (fp.lt (fp.neg (fp.div RNE (fp.mul RNE x13 x7) (fp.mul RNE x6 x7))) (fp.add RNE (fp.sub RNE (fp.add RNE x13 x4) (fp.div RNE x14 x10)) (fp.div RNE (fp.div RNE x14 x9) (fp.mul RNE x8 x12)))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.div RNE x1 x6) (fp.sub RNE x5 x1)) (fp.neg (fp.add RNE x11 x8))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x6 x15) (fp.mul RNE x5 x11)) (fp.neg (fp.neg x15)))))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.div RNE x10 x2) (fp.add RNE x10 x7)) (fp.sub RNE (fp.div RNE x8 x10) (fp.div RNE x4 x10))) (fp.add RNE (fp.mul RNE (fp.neg x7) (fp.neg x13)) (fp.mul RNE (fp.neg x11) (fp.neg x7)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.mul RNE x0 x7) (fp.neg x12)) (fp.add RNE (fp.neg x9) (fp.div RNE x3 x14))) (fp.mul RNE (fp.div RNE (fp.add RNE x14 x14) (fp.div RNE x0 x1)) (fp.add RNE (fp.add RNE x7 x4) (fp.mul RNE x10 x14)))))
(check-sat)
