(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.mul RNE x8 x12) (fp.add RNE x2 x10)) (fp.div RNE (fp.sub RNE x9 x12) (fp.neg x1))) (fp.div RNE (fp.div RNE (fp.sub RNE x5 x10) (fp.mul RNE x3 x5)) (fp.sub RNE (fp.sub RNE x1 x11) (fp.sub RNE x7 x3)))))
(assert (fp.geq (fp.neg (fp.add RNE (fp.add RNE x8 x7) (fp.sub RNE x2 x6))) (fp.div RNE (fp.div RNE (fp.mul RNE x7 x9) (fp.sub RNE x10 x8)) (fp.div RNE (fp.add RNE x1 x10) (fp.div RNE x11 x12)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.div RNE x4 x3)) (fp.sub RNE (fp.div RNE x9 x5) (fp.div RNE x9 x12))) (fp.div RNE (fp.mul RNE (fp.div RNE x11 x3) (fp.div RNE x1 x8)) (fp.mul RNE (fp.neg x0) (fp.sub RNE x6 x1)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.neg x4) (fp.mul RNE x9 x8)) (fp.add RNE (fp.div RNE x11 x7) (fp.mul RNE x0 x2))) (fp.add RNE (fp.div RNE (fp.add RNE x1 x0) (fp.add RNE x1 x0)) (fp.div RNE (fp.mul RNE x6 x9) (fp.div RNE x9 x11)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.mul RNE x0 x5) (fp.mul RNE x9 x8)) (fp.add RNE (fp.mul RNE x6 x12) (fp.neg x0))) (fp.sub RNE (fp.div RNE (fp.div RNE x1 x1) (fp.neg x10)) (fp.div RNE (fp.div RNE x11 x9) (fp.sub RNE x7 x9)))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.add RNE x12 x0) (fp.div RNE x11 x7)) (fp.add RNE (fp.add RNE x6 x5) (fp.sub RNE x2 x8))) (fp.add RNE (fp.div RNE (fp.neg x4) (fp.mul RNE x5 x2)) (fp.mul RNE (fp.neg x10) (fp.mul RNE x7 x10)))))
(assert (fp.gt (fp.div RNE (fp.mul RNE (fp.div RNE x9 x0) (fp.sub RNE x2 x8)) (fp.add RNE (fp.neg x7) (fp.add RNE x12 x1))) (fp.add RNE (fp.div RNE (fp.mul RNE x11 x6) (fp.add RNE x0 x0)) (fp.neg (fp.neg x2)))))
(assert (fp.eq (fp.neg (fp.div RNE (fp.sub RNE x8 x1) (fp.neg x2))) (fp.div RNE (fp.div RNE (fp.add RNE x8 x2) (fp.mul RNE x3 x1)) (fp.mul RNE (fp.add RNE x4 x10) (fp.mul RNE x9 x9)))))
(check-sat)
