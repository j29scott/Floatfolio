(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.div RNE x8 x21) (fp.mul RNE x11 x3)))
(assert (fp.eq (fp.add RNE x22 x3) (fp.sub RNE x21 x14)))
(assert (fp.gt (fp.sub RNE x1 x13) (fp.neg x15)))
(assert (fp.lt (fp.mul RNE x10 x16) (fp.div RNE x7 x4)))
(assert (fp.leq (fp.neg x6) (fp.sub RNE x8 x24)))
(assert (fp.leq (fp.neg x2) (fp.sub RNE x17 x1)))
(assert (fp.geq (fp.div RNE x12 x5) (fp.mul RNE x16 x11)))
(assert (fp.leq (fp.sub RNE x6 x17) (fp.add RNE x13 x22)))
(assert (fp.geq (fp.add RNE x13 x13) (fp.div RNE x16 x9)))
(assert (fp.lt (fp.sub RNE x11 x6) (fp.div RNE x21 x19)))
(assert (fp.eq (fp.mul RNE x21 x11) (fp.div RNE x14 x12)))
(assert (fp.leq (fp.mul RNE x8 x6) (fp.add RNE x19 x20)))
(assert (fp.lt (fp.add RNE x4 x23) (fp.sub RNE x22 x21)))
(assert (fp.eq (fp.div RNE x19 x0) (fp.div RNE x5 x19)))
(assert (fp.leq (fp.mul RNE x23 x0) (fp.div RNE x13 x17)))
(assert (fp.gt (fp.mul RNE x4 x25) (fp.add RNE x9 x9)))
(assert (fp.eq (fp.mul RNE x5 x10) (fp.sub RNE x25 x9)))
(assert (fp.eq (fp.sub RNE x24 x14) (fp.mul RNE x4 x1)))
(check-sat)
