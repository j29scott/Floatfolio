(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x11 x21) (fp.mul RNE x2 x12)) (fp.add RNE (fp.mul RNE x5 x11) (fp.neg x25))) (fp.add RNE (fp.div RNE (fp.add RNE x15 x21) (fp.div RNE x22 x4)) (fp.mul RNE (fp.mul RNE x20 x13) (fp.add RNE x13 x13)))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.sub RNE x5 x1) (fp.div RNE x10 x25)) (fp.add RNE (fp.div RNE x24 x5) (fp.sub RNE x6 x21))) (fp.sub RNE (fp.neg (fp.add RNE x21 x21)) (fp.mul RNE (fp.div RNE x20 x18) (fp.mul RNE x0 x13))))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.neg x3) (fp.sub RNE x18 x4)) (fp.sub RNE (fp.add RNE x1 x6) (fp.mul RNE x8 x6))) (fp.add RNE (fp.div RNE (fp.mul RNE x17 x19) (fp.div RNE x2 x2)) (fp.div RNE (fp.neg x25) (fp.mul RNE x4 x12)))) (fp.neg (fp.sub RNE (fp.div RNE (fp.add RNE x5 x23) (fp.mul RNE x7 x2)) (fp.sub RNE (fp.neg x15) (fp.div RNE x19 x8))))))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.sub RNE (fp.add RNE x4 x3) (fp.sub RNE x18 x19)) (fp.div RNE (fp.div RNE x9 x17) (fp.neg x9))) (fp.div RNE (fp.sub RNE (fp.neg x20) (fp.mul RNE x23 x24)) (fp.neg (fp.sub RNE x2 x13)))) (fp.div RNE (fp.div RNE (fp.neg (fp.sub RNE x4 x14)) (fp.div RNE (fp.div RNE x16 x20) (fp.add RNE x21 x7))) (fp.div RNE (fp.div RNE (fp.div RNE x4 x2) (fp.mul RNE x16 x23)) (fp.add RNE (fp.mul RNE x13 x1) (fp.div RNE x3 x13))))))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.add RNE (fp.mul RNE x25 x21) (fp.div RNE x1 x14)) (fp.div RNE (fp.mul RNE x22 x20) (fp.add RNE x4 x2))) (fp.add RNE (fp.mul RNE (fp.mul RNE x21 x10) (fp.mul RNE x5 x1)) (fp.sub RNE (fp.add RNE x4 x9) (fp.mul RNE x14 x4)))) (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE x12 x12) (fp.sub RNE x22 x3)) (fp.mul RNE (fp.div RNE x23 x21) (fp.sub RNE x7 x1))) (fp.sub RNE (fp.div RNE (fp.div RNE x12 x0) (fp.sub RNE x0 x4)) (fp.sub RNE (fp.sub RNE x13 x21) (fp.mul RNE x5 x8))))))
(assert (fp.gt (fp.neg (fp.neg (fp.add RNE (fp.add RNE x24 x12) (fp.mul RNE x1 x8)))) (fp.neg (fp.mul RNE (fp.div RNE (fp.mul RNE x1 x24) (fp.mul RNE x12 x22)) (fp.sub RNE (fp.mul RNE x17 x19) (fp.sub RNE x24 x3))))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x21 x21) (fp.mul RNE x24 x6)) (fp.neg (fp.add RNE x22 x5))) (fp.div RNE (fp.mul RNE (fp.neg x19) (fp.neg x11)) (fp.mul RNE (fp.sub RNE x2 x8) (fp.mul RNE x21 x2)))) (fp.add RNE (fp.div RNE (fp.mul RNE (fp.neg x2) (fp.sub RNE x15 x0)) (fp.mul RNE (fp.add RNE x13 x23) (fp.div RNE x2 x25))) (fp.add RNE (fp.sub RNE (fp.div RNE x12 x13) (fp.div RNE x1 x22)) (fp.mul RNE (fp.div RNE x11 x22) (fp.div RNE x24 x5))))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE (fp.neg (fp.div RNE x0 x18)) (fp.div RNE (fp.add RNE x23 x10) (fp.div RNE x12 x11))) (fp.mul RNE (fp.neg (fp.div RNE x20 x12)) (fp.mul RNE (fp.add RNE x23 x19) (fp.sub RNE x19 x0)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.sub RNE x25 x20) (fp.neg x25)) (fp.add RNE (fp.add RNE x16 x0) (fp.mul RNE x13 x0))) (fp.div RNE (fp.mul RNE (fp.sub RNE x8 x15) (fp.mul RNE x25 x4)) (fp.add RNE (fp.div RNE x24 x9) (fp.div RNE x6 x0))))))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.mul RNE (fp.neg x13) (fp.add RNE x0 x12)) (fp.neg (fp.neg x0))) (fp.neg (fp.div RNE (fp.sub RNE x25 x5) (fp.add RNE x21 x0)))) (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.add RNE x10 x8) (fp.neg x24)) (fp.add RNE (fp.neg x11) (fp.add RNE x12 x23))) (fp.sub RNE (fp.add RNE (fp.add RNE x7 x21) (fp.mul RNE x4 x21)) (fp.neg (fp.div RNE x19 x0))))))
(check-sat)
