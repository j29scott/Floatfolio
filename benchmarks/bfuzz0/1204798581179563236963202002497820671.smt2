(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.neg (fp.mul RNE x12 x4)) (fp.sub RNE (fp.sub RNE x11 x0) (fp.div RNE x12 x0))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x6 x3) (fp.add RNE x12 x3)) (fp.mul RNE (fp.mul RNE x10 x12) (fp.neg x12))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x3 x6) (fp.neg x5)) (fp.mul RNE (fp.add RNE x8 x9) (fp.div RNE x7 x5))))
(assert (fp.leq (fp.neg (fp.mul RNE x1 x8)) (fp.sub RNE (fp.sub RNE x5 x2) (fp.mul RNE x11 x11))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x12 x9) (fp.neg x0)) (fp.sub RNE (fp.add RNE x12 x3) (fp.div RNE x1 x9))))
(assert (fp.gt (fp.div RNE (fp.mul RNE x2 x9) (fp.add RNE x8 x3)) (fp.add RNE (fp.sub RNE x5 x0) (fp.mul RNE x7 x12))))
(assert (fp.leq (fp.neg (fp.neg x4)) (fp.mul RNE (fp.sub RNE x5 x11) (fp.add RNE x4 x1))))
(assert (fp.eq (fp.div RNE (fp.neg x4) (fp.div RNE x12 x2)) (fp.add RNE (fp.sub RNE x9 x8) (fp.mul RNE x1 x5))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x7 x6) (fp.mul RNE x4 x1)) (fp.add RNE (fp.add RNE x8 x2) (fp.div RNE x11 x7))))
(assert (fp.gt (fp.div RNE (fp.neg x7) (fp.add RNE x6 x9)) (fp.div RNE (fp.sub RNE x6 x8) (fp.mul RNE x12 x11))))
(assert (fp.gt (fp.neg (fp.div RNE x7 x11)) (fp.mul RNE (fp.add RNE x3 x0) (fp.sub RNE x11 x12))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x8 x11) (fp.sub RNE x8 x3)) (fp.add RNE (fp.add RNE x5 x7) (fp.neg x6))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x10 x12) (fp.div RNE x2 x10)) (fp.div RNE (fp.add RNE x2 x1) (fp.sub RNE x3 x7))))
(assert (fp.lt (fp.mul RNE (fp.neg x5) (fp.neg x3)) (fp.div RNE (fp.sub RNE x0 x6) (fp.mul RNE x6 x2))))
(assert (fp.geq (fp.sub RNE (fp.neg x2) (fp.add RNE x1 x8)) (fp.div RNE (fp.div RNE x8 x3) (fp.neg x6))))
(assert (fp.eq (fp.mul RNE (fp.neg x3) (fp.mul RNE x2 x4)) (fp.neg (fp.add RNE x4 x10))))
(check-sat)
