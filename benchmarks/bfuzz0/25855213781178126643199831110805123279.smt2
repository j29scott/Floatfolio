(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.sub RNE (fp.sub RNE x3 x0) (fp.add RNE x2 x5)) (fp.div RNE (fp.mul RNE x15 x14) (fp.add RNE x12 x7)))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.sub RNE x6 x1) (fp.div RNE x3 x0)) (fp.mul RNE (fp.add RNE x9 x12) (fp.sub RNE x2 x6))) (fp.div RNE (fp.div RNE (fp.neg x13) (fp.div RNE x11 x3)) (fp.neg (fp.mul RNE x15 x8))))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.add RNE (fp.sub RNE x14 x9) (fp.neg x13)) (fp.neg (fp.mul RNE x4 x3))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x3 x1) (fp.sub RNE x9 x9)) (fp.mul RNE (fp.div RNE x2 x4) (fp.mul RNE x13 x11)))) (fp.div RNE (fp.neg (fp.neg (fp.mul RNE x6 x13))) (fp.sub RNE (fp.add RNE (fp.sub RNE x6 x14) (fp.mul RNE x14 x13)) (fp.div RNE (fp.sub RNE x15 x4) (fp.div RNE x9 x13))))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.add RNE (fp.neg x12) (fp.neg x2)) (fp.div RNE (fp.sub RNE x11 x8) (fp.neg x8))) (fp.neg (fp.neg (fp.neg x14)))) (fp.sub RNE (fp.add RNE (fp.neg (fp.add RNE x14 x3)) (fp.div RNE (fp.neg x11) (fp.mul RNE x11 x14))) (fp.mul RNE (fp.div RNE (fp.add RNE x2 x14) (fp.add RNE x2 x10)) (fp.add RNE (fp.sub RNE x4 x1) (fp.sub RNE x6 x5))))))
(assert (fp.eq (fp.neg (fp.add RNE (fp.neg (fp.sub RNE x0 x3)) (fp.sub RNE (fp.div RNE x14 x15) (fp.add RNE x1 x8)))) (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.sub RNE x10 x7) (fp.sub RNE x11 x12)) (fp.div RNE (fp.sub RNE x12 x11) (fp.add RNE x0 x10))) (fp.neg (fp.neg (fp.div RNE x0 x4))))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.neg (fp.div RNE x1 x14))) (fp.add RNE (fp.neg (fp.mul RNE x5 x14)) (fp.neg (fp.neg x10)))) (fp.neg (fp.neg (fp.add RNE (fp.add RNE x8 x9) (fp.add RNE x6 x10))))))
(check-sat)
