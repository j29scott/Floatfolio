(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.eq (fp.mul RNE (fp.add RNE x6 x0) (fp.div RNE x11 x9)) (fp.neg (fp.add RNE x4 x16))))
(assert (fp.leq (fp.neg (fp.add RNE x9 x21)) (fp.div RNE (fp.sub RNE x1 x0) (fp.mul RNE x11 x15))))
(assert (fp.geq (fp.div RNE (fp.add RNE x5 x17) (fp.sub RNE x4 x17)) (fp.neg (fp.div RNE x9 x5))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x1 x6) (fp.add RNE x18 x11)) (fp.sub RNE (fp.div RNE x1 x6) (fp.sub RNE x1 x17))))
(assert (fp.leq (fp.neg (fp.sub RNE x19 x1)) (fp.neg (fp.sub RNE x6 x18))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x10 x3) (fp.mul RNE x6 x10)) (fp.add RNE (fp.sub RNE x19 x2) (fp.sub RNE x5 x19))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE x2 x16) (fp.add RNE x15 x17)) (fp.mul RNE (fp.neg x19) (fp.div RNE x6 x0))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x15 x16) (fp.add RNE x19 x5)) (fp.mul RNE (fp.neg x5) (fp.neg x15))))
(assert (fp.leq (fp.add RNE (fp.mul RNE x14 x18) (fp.div RNE x2 x20)) (fp.mul RNE (fp.add RNE x20 x0) (fp.sub RNE x9 x12))))
(assert (fp.gt (fp.add RNE (fp.add RNE x20 x0) (fp.div RNE x6 x5)) (fp.add RNE (fp.sub RNE x5 x11) (fp.add RNE x19 x8))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x7 x5) (fp.neg x4)) (fp.div RNE (fp.add RNE x5 x19) (fp.mul RNE x2 x9))))
(check-sat)
