(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.neg (fp.add RNE (fp.mul RNE (fp.neg x6) (fp.div RNE x6 x12)) (fp.neg (fp.add RNE x7 x12)))) (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.div RNE x21 x18) (fp.sub RNE x11 x2)) (fp.add RNE (fp.mul RNE x9 x8) (fp.mul RNE x7 x1))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x5 x20) (fp.mul RNE x12 x16)) (fp.sub RNE (fp.div RNE x10 x18) (fp.div RNE x5 x22))))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.div RNE (fp.mul RNE x19 x9) (fp.div RNE x19 x16)) (fp.mul RNE (fp.add RNE x11 x13) (fp.neg x8))) (fp.neg (fp.neg (fp.add RNE x8 x5)))) (fp.mul RNE (fp.mul RNE (fp.neg (fp.mul RNE x14 x6)) (fp.neg (fp.div RNE x21 x0))) (fp.div RNE (fp.add RNE (fp.div RNE x7 x19) (fp.div RNE x8 x6)) (fp.add RNE (fp.add RNE x14 x21) (fp.div RNE x2 x15))))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.mul RNE (fp.mul RNE x22 x13) (fp.neg x13)) (fp.sub RNE (fp.neg x21) (fp.sub RNE x11 x3)))) (fp.neg (fp.div RNE (fp.div RNE (fp.div RNE x24 x2) (fp.add RNE x18 x24)) (fp.mul RNE (fp.add RNE x5 x0) (fp.div RNE x11 x5))))))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.mul RNE (fp.mul RNE x0 x13) (fp.add RNE x21 x8))) (fp.div RNE (fp.mul RNE (fp.sub RNE x17 x17) (fp.mul RNE x22 x17)) (fp.mul RNE (fp.neg x12) (fp.div RNE x4 x11)))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x9 x23) (fp.add RNE x15 x5)) (fp.mul RNE (fp.sub RNE x14 x22) (fp.mul RNE x14 x8))) (fp.sub RNE (fp.div RNE (fp.neg x15) (fp.mul RNE x23 x8)) (fp.mul RNE (fp.neg x5) (fp.mul RNE x20 x13))))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE (fp.div RNE x24 x22) (fp.add RNE x20 x4))) (fp.add RNE (fp.add RNE (fp.sub RNE x18 x15) (fp.neg x14)) (fp.sub RNE (fp.add RNE x12 x1) (fp.div RNE x13 x17)))) (fp.mul RNE (fp.neg (fp.div RNE (fp.sub RNE x13 x12) (fp.sub RNE x15 x15))) (fp.add RNE (fp.mul RNE (fp.mul RNE x15 x11) (fp.neg x9)) (fp.mul RNE (fp.div RNE x23 x3) (fp.sub RNE x17 x23))))))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x6 x7) (fp.div RNE x11 x8)) (fp.add RNE (fp.add RNE x20 x19) (fp.sub RNE x12 x8))) (fp.mul RNE (fp.add RNE (fp.add RNE x17 x16) (fp.neg x16)) (fp.neg (fp.neg x3)))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.sub RNE x12 x11) (fp.mul RNE x17 x8)) (fp.add RNE (fp.div RNE x5 x8) (fp.neg x18))) (fp.neg (fp.mul RNE (fp.mul RNE x5 x1) (fp.mul RNE x15 x21))))))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x6 x15) (fp.add RNE x16 x21)) (fp.div RNE (fp.sub RNE x20 x23) (fp.neg x4))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x20 x12) (fp.div RNE x14 x15)) (fp.sub RNE (fp.div RNE x9 x11) (fp.sub RNE x7 x9)))) (fp.neg (fp.sub RNE (fp.sub RNE (fp.neg x5) (fp.mul RNE x2 x4)) (fp.div RNE (fp.div RNE x22 x14) (fp.sub RNE x7 x17))))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x20 x7) (fp.mul RNE x12 x11)) (fp.div RNE (fp.mul RNE x12 x9) (fp.div RNE x11 x14))) (fp.neg (fp.neg (fp.mul RNE x19 x18)))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.sub RNE x24 x2) (fp.neg x4)) (fp.mul RNE (fp.div RNE x7 x18) (fp.div RNE x8 x23))) (fp.mul RNE (fp.mul RNE (fp.sub RNE x22 x10) (fp.mul RNE x8 x7)) (fp.mul RNE (fp.div RNE x19 x0) (fp.add RNE x5 x4))))))
(check-sat)
