(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.add RNE x11 x13) (fp.add RNE x10 x11)) (fp.div RNE (fp.add RNE x13 x13) (fp.sub RNE x14 x1))) (fp.add RNE (fp.add RNE (fp.div RNE x6 x16) (fp.add RNE x15 x11)) (fp.sub RNE (fp.sub RNE x16 x3) (fp.sub RNE x12 x10)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.sub RNE x9 x0) (fp.add RNE x18 x3)) (fp.sub RNE (fp.div RNE x8 x9) (fp.add RNE x2 x3))) (fp.div RNE (fp.add RNE (fp.mul RNE x7 x0) (fp.add RNE x14 x3)) (fp.mul RNE (fp.mul RNE x9 x9) (fp.div RNE x16 x5)))))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.add RNE x12 x4) (fp.neg x13)) (fp.mul RNE (fp.mul RNE x16 x11) (fp.add RNE x10 x6))) (fp.mul RNE (fp.neg (fp.add RNE x11 x19)) (fp.add RNE (fp.add RNE x13 x6) (fp.sub RNE x15 x13)))))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.neg x0)) (fp.sub RNE (fp.div RNE x19 x10) (fp.mul RNE x7 x16))) (fp.add RNE (fp.mul RNE (fp.div RNE x10 x1) (fp.add RNE x0 x5)) (fp.div RNE (fp.div RNE x14 x18) (fp.sub RNE x16 x12)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.mul RNE x12 x3) (fp.mul RNE x4 x1))) (fp.div RNE (fp.div RNE (fp.sub RNE x16 x15) (fp.mul RNE x2 x9)) (fp.sub RNE (fp.add RNE x10 x11) (fp.neg x12)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.add RNE x13 x18) (fp.add RNE x18 x0)) (fp.div RNE (fp.div RNE x13 x8) (fp.div RNE x2 x6))) (fp.div RNE (fp.add RNE (fp.sub RNE x13 x9) (fp.mul RNE x9 x12)) (fp.mul RNE (fp.neg x6) (fp.sub RNE x10 x3)))))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.sub RNE x7 x10) (fp.mul RNE x2 x11)) (fp.neg (fp.add RNE x5 x12))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x13 x4) (fp.sub RNE x3 x3)) (fp.add RNE (fp.div RNE x1 x8) (fp.sub RNE x15 x17)))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.neg x10) (fp.neg x12)) (fp.neg (fp.div RNE x7 x1))) (fp.div RNE (fp.sub RNE (fp.neg x15) (fp.add RNE x11 x19)) (fp.div RNE (fp.sub RNE x6 x7) (fp.sub RNE x0 x12)))))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.sub RNE x4 x7) (fp.add RNE x15 x2)) (fp.mul RNE (fp.div RNE x16 x6) (fp.add RNE x17 x1))) (fp.sub RNE (fp.neg (fp.sub RNE x2 x1)) (fp.div RNE (fp.div RNE x13 x14) (fp.sub RNE x12 x8)))))
(check-sat)
