(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.add RNE (fp.sub RNE (fp.neg x2) (fp.sub RNE x11 x10)) (fp.neg (fp.neg x8))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x10 x5) (fp.mul RNE x10 x11)) (fp.neg (fp.add RNE x10 x2)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.sub RNE x4 x3) (fp.mul RNE x7 x7)) (fp.sub RNE (fp.neg x8) (fp.sub RNE x4 x8))) (fp.sub RNE (fp.neg (fp.neg x0)) (fp.div RNE (fp.mul RNE x7 x9) (fp.sub RNE x2 x11)))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.div RNE x5 x9) (fp.div RNE x10 x0)) (fp.mul RNE (fp.neg x10) (fp.sub RNE x2 x10))) (fp.mul RNE (fp.div RNE (fp.mul RNE x9 x7) (fp.div RNE x2 x5)) (fp.div RNE (fp.neg x1) (fp.div RNE x10 x9)))))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.sub RNE x5 x3) (fp.div RNE x8 x8)) (fp.add RNE (fp.add RNE x1 x2) (fp.mul RNE x11 x4))) (fp.div RNE (fp.div RNE (fp.neg x8) (fp.neg x9)) (fp.add RNE (fp.mul RNE x7 x11) (fp.neg x5)))))
(check-sat)
