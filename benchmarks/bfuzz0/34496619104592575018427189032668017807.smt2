(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.sub RNE (fp.neg x11) (fp.div RNE x2 x2)) (fp.neg (fp.div RNE x15 x19))))
(assert (fp.eq (fp.mul RNE (fp.neg x14) (fp.add RNE x3 x12)) (fp.mul RNE (fp.sub RNE x17 x16) (fp.div RNE x0 x7))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x19 x16) (fp.mul RNE x10 x19)) (fp.neg (fp.mul RNE x15 x2))))
(assert (fp.geq (fp.div RNE (fp.neg x11) (fp.sub RNE x10 x0)) (fp.neg (fp.div RNE x9 x4))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x2 x6) (fp.sub RNE x12 x3)) (fp.sub RNE (fp.neg x11) (fp.neg x2))))
(assert (fp.lt (fp.neg (fp.div RNE x2 x1)) (fp.div RNE (fp.mul RNE x5 x21) (fp.mul RNE x0 x14))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x17 x1) (fp.neg x18)) (fp.mul RNE (fp.add RNE x21 x21) (fp.mul RNE x9 x1))))
(assert (fp.leq (fp.neg (fp.sub RNE x5 x7)) (fp.sub RNE (fp.sub RNE x3 x7) (fp.sub RNE x8 x4))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x0 x5) (fp.div RNE x10 x0)) (fp.neg (fp.neg x2))))
(assert (fp.gt (fp.div RNE (fp.sub RNE x14 x21) (fp.sub RNE x0 x14)) (fp.mul RNE (fp.add RNE x13 x3) (fp.mul RNE x16 x5))))
(assert (fp.leq (fp.sub RNE (fp.neg x0) (fp.add RNE x4 x22)) (fp.mul RNE (fp.neg x11) (fp.add RNE x9 x21))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x8 x14) (fp.neg x16)) (fp.sub RNE (fp.mul RNE x17 x6) (fp.add RNE x0 x13))))
(check-sat)
