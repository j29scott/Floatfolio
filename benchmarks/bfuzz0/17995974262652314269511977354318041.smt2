(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.add RNE (fp.neg x12) (fp.div RNE x16 x9)) (fp.div RNE (fp.div RNE x11 x4) (fp.add RNE x5 x9))) (fp.add RNE (fp.neg (fp.div RNE x16 x16)) (fp.div RNE (fp.sub RNE x13 x18) (fp.sub RNE x3 x3)))) (fp.div RNE (fp.add RNE (fp.sub RNE (fp.div RNE x13 x8) (fp.mul RNE x7 x7)) (fp.sub RNE (fp.sub RNE x1 x5) (fp.sub RNE x8 x11))) (fp.div RNE (fp.neg (fp.add RNE x11 x1)) (fp.div RNE (fp.sub RNE x7 x2) (fp.sub RNE x12 x18))))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.sub RNE (fp.neg x12) (fp.div RNE x10 x0)) (fp.mul RNE (fp.mul RNE x3 x16) (fp.div RNE x10 x18))) (fp.div RNE (fp.mul RNE (fp.div RNE x17 x0) (fp.div RNE x0 x5)) (fp.sub RNE (fp.mul RNE x18 x15) (fp.mul RNE x9 x9)))) (fp.add RNE (fp.div RNE (fp.sub RNE (fp.mul RNE x2 x7) (fp.neg x13)) (fp.mul RNE (fp.div RNE x3 x6) (fp.mul RNE x17 x7))) (fp.add RNE (fp.div RNE (fp.neg x2) (fp.add RNE x5 x3)) (fp.mul RNE (fp.div RNE x12 x15) (fp.neg x4))))))
(assert (fp.eq (fp.sub RNE (fp.neg (fp.neg (fp.mul RNE x17 x11))) (fp.div RNE (fp.div RNE (fp.add RNE x18 x15) (fp.neg x13)) (fp.div RNE (fp.div RNE x9 x7) (fp.mul RNE x6 x2)))) (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.add RNE x12 x4) (fp.div RNE x1 x9)) (fp.add RNE (fp.div RNE x18 x17) (fp.div RNE x9 x5))) (fp.mul RNE (fp.sub RNE (fp.div RNE x7 x5) (fp.add RNE x7 x18)) (fp.mul RNE (fp.div RNE x4 x11) (fp.neg x17))))))
(assert (fp.lt (fp.sub RNE (fp.add RNE (fp.div RNE (fp.sub RNE x9 x17) (fp.neg x8)) (fp.div RNE (fp.sub RNE x3 x7) (fp.div RNE x9 x0))) (fp.div RNE (fp.add RNE (fp.sub RNE x15 x9) (fp.add RNE x17 x2)) (fp.add RNE (fp.neg x2) (fp.sub RNE x18 x10)))) (fp.neg (fp.sub RNE (fp.add RNE (fp.add RNE x2 x11) (fp.neg x4)) (fp.add RNE (fp.neg x7) (fp.sub RNE x1 x16))))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.div RNE x3 x1) (fp.add RNE x5 x8)) (fp.mul RNE (fp.mul RNE x4 x7) (fp.div RNE x4 x9))) (fp.neg (fp.mul RNE (fp.add RNE x12 x7) (fp.add RNE x1 x16)))) (fp.neg (fp.sub RNE (fp.neg (fp.mul RNE x10 x7)) (fp.mul RNE (fp.add RNE x11 x15) (fp.add RNE x15 x18))))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.div RNE (fp.sub RNE x7 x1) (fp.add RNE x13 x12)) (fp.neg (fp.add RNE x12 x11))) (fp.mul RNE (fp.div RNE (fp.mul RNE x2 x7) (fp.add RNE x8 x7)) (fp.neg (fp.mul RNE x18 x5)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.neg x16) (fp.div RNE x5 x15)) (fp.add RNE (fp.add RNE x0 x4) (fp.add RNE x9 x12))) (fp.sub RNE (fp.neg (fp.neg x15)) (fp.div RNE (fp.div RNE x9 x2) (fp.neg x8))))))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.div RNE (fp.mul RNE x5 x0) (fp.sub RNE x11 x1)) (fp.div RNE (fp.mul RNE x10 x4) (fp.sub RNE x0 x2))) (fp.sub RNE (fp.neg (fp.add RNE x10 x12)) (fp.mul RNE (fp.div RNE x0 x14) (fp.div RNE x8 x11)))) (fp.div RNE (fp.neg (fp.div RNE (fp.neg x3) (fp.add RNE x15 x4))) (fp.add RNE (fp.neg (fp.div RNE x2 x7)) (fp.div RNE (fp.neg x0) (fp.div RNE x12 x18))))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.add RNE (fp.neg x6) (fp.add RNE x14 x3))) (fp.div RNE (fp.neg (fp.mul RNE x15 x10)) (fp.sub RNE (fp.neg x17) (fp.div RNE x12 x13)))) (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x4 x6) (fp.neg x15)) (fp.neg (fp.neg x7))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x1 x18) (fp.sub RNE x13 x16)) (fp.div RNE (fp.add RNE x17 x7) (fp.div RNE x9 x14))))))
(assert (fp.lt (fp.div RNE (fp.sub RNE (fp.neg (fp.div RNE x6 x12)) (fp.sub RNE (fp.sub RNE x10 x10) (fp.sub RNE x9 x8))) (fp.mul RNE (fp.div RNE (fp.neg x15) (fp.sub RNE x18 x11)) (fp.neg (fp.add RNE x16 x6)))) (fp.add RNE (fp.mul RNE (fp.neg (fp.mul RNE x4 x2)) (fp.neg (fp.sub RNE x5 x16))) (fp.neg (fp.div RNE (fp.sub RNE x11 x18) (fp.sub RNE x5 x3))))))
(check-sat)
