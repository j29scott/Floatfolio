(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.add RNE x11 x4) (fp.sub RNE x19 x20)) (fp.add RNE (fp.add RNE x8 x9) (fp.div RNE x16 x16))) (fp.div RNE (fp.neg (fp.sub RNE x19 x4)) (fp.neg (fp.div RNE x16 x5)))))
(assert (fp.geq (fp.sub RNE (fp.neg (fp.neg x20)) (fp.div RNE (fp.mul RNE x3 x11) (fp.mul RNE x8 x13))) (fp.neg (fp.mul RNE (fp.mul RNE x19 x2) (fp.sub RNE x5 x13)))))
(assert (fp.gt (fp.mul RNE (fp.neg (fp.sub RNE x12 x2)) (fp.neg (fp.add RNE x7 x18))) (fp.neg (fp.neg (fp.sub RNE x17 x14)))))
(assert (fp.lt (fp.add RNE (fp.div RNE (fp.sub RNE x19 x5) (fp.neg x8)) (fp.neg (fp.add RNE x8 x0))) (fp.mul RNE (fp.sub RNE (fp.add RNE x19 x17) (fp.neg x12)) (fp.sub RNE (fp.neg x16) (fp.neg x20)))))
(assert (fp.leq (fp.sub RNE (fp.sub RNE (fp.add RNE x6 x14) (fp.mul RNE x7 x8)) (fp.neg (fp.neg x17))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x17 x0) (fp.sub RNE x0 x2)) (fp.add RNE (fp.mul RNE x11 x20) (fp.div RNE x11 x15)))))
(assert (fp.gt (fp.neg (fp.neg (fp.neg x7))) (fp.neg (fp.div RNE (fp.mul RNE x14 x10) (fp.div RNE x7 x1)))))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.neg x10) (fp.div RNE x10 x14)) (fp.sub RNE (fp.neg x13) (fp.mul RNE x12 x9))) (fp.neg (fp.add RNE (fp.neg x2) (fp.sub RNE x17 x17)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.neg x15)) (fp.sub RNE (fp.sub RNE x17 x18) (fp.neg x18))) (fp.mul RNE (fp.add RNE (fp.mul RNE x3 x10) (fp.div RNE x13 x2)) (fp.sub RNE (fp.neg x19) (fp.mul RNE x2 x0)))))
(check-sat)
