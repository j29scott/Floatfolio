(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.mul RNE (fp.neg (fp.sub RNE (fp.mul RNE x6 x5) (fp.add RNE x11 x13))) (fp.neg (fp.neg (fp.add RNE x2 x5)))) (fp.neg (fp.div RNE (fp.sub RNE (fp.neg x7) (fp.neg x12)) (fp.mul RNE (fp.sub RNE x9 x10) (fp.neg x10))))))
(assert (fp.lt (fp.neg (fp.mul RNE (fp.neg (fp.sub RNE x0 x8)) (fp.neg (fp.mul RNE x3 x15)))) (fp.mul RNE (fp.neg (fp.mul RNE (fp.sub RNE x9 x20) (fp.add RNE x13 x18))) (fp.sub RNE (fp.mul RNE (fp.div RNE x17 x10) (fp.add RNE x16 x13)) (fp.div RNE (fp.neg x4) (fp.add RNE x19 x1))))))
(assert (fp.geq (fp.sub RNE (fp.add RNE (fp.div RNE (fp.neg x2) (fp.add RNE x19 x3)) (fp.sub RNE (fp.div RNE x8 x2) (fp.neg x17))) (fp.sub RNE (fp.neg (fp.sub RNE x19 x4)) (fp.div RNE (fp.add RNE x20 x14) (fp.div RNE x11 x2)))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.mul RNE x16 x11) (fp.sub RNE x21 x9)) (fp.mul RNE (fp.div RNE x13 x16) (fp.div RNE x5 x17))) (fp.add RNE (fp.mul RNE (fp.div RNE x18 x14) (fp.sub RNE x15 x16)) (fp.sub RNE (fp.div RNE x7 x19) (fp.add RNE x15 x8))))))
(assert (fp.leq (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.neg x7) (fp.add RNE x16 x17)) (fp.neg (fp.div RNE x3 x14))) (fp.sub RNE (fp.mul RNE (fp.neg x5) (fp.add RNE x0 x10)) (fp.sub RNE (fp.mul RNE x0 x19) (fp.div RNE x0 x10)))) (fp.add RNE (fp.add RNE (fp.neg (fp.div RNE x2 x12)) (fp.sub RNE (fp.div RNE x4 x5) (fp.sub RNE x1 x16))) (fp.div RNE (fp.neg (fp.div RNE x21 x2)) (fp.sub RNE (fp.add RNE x2 x16) (fp.add RNE x4 x10))))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.add RNE (fp.sub RNE x8 x1) (fp.add RNE x17 x3)) (fp.sub RNE (fp.mul RNE x13 x0) (fp.div RNE x20 x16))) (fp.sub RNE (fp.div RNE (fp.mul RNE x5 x12) (fp.sub RNE x4 x19)) (fp.sub RNE (fp.add RNE x15 x16) (fp.mul RNE x15 x20)))) (fp.neg (fp.mul RNE (fp.mul RNE (fp.neg x13) (fp.div RNE x0 x2)) (fp.mul RNE (fp.add RNE x12 x9) (fp.sub RNE x4 x2))))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.add RNE (fp.sub RNE x9 x14) (fp.add RNE x8 x7))) (fp.div RNE (fp.div RNE (fp.add RNE x2 x3) (fp.sub RNE x12 x13)) (fp.mul RNE (fp.div RNE x11 x15) (fp.mul RNE x7 x21)))) (fp.neg (fp.mul RNE (fp.sub RNE (fp.neg x21) (fp.div RNE x13 x13)) (fp.neg (fp.add RNE x7 x2))))))
(check-sat)
