(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.neg x4) (fp.neg x4))) (fp.neg (fp.mul RNE (fp.div RNE x2 x7) (fp.div RNE x10 x5)))))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.mul RNE x8 x3) (fp.sub RNE x10 x10)) (fp.div RNE (fp.sub RNE x1 x4) (fp.mul RNE x2 x7))) (fp.mul RNE (fp.neg (fp.div RNE x10 x9)) (fp.add RNE (fp.add RNE x8 x3) (fp.sub RNE x0 x2)))))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.div RNE x7 x4) (fp.neg x2)) (fp.sub RNE (fp.neg x10) (fp.sub RNE x6 x4))) (fp.sub RNE (fp.add RNE (fp.mul RNE x4 x7) (fp.sub RNE x6 x6)) (fp.neg (fp.mul RNE x4 x1)))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.div RNE x4 x1) (fp.neg x1)) (fp.div RNE (fp.mul RNE x2 x9) (fp.add RNE x10 x10))) (fp.neg (fp.mul RNE (fp.add RNE x7 x6) (fp.mul RNE x8 x6)))))
(assert (fp.lt (fp.div RNE (fp.sub RNE (fp.neg x9) (fp.sub RNE x9 x6)) (fp.mul RNE (fp.sub RNE x5 x9) (fp.add RNE x7 x3))) (fp.add RNE (fp.div RNE (fp.sub RNE x3 x10) (fp.neg x8)) (fp.mul RNE (fp.mul RNE x6 x8) (fp.sub RNE x4 x4)))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.neg x3) (fp.add RNE x0 x8)) (fp.mul RNE (fp.mul RNE x0 x6) (fp.div RNE x4 x5))) (fp.neg (fp.neg (fp.add RNE x6 x2)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.div RNE x3 x8) (fp.div RNE x3 x1))) (fp.mul RNE (fp.mul RNE (fp.neg x2) (fp.mul RNE x6 x6)) (fp.div RNE (fp.mul RNE x7 x3) (fp.div RNE x5 x10)))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.neg x4) (fp.sub RNE x6 x10)) (fp.mul RNE (fp.neg x9) (fp.div RNE x4 x3))) (fp.sub RNE (fp.div RNE (fp.add RNE x0 x8) (fp.add RNE x2 x3)) (fp.neg (fp.sub RNE x5 x0)))))
(assert (fp.gt (fp.neg (fp.neg (fp.mul RNE x0 x0))) (fp.mul RNE (fp.mul RNE (fp.add RNE x8 x2) (fp.div RNE x1 x10)) (fp.mul RNE (fp.neg x1) (fp.add RNE x0 x1)))))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.mul RNE x7 x6) (fp.neg x1)) (fp.add RNE (fp.div RNE x0 x8) (fp.sub RNE x4 x2))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x1 x8) (fp.mul RNE x8 x4)) (fp.div RNE (fp.sub RNE x4 x3) (fp.div RNE x1 x3)))))
(check-sat)
