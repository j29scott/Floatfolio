(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.mul RNE x2 x19) (fp.mul RNE x13 x1)) (fp.div RNE (fp.add RNE x22 x14) (fp.sub RNE x1 x19))))
(assert (fp.geq (fp.mul RNE (fp.add RNE x2 x21) (fp.sub RNE x9 x4)) (fp.div RNE (fp.neg x9) (fp.add RNE x6 x7))))
(assert (fp.eq (fp.add RNE (fp.sub RNE x15 x18) (fp.neg x5)) (fp.neg (fp.neg x12))))
(assert (fp.leq (fp.add RNE (fp.div RNE x12 x4) (fp.sub RNE x11 x15)) (fp.mul RNE (fp.mul RNE x18 x3) (fp.div RNE x13 x23))))
(assert (fp.eq (fp.neg (fp.neg x14)) (fp.mul RNE (fp.sub RNE x20 x12) (fp.sub RNE x11 x8))))
(assert (fp.leq (fp.neg (fp.neg x3)) (fp.add RNE (fp.mul RNE x13 x3) (fp.add RNE x23 x21))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x12 x2) (fp.mul RNE x15 x20)) (fp.mul RNE (fp.mul RNE x10 x12) (fp.neg x12))))
(assert (fp.lt (fp.div RNE (fp.neg x2) (fp.sub RNE x4 x2)) (fp.mul RNE (fp.neg x24) (fp.sub RNE x13 x11))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x23 x1) (fp.mul RNE x13 x11)) (fp.div RNE (fp.add RNE x11 x5) (fp.mul RNE x22 x13))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x0 x21) (fp.add RNE x6 x16)) (fp.add RNE (fp.div RNE x3 x3) (fp.div RNE x21 x24))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x11 x14) (fp.mul RNE x22 x2)) (fp.add RNE (fp.div RNE x0 x10) (fp.sub RNE x0 x17))))
(check-sat)
