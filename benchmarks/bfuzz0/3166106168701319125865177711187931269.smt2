(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.mul RNE x2 x4) (fp.sub RNE x4 x1)) (fp.div RNE (fp.add RNE x0 x5) (fp.neg x0))))
(assert (fp.leq (fp.sub RNE (fp.div RNE x2 x0) (fp.add RNE x3 x4)) (fp.neg (fp.div RNE x5 x5))))
(assert (fp.gt (fp.sub RNE (fp.add RNE x3 x4) (fp.div RNE x2 x3)) (fp.add RNE (fp.add RNE x0 x1) (fp.neg x1))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x4 x5) (fp.sub RNE x4 x3)) (fp.neg (fp.div RNE x0 x1))))
(assert (fp.eq (fp.neg (fp.mul RNE x5 x1)) (fp.neg (fp.div RNE x5 x2))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x5 x4) (fp.div RNE x1 x3)) (fp.add RNE (fp.sub RNE x0 x2) (fp.add RNE x5 x4))))
(assert (fp.geq (fp.neg (fp.sub RNE x1 x5)) (fp.mul RNE (fp.div RNE x0 x2) (fp.mul RNE x2 x3))))
(assert (fp.lt (fp.mul RNE (fp.add RNE x0 x1) (fp.neg x3)) (fp.add RNE (fp.sub RNE x5 x4) (fp.sub RNE x5 x3))))
(check-sat)
