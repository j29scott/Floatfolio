(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.neg x19) (fp.neg x6)) (fp.div RNE (fp.div RNE x15 x25) (fp.neg x18))) (fp.sub RNE (fp.div RNE (fp.sub RNE x9 x4) (fp.neg x13)) (fp.neg (fp.sub RNE x7 x6)))))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.neg x5) (fp.add RNE x22 x4)) (fp.neg (fp.div RNE x9 x4))) (fp.sub RNE (fp.neg (fp.add RNE x7 x12)) (fp.add RNE (fp.neg x4) (fp.mul RNE x3 x18)))))
(assert (fp.geq (fp.neg (fp.add RNE (fp.mul RNE x22 x15) (fp.div RNE x10 x7))) (fp.add RNE (fp.sub RNE (fp.sub RNE x25 x4) (fp.div RNE x24 x3)) (fp.mul RNE (fp.mul RNE x9 x16) (fp.add RNE x24 x4)))))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.div RNE x12 x1) (fp.add RNE x8 x15)) (fp.add RNE (fp.add RNE x3 x1) (fp.div RNE x20 x25))) (fp.neg (fp.neg (fp.div RNE x5 x22)))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.add RNE x0 x24) (fp.sub RNE x2 x21)) (fp.mul RNE (fp.sub RNE x1 x25) (fp.div RNE x14 x23))) (fp.neg (fp.div RNE (fp.add RNE x13 x17) (fp.sub RNE x22 x13)))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.div RNE x9 x25) (fp.sub RNE x5 x17)) (fp.add RNE (fp.mul RNE x0 x6) (fp.sub RNE x4 x19))) (fp.neg (fp.mul RNE (fp.mul RNE x7 x22) (fp.div RNE x13 x25)))))
(check-sat)
