(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.div RNE (fp.neg (fp.sub RNE x10 x7)) (fp.mul RNE (fp.div RNE x19 x15) (fp.sub RNE x17 x16))) (fp.neg (fp.sub RNE (fp.neg x22) (fp.neg x20)))))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.mul RNE x18 x5) (fp.mul RNE x15 x22)) (fp.add RNE (fp.div RNE x23 x5) (fp.mul RNE x22 x22))) (fp.div RNE (fp.sub RNE (fp.add RNE x1 x2) (fp.mul RNE x0 x0)) (fp.neg (fp.div RNE x7 x1)))))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.mul RNE x8 x13) (fp.neg x3)) (fp.sub RNE (fp.neg x23) (fp.sub RNE x0 x17))) (fp.add RNE (fp.neg (fp.sub RNE x9 x17)) (fp.add RNE (fp.div RNE x4 x22) (fp.div RNE x15 x8)))))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.neg x11) (fp.add RNE x10 x1)) (fp.add RNE (fp.neg x18) (fp.neg x23))) (fp.mul RNE (fp.sub RNE (fp.neg x3) (fp.mul RNE x21 x19)) (fp.mul RNE (fp.mul RNE x10 x17) (fp.neg x20)))))
(assert (fp.gt (fp.neg (fp.sub RNE (fp.add RNE x17 x1) (fp.mul RNE x3 x14))) (fp.sub RNE (fp.div RNE (fp.add RNE x0 x20) (fp.sub RNE x19 x20)) (fp.mul RNE (fp.add RNE x10 x18) (fp.add RNE x11 x18)))))
(assert (fp.leq (fp.add RNE (fp.neg (fp.sub RNE x8 x0)) (fp.neg (fp.sub RNE x0 x19))) (fp.add RNE (fp.div RNE (fp.div RNE x16 x16) (fp.sub RNE x15 x15)) (fp.neg (fp.neg x23)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.add RNE x3 x21)) (fp.mul RNE (fp.div RNE x15 x21) (fp.div RNE x14 x5))) (fp.neg (fp.div RNE (fp.div RNE x6 x8) (fp.add RNE x11 x21)))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.add RNE x6 x18) (fp.neg x20)) (fp.add RNE (fp.neg x22) (fp.div RNE x13 x15))) (fp.mul RNE (fp.add RNE (fp.div RNE x3 x22) (fp.neg x8)) (fp.div RNE (fp.sub RNE x20 x16) (fp.div RNE x15 x14)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.mul RNE x16 x16)) (fp.add RNE (fp.neg x9) (fp.sub RNE x7 x7))) (fp.mul RNE (fp.add RNE (fp.neg x10) (fp.add RNE x7 x19)) (fp.neg (fp.mul RNE x11 x7)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.sub RNE x19 x10) (fp.sub RNE x2 x12)) (fp.neg (fp.div RNE x21 x10))) (fp.neg (fp.sub RNE (fp.neg x4) (fp.sub RNE x8 x1)))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.neg x1)) (fp.sub RNE (fp.sub RNE x8 x19) (fp.sub RNE x0 x2))) (fp.div RNE (fp.div RNE (fp.div RNE x14 x1) (fp.div RNE x0 x7)) (fp.add RNE (fp.sub RNE x4 x18) (fp.mul RNE x1 x7)))))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.mul RNE x3 x10) (fp.add RNE x9 x18)) (fp.add RNE (fp.mul RNE x20 x3) (fp.div RNE x8 x14))) (fp.neg (fp.div RNE (fp.mul RNE x3 x20) (fp.sub RNE x21 x18)))))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.mul RNE x14 x5) (fp.neg x14)) (fp.div RNE (fp.div RNE x0 x5) (fp.div RNE x14 x2))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x7 x6) (fp.sub RNE x2 x9)) (fp.neg (fp.div RNE x9 x8)))))
(check-sat)
