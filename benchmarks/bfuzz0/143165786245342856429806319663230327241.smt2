(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.neg x8) (fp.mul RNE x6 x2)) (fp.mul RNE (fp.mul RNE x2 x7) (fp.neg x8))) (fp.sub RNE (fp.add RNE (fp.sub RNE x9 x2) (fp.neg x10)) (fp.div RNE (fp.div RNE x10 x6) (fp.neg x1)))))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.neg x8) (fp.add RNE x2 x7)) (fp.sub RNE (fp.sub RNE x2 x8) (fp.mul RNE x6 x0))) (fp.neg (fp.div RNE (fp.div RNE x4 x2) (fp.neg x9)))))
(assert (fp.leq (fp.div RNE (fp.neg (fp.mul RNE x4 x5)) (fp.div RNE (fp.add RNE x9 x10) (fp.sub RNE x9 x5))) (fp.mul RNE (fp.mul RNE (fp.neg x2) (fp.div RNE x7 x4)) (fp.sub RNE (fp.sub RNE x3 x10) (fp.div RNE x9 x7)))))
(check-sat)
