(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.div RNE (fp.mul RNE x9 x8) (fp.div RNE x7 x13))) (fp.mul RNE (fp.neg (fp.mul RNE x13 x5)) (fp.neg (fp.add RNE x0 x5)))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.neg x3) (fp.add RNE x6 x5)) (fp.add RNE (fp.div RNE x2 x12) (fp.neg x4))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x10 x7) (fp.add RNE x5 x2)) (fp.mul RNE (fp.div RNE x10 x16) (fp.neg x10))))))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.mul RNE (fp.div RNE x7 x15) (fp.neg x15)) (fp.sub RNE (fp.div RNE x9 x9) (fp.mul RNE x11 x10))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x13 x15) (fp.neg x8)) (fp.add RNE (fp.mul RNE x11 x9) (fp.add RNE x1 x5)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x10 x2) (fp.neg x14)) (fp.neg (fp.sub RNE x3 x4))) (fp.div RNE (fp.neg (fp.div RNE x16 x13)) (fp.neg (fp.neg x0))))))
(assert (fp.lt (fp.div RNE (fp.neg (fp.add RNE (fp.neg x6) (fp.mul RNE x12 x13))) (fp.neg (fp.neg (fp.mul RNE x13 x12)))) (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x2 x12) (fp.neg x8)) (fp.mul RNE (fp.sub RNE x5 x6) (fp.neg x14))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x2 x8) (fp.sub RNE x15 x9)) (fp.add RNE (fp.neg x15) (fp.mul RNE x9 x5))))))
(assert (fp.geq (fp.add RNE (fp.neg (fp.neg (fp.neg x8))) (fp.neg (fp.neg (fp.div RNE x11 x1)))) (fp.add RNE (fp.add RNE (fp.mul RNE (fp.neg x11) (fp.add RNE x15 x2)) (fp.add RNE (fp.div RNE x10 x12) (fp.mul RNE x15 x4))) (fp.neg (fp.sub RNE (fp.div RNE x5 x2) (fp.mul RNE x2 x15))))))
(check-sat)
