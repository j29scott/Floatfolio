(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.add RNE x13 x16) (fp.sub RNE x4 x15)) (fp.mul RNE (fp.div RNE x5 x15) (fp.neg x11))) (fp.mul RNE (fp.neg (fp.neg x11)) (fp.mul RNE (fp.mul RNE x13 x4) (fp.neg x10)))))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.mul RNE x3 x4) (fp.add RNE x17 x0)) (fp.add RNE (fp.mul RNE x3 x15) (fp.mul RNE x5 x9))) (fp.div RNE (fp.neg (fp.mul RNE x9 x4)) (fp.sub RNE (fp.div RNE x14 x6) (fp.mul RNE x13 x12)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.add RNE x10 x15) (fp.neg x8))) (fp.div RNE (fp.sub RNE (fp.mul RNE x6 x15) (fp.neg x13)) (fp.add RNE (fp.sub RNE x7 x14) (fp.div RNE x16 x0)))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.mul RNE x5 x8) (fp.div RNE x3 x15)) (fp.mul RNE (fp.sub RNE x16 x10) (fp.sub RNE x11 x1))) (fp.mul RNE (fp.add RNE (fp.add RNE x10 x5) (fp.neg x11)) (fp.div RNE (fp.div RNE x10 x10) (fp.neg x12)))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.sub RNE x17 x2)) (fp.neg (fp.div RNE x10 x6))) (fp.neg (fp.sub RNE (fp.sub RNE x3 x8) (fp.add RNE x0 x0)))))
(assert (fp.lt (fp.neg (fp.sub RNE (fp.mul RNE x7 x17) (fp.mul RNE x9 x16))) (fp.add RNE (fp.sub RNE (fp.sub RNE x3 x17) (fp.neg x15)) (fp.neg (fp.sub RNE x10 x13)))))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.mul RNE x17 x16) (fp.add RNE x5 x8)) (fp.neg (fp.neg x5))) (fp.add RNE (fp.div RNE (fp.div RNE x3 x12) (fp.div RNE x13 x14)) (fp.add RNE (fp.mul RNE x9 x15) (fp.neg x0)))))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.div RNE x11 x15) (fp.add RNE x0 x10)) (fp.neg (fp.add RNE x7 x15))) (fp.mul RNE (fp.div RNE (fp.sub RNE x1 x7) (fp.mul RNE x5 x5)) (fp.mul RNE (fp.div RNE x11 x2) (fp.neg x2)))))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.sub RNE x14 x10)) (fp.add RNE (fp.mul RNE x9 x8) (fp.div RNE x12 x0))) (fp.mul RNE (fp.add RNE (fp.mul RNE x10 x8) (fp.mul RNE x6 x15)) (fp.sub RNE (fp.mul RNE x2 x6) (fp.add RNE x15 x4)))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.sub RNE x2 x9) (fp.mul RNE x5 x10)) (fp.sub RNE (fp.sub RNE x11 x9) (fp.mul RNE x2 x6))) (fp.sub RNE (fp.div RNE (fp.neg x10) (fp.sub RNE x6 x14)) (fp.neg (fp.div RNE x11 x4)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.mul RNE x11 x13) (fp.add RNE x7 x14)) (fp.div RNE (fp.div RNE x4 x15) (fp.div RNE x6 x5))) (fp.div RNE (fp.div RNE (fp.sub RNE x15 x11) (fp.add RNE x12 x14)) (fp.div RNE (fp.div RNE x15 x15) (fp.div RNE x6 x9)))))
(check-sat)
