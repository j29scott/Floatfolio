(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.sub RNE (fp.neg (fp.mul RNE x2 x2)) (fp.add RNE (fp.div RNE x6 x2) (fp.sub RNE x4 x0))) (fp.neg (fp.add RNE (fp.add RNE x8 x2) (fp.div RNE x1 x7)))))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.sub RNE x7 x10) (fp.sub RNE x8 x3)) (fp.neg (fp.div RNE x6 x2))) (fp.neg (fp.sub RNE (fp.div RNE x5 x7) (fp.div RNE x3 x0)))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.div RNE x7 x8) (fp.neg x4)) (fp.add RNE (fp.mul RNE x0 x10) (fp.add RNE x7 x5))) (fp.neg (fp.mul RNE (fp.div RNE x1 x8) (fp.add RNE x6 x0)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.div RNE x2 x8)) (fp.add RNE (fp.sub RNE x7 x4) (fp.neg x9))) (fp.mul RNE (fp.mul RNE (fp.neg x10) (fp.add RNE x3 x6)) (fp.sub RNE (fp.neg x5) (fp.neg x5)))))
(assert (fp.geq (fp.neg (fp.sub RNE (fp.mul RNE x4 x7) (fp.sub RNE x9 x1))) (fp.mul RNE (fp.add RNE (fp.div RNE x0 x2) (fp.mul RNE x8 x7)) (fp.sub RNE (fp.add RNE x3 x6) (fp.div RNE x0 x0)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.sub RNE x1 x5)) (fp.sub RNE (fp.sub RNE x7 x3) (fp.neg x6))) (fp.add RNE (fp.mul RNE (fp.mul RNE x9 x7) (fp.sub RNE x5 x4)) (fp.sub RNE (fp.neg x4) (fp.sub RNE x4 x2)))))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.sub RNE x1 x5) (fp.neg x10)) (fp.neg (fp.neg x5))) (fp.add RNE (fp.neg (fp.div RNE x5 x1)) (fp.div RNE (fp.div RNE x7 x6) (fp.neg x3)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.div RNE x0 x10) (fp.sub RNE x10 x9)) (fp.sub RNE (fp.add RNE x0 x3) (fp.add RNE x10 x1))) (fp.mul RNE (fp.add RNE (fp.sub RNE x2 x8) (fp.neg x4)) (fp.mul RNE (fp.add RNE x5 x7) (fp.add RNE x0 x7)))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.sub RNE x6 x0) (fp.mul RNE x3 x10)) (fp.div RNE (fp.mul RNE x6 x3) (fp.sub RNE x10 x8))) (fp.neg (fp.div RNE (fp.div RNE x5 x5) (fp.div RNE x6 x1)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.sub RNE x10 x5) (fp.div RNE x8 x1)) (fp.neg (fp.neg x0))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x8 x4) (fp.sub RNE x2 x5)) (fp.neg (fp.sub RNE x1 x10)))))
(check-sat)
