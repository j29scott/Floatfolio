(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(declare-const x23 (_ FloatingPoint 8 24))
(declare-const x24 (_ FloatingPoint 8 24))
(declare-const x25 (_ FloatingPoint 8 24))
(declare-const x26 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.div RNE x22 x11) (fp.div RNE x7 x15)))
(assert (fp.geq (fp.neg x13) (fp.mul RNE x5 x20)))
(assert (fp.geq (fp.sub RNE x9 x13) (fp.sub RNE x7 x25)))
(assert (fp.leq (fp.mul RNE x10 x11) (fp.add RNE x4 x22)))
(assert (fp.leq (fp.mul RNE x13 x12) (fp.div RNE x15 x10)))
(assert (fp.leq (fp.neg x10) (fp.neg x2)))
(assert (fp.gt (fp.div RNE x3 x7) (fp.mul RNE x16 x5)))
(assert (fp.geq (fp.mul RNE x0 x13) (fp.neg x2)))
(assert (fp.geq (fp.add RNE x25 x4) (fp.sub RNE x16 x3)))
(assert (fp.geq (fp.neg x4) (fp.div RNE x2 x0)))
(assert (fp.leq (fp.mul RNE x6 x16) (fp.mul RNE x21 x4)))
(assert (fp.leq (fp.sub RNE x25 x14) (fp.mul RNE x20 x5)))
(assert (fp.eq (fp.sub RNE x25 x10) (fp.neg x14)))
(assert (fp.eq (fp.sub RNE x16 x2) (fp.div RNE x12 x17)))
(assert (fp.lt (fp.neg x21) (fp.add RNE x24 x22)))
(assert (fp.lt (fp.neg x23) (fp.neg x5)))
(assert (fp.gt (fp.neg x1) (fp.div RNE x10 x20)))
(assert (fp.geq (fp.div RNE x17 x13) (fp.sub RNE x5 x23)))
(assert (fp.gt (fp.mul RNE x7 x16) (fp.mul RNE x9 x3)))
(assert (fp.lt (fp.div RNE x25 x18) (fp.div RNE x19 x22)))
(check-sat)
