(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.div RNE x2 x11) (fp.div RNE x8 x12)) (fp.add RNE (fp.sub RNE x12 x9) (fp.add RNE x3 x6))) (fp.neg (fp.div RNE (fp.add RNE x1 x14) (fp.neg x0)))))
(assert (fp.eq (fp.neg (fp.mul RNE (fp.mul RNE x3 x10) (fp.mul RNE x2 x3))) (fp.mul RNE (fp.mul RNE (fp.sub RNE x8 x0) (fp.add RNE x13 x8)) (fp.div RNE (fp.sub RNE x2 x3) (fp.sub RNE x8 x3)))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.div RNE x12 x14)) (fp.mul RNE (fp.sub RNE x1 x1) (fp.sub RNE x12 x12))) (fp.neg (fp.neg (fp.div RNE x3 x6)))))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.mul RNE x4 x1)) (fp.div RNE (fp.sub RNE x10 x6) (fp.add RNE x3 x13))) (fp.sub RNE (fp.add RNE (fp.add RNE x10 x3) (fp.add RNE x6 x8)) (fp.sub RNE (fp.mul RNE x0 x9) (fp.neg x3)))))
(check-sat)
