(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.gt (fp.div RNE (fp.mul RNE (fp.neg x0) (fp.div RNE x21 x22)) (fp.sub RNE (fp.div RNE x15 x14) (fp.mul RNE x18 x3))) (fp.mul RNE (fp.add RNE (fp.neg x21) (fp.div RNE x13 x21)) (fp.div RNE (fp.add RNE x13 x17) (fp.div RNE x2 x19)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.sub RNE x21 x22) (fp.div RNE x22 x3)) (fp.neg (fp.sub RNE x16 x7))) (fp.mul RNE (fp.add RNE (fp.mul RNE x3 x13) (fp.add RNE x5 x4)) (fp.div RNE (fp.neg x14) (fp.div RNE x19 x0)))))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.sub RNE x15 x20) (fp.sub RNE x21 x2)) (fp.div RNE (fp.neg x9) (fp.neg x4))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x20 x12) (fp.add RNE x2 x21)) (fp.sub RNE (fp.add RNE x21 x0) (fp.mul RNE x15 x20)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.sub RNE x8 x8) (fp.mul RNE x12 x2)) (fp.mul RNE (fp.sub RNE x5 x5) (fp.neg x6))) (fp.div RNE (fp.mul RNE (fp.div RNE x7 x18) (fp.mul RNE x10 x19)) (fp.add RNE (fp.neg x9) (fp.add RNE x18 x10)))))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.sub RNE x21 x7) (fp.div RNE x4 x17)) (fp.div RNE (fp.neg x13) (fp.mul RNE x14 x22))) (fp.neg (fp.add RNE (fp.sub RNE x5 x15) (fp.div RNE x13 x7)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.div RNE x8 x7) (fp.mul RNE x2 x13)) (fp.sub RNE (fp.mul RNE x9 x10) (fp.add RNE x14 x1))) (fp.add RNE (fp.neg (fp.neg x10)) (fp.neg (fp.div RNE x5 x11)))))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.mul RNE x8 x3) (fp.neg x0)) (fp.div RNE (fp.div RNE x10 x10) (fp.div RNE x16 x8))) (fp.neg (fp.add RNE (fp.sub RNE x10 x10) (fp.div RNE x14 x9)))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.div RNE x6 x1) (fp.neg x10)) (fp.add RNE (fp.neg x11) (fp.sub RNE x22 x18))) (fp.add RNE (fp.mul RNE (fp.div RNE x12 x10) (fp.neg x7)) (fp.neg (fp.div RNE x7 x1)))))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.sub RNE x3 x3) (fp.sub RNE x0 x16)) (fp.div RNE (fp.sub RNE x14 x16) (fp.neg x17))) (fp.div RNE (fp.neg (fp.div RNE x2 x21)) (fp.mul RNE (fp.div RNE x6 x7) (fp.sub RNE x0 x17)))))
(assert (fp.leq (fp.mul RNE (fp.neg (fp.sub RNE x7 x9)) (fp.mul RNE (fp.neg x5) (fp.div RNE x8 x18))) (fp.div RNE (fp.add RNE (fp.sub RNE x14 x1) (fp.add RNE x0 x20)) (fp.div RNE (fp.div RNE x13 x5) (fp.add RNE x12 x8)))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.add RNE x15 x11)) (fp.div RNE (fp.add RNE x11 x1) (fp.neg x21))) (fp.div RNE (fp.div RNE (fp.sub RNE x10 x5) (fp.mul RNE x12 x9)) (fp.div RNE (fp.sub RNE x13 x6) (fp.sub RNE x7 x10)))))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.neg x11) (fp.mul RNE x9 x6)) (fp.neg (fp.div RNE x11 x22))) (fp.div RNE (fp.neg (fp.mul RNE x17 x20)) (fp.neg (fp.div RNE x22 x22)))))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.neg x15) (fp.neg x20)) (fp.add RNE (fp.sub RNE x13 x18) (fp.neg x13))) (fp.mul RNE (fp.neg (fp.neg x15)) (fp.div RNE (fp.neg x16) (fp.neg x12)))))
(assert (fp.gt (fp.sub RNE (fp.neg (fp.div RNE x6 x6)) (fp.neg (fp.sub RNE x20 x17))) (fp.sub RNE (fp.add RNE (fp.add RNE x15 x2) (fp.add RNE x21 x21)) (fp.div RNE (fp.sub RNE x5 x4) (fp.sub RNE x16 x20)))))
(assert (fp.leq (fp.neg (fp.div RNE (fp.mul RNE x7 x2) (fp.sub RNE x21 x13))) (fp.add RNE (fp.neg (fp.add RNE x8 x19)) (fp.div RNE (fp.sub RNE x12 x20) (fp.neg x9)))))
(check-sat)
