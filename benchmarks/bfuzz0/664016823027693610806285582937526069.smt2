(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.sub RNE x21 x7)) (fp.sub RNE (fp.add RNE x4 x12) (fp.div RNE x1 x13))) (fp.mul RNE (fp.neg (fp.add RNE x8 x3)) (fp.sub RNE (fp.sub RNE x10 x19) (fp.sub RNE x13 x20)))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.mul RNE x13 x6) (fp.add RNE x20 x13)) (fp.add RNE (fp.sub RNE x13 x21) (fp.sub RNE x10 x18))) (fp.neg (fp.div RNE (fp.add RNE x21 x22) (fp.neg x3)))))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.div RNE x12 x0) (fp.sub RNE x4 x9)) (fp.sub RNE (fp.add RNE x4 x13) (fp.add RNE x12 x16))) (fp.sub RNE (fp.div RNE (fp.mul RNE x14 x4) (fp.div RNE x4 x6)) (fp.sub RNE (fp.neg x1) (fp.sub RNE x16 x11)))))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.neg x16) (fp.mul RNE x18 x6)) (fp.div RNE (fp.sub RNE x13 x9) (fp.mul RNE x13 x20))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x6 x10) (fp.mul RNE x1 x12)) (fp.neg (fp.neg x3)))))
(assert (fp.eq (fp.add RNE (fp.neg (fp.neg x14)) (fp.mul RNE (fp.mul RNE x6 x12) (fp.neg x4))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x18 x1) (fp.sub RNE x12 x17)) (fp.sub RNE (fp.add RNE x17 x2) (fp.mul RNE x10 x2)))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.sub RNE x19 x17)) (fp.sub RNE (fp.mul RNE x6 x15) (fp.add RNE x5 x16))) (fp.mul RNE (fp.sub RNE (fp.div RNE x5 x7) (fp.sub RNE x11 x15)) (fp.add RNE (fp.div RNE x16 x20) (fp.div RNE x9 x4)))))
(check-sat)
