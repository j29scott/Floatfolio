(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x4 x3) (fp.neg x6)) (fp.add RNE (fp.div RNE x16 x19) (fp.mul RNE x18 x14))) (fp.mul RNE (fp.mul RNE (fp.add RNE x8 x19) (fp.sub RNE x6 x0)) (fp.neg (fp.neg x11)))) (fp.sub RNE (fp.neg (fp.sub RNE (fp.add RNE x2 x11) (fp.neg x2))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x2 x1) (fp.mul RNE x7 x19)) (fp.neg (fp.div RNE x17 x18))))))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.sub RNE x11 x6) (fp.mul RNE x6 x10)) (fp.mul RNE (fp.neg x19) (fp.div RNE x4 x7))) (fp.sub RNE (fp.neg (fp.div RNE x11 x11)) (fp.div RNE (fp.sub RNE x13 x13) (fp.div RNE x14 x2)))) (fp.neg (fp.add RNE (fp.add RNE (fp.sub RNE x14 x9) (fp.sub RNE x8 x5)) (fp.add RNE (fp.add RNE x18 x13) (fp.div RNE x10 x4))))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x15 x15) (fp.div RNE x14 x14)) (fp.neg (fp.div RNE x5 x9))) (fp.sub RNE (fp.sub RNE (fp.neg x11) (fp.mul RNE x12 x14)) (fp.add RNE (fp.div RNE x0 x13) (fp.div RNE x12 x6)))) (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.div RNE x5 x12) (fp.mul RNE x17 x18)) (fp.mul RNE (fp.neg x19) (fp.mul RNE x18 x11))) (fp.neg (fp.sub RNE (fp.mul RNE x10 x9) (fp.mul RNE x2 x0))))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.neg (fp.mul RNE x3 x0)) (fp.add RNE (fp.mul RNE x5 x19) (fp.mul RNE x16 x7))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x6 x14) (fp.mul RNE x0 x7)) (fp.sub RNE (fp.neg x10) (fp.sub RNE x8 x6)))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x15 x5) (fp.div RNE x1 x3)) (fp.div RNE (fp.div RNE x13 x9) (fp.div RNE x9 x13))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x17 x13) (fp.mul RNE x6 x12)) (fp.sub RNE (fp.mul RNE x2 x6) (fp.add RNE x11 x14))))))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.mul RNE x14 x7) (fp.mul RNE x12 x13)) (fp.add RNE (fp.add RNE x3 x11) (fp.sub RNE x7 x9))) (fp.mul RNE (fp.neg (fp.sub RNE x7 x4)) (fp.neg (fp.sub RNE x14 x6)))) (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE x7 x19) (fp.neg x3)) (fp.add RNE (fp.add RNE x9 x11) (fp.div RNE x8 x7))) (fp.neg (fp.sub RNE (fp.sub RNE x17 x0) (fp.sub RNE x9 x5))))))
(assert (fp.eq (fp.div RNE (fp.neg (fp.mul RNE (fp.neg x14) (fp.sub RNE x11 x14))) (fp.sub RNE (fp.add RNE (fp.sub RNE x18 x19) (fp.sub RNE x19 x0)) (fp.div RNE (fp.neg x19) (fp.add RNE x1 x7)))) (fp.sub RNE (fp.neg (fp.sub RNE (fp.add RNE x9 x17) (fp.neg x19))) (fp.div RNE (fp.add RNE (fp.mul RNE x18 x4) (fp.add RNE x15 x1)) (fp.neg (fp.mul RNE x11 x18))))))
(assert (fp.gt (fp.neg (fp.mul RNE (fp.neg (fp.add RNE x16 x19)) (fp.neg (fp.neg x13)))) (fp.div RNE (fp.div RNE (fp.neg (fp.mul RNE x4 x11)) (fp.div RNE (fp.mul RNE x19 x3) (fp.add RNE x16 x12))) (fp.mul RNE (fp.div RNE (fp.add RNE x17 x19) (fp.sub RNE x11 x10)) (fp.mul RNE (fp.mul RNE x14 x16) (fp.neg x12))))))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.div RNE (fp.add RNE x6 x10) (fp.neg x5)) (fp.sub RNE (fp.add RNE x1 x6) (fp.div RNE x0 x16))) (fp.mul RNE (fp.add RNE (fp.mul RNE x7 x6) (fp.add RNE x7 x16)) (fp.sub RNE (fp.neg x11) (fp.mul RNE x19 x0)))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x4 x16) (fp.neg x10)) (fp.neg (fp.div RNE x12 x4))) (fp.add RNE (fp.sub RNE (fp.mul RNE x15 x12) (fp.div RNE x18 x0)) (fp.div RNE (fp.sub RNE x7 x16) (fp.mul RNE x8 x7))))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.div RNE (fp.add RNE x6 x19) (fp.neg x9)) (fp.mul RNE (fp.neg x3) (fp.neg x8))) (fp.div RNE (fp.add RNE (fp.add RNE x19 x3) (fp.neg x15)) (fp.neg (fp.div RNE x3 x8)))) (fp.sub RNE (fp.sub RNE (fp.div RNE (fp.neg x6) (fp.neg x8)) (fp.neg (fp.mul RNE x18 x11))) (fp.mul RNE (fp.div RNE (fp.mul RNE x11 x7) (fp.div RNE x3 x12)) (fp.mul RNE (fp.mul RNE x3 x5) (fp.add RNE x5 x2))))))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.neg x7) (fp.neg x4)) (fp.neg (fp.add RNE x5 x13))) (fp.neg (fp.mul RNE (fp.div RNE x16 x10) (fp.mul RNE x5 x1)))) (fp.mul RNE (fp.neg (fp.div RNE (fp.div RNE x5 x5) (fp.add RNE x3 x10))) (fp.mul RNE (fp.div RNE (fp.neg x8) (fp.neg x19)) (fp.add RNE (fp.sub RNE x13 x18) (fp.neg x4))))))
(assert (fp.geq (fp.add RNE (fp.add RNE (fp.mul RNE (fp.mul RNE x3 x5) (fp.div RNE x3 x1)) (fp.neg (fp.neg x8))) (fp.div RNE (fp.mul RNE (fp.sub RNE x4 x14) (fp.add RNE x7 x11)) (fp.mul RNE (fp.div RNE x10 x16) (fp.sub RNE x19 x13)))) (fp.add RNE (fp.div RNE (fp.neg (fp.div RNE x6 x0)) (fp.sub RNE (fp.neg x4) (fp.neg x5))) (fp.mul RNE (fp.div RNE (fp.add RNE x3 x19) (fp.mul RNE x1 x0)) (fp.div RNE (fp.add RNE x10 x10) (fp.mul RNE x7 x2))))))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.sub RNE (fp.mul RNE x13 x12) (fp.neg x0)) (fp.add RNE (fp.neg x16) (fp.add RNE x6 x10))) (fp.neg (fp.div RNE (fp.add RNE x4 x2) (fp.neg x7)))) (fp.add RNE (fp.neg (fp.div RNE (fp.neg x0) (fp.div RNE x9 x1))) (fp.div RNE (fp.add RNE (fp.sub RNE x15 x17) (fp.neg x17)) (fp.mul RNE (fp.sub RNE x0 x9) (fp.neg x15))))))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.div RNE (fp.add RNE x16 x17) (fp.add RNE x17 x15)) (fp.div RNE (fp.neg x6) (fp.add RNE x13 x16))) (fp.div RNE (fp.neg (fp.sub RNE x14 x7)) (fp.sub RNE (fp.add RNE x5 x9) (fp.add RNE x16 x14)))) (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.neg x19) (fp.add RNE x18 x6)) (fp.mul RNE (fp.neg x1) (fp.neg x11))) (fp.sub RNE (fp.add RNE (fp.add RNE x7 x8) (fp.neg x8)) (fp.div RNE (fp.mul RNE x13 x11) (fp.mul RNE x12 x16))))))
(assert (fp.eq (fp.neg (fp.neg (fp.neg (fp.mul RNE x0 x13)))) (fp.div RNE (fp.neg (fp.div RNE (fp.add RNE x16 x0) (fp.div RNE x2 x6))) (fp.neg (fp.add RNE (fp.add RNE x13 x3) (fp.add RNE x7 x13))))))
(check-sat)
