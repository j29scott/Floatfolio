(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.sub RNE (fp.neg x10) (fp.add RNE x11 x9)) (fp.neg (fp.add RNE x2 x13))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x16 x2) (fp.add RNE x10 x20)) (fp.neg (fp.mul RNE x17 x21))))
(assert (fp.gt (fp.neg (fp.sub RNE x16 x14)) (fp.mul RNE (fp.sub RNE x17 x21) (fp.add RNE x11 x6))))
(assert (fp.eq (fp.add RNE (fp.mul RNE x5 x18) (fp.sub RNE x6 x9)) (fp.mul RNE (fp.add RNE x19 x19) (fp.add RNE x8 x9))))
(assert (fp.lt (fp.sub RNE (fp.add RNE x12 x3) (fp.add RNE x11 x3)) (fp.add RNE (fp.sub RNE x20 x1) (fp.div RNE x5 x0))))
(assert (fp.eq (fp.div RNE (fp.mul RNE x6 x14) (fp.sub RNE x11 x1)) (fp.neg (fp.neg x15))))
(assert (fp.eq (fp.mul RNE (fp.neg x5) (fp.sub RNE x18 x11)) (fp.div RNE (fp.div RNE x3 x3) (fp.sub RNE x12 x15))))
(assert (fp.lt (fp.div RNE (fp.neg x8) (fp.mul RNE x2 x15)) (fp.div RNE (fp.neg x7) (fp.div RNE x9 x15))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x11 x11) (fp.mul RNE x1 x0)) (fp.sub RNE (fp.div RNE x4 x10) (fp.mul RNE x13 x14))))
(assert (fp.gt (fp.sub RNE (fp.mul RNE x20 x20) (fp.sub RNE x10 x2)) (fp.neg (fp.add RNE x8 x15))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x1 x4) (fp.sub RNE x3 x21)) (fp.sub RNE (fp.neg x13) (fp.sub RNE x16 x19))))
(assert (fp.eq (fp.div RNE (fp.add RNE x8 x3) (fp.div RNE x21 x15)) (fp.sub RNE (fp.add RNE x1 x15) (fp.add RNE x10 x3))))
(assert (fp.gt (fp.neg (fp.add RNE x20 x17)) (fp.sub RNE (fp.mul RNE x11 x13) (fp.add RNE x0 x8))))
(assert (fp.eq (fp.neg (fp.add RNE x16 x1)) (fp.sub RNE (fp.div RNE x15 x18) (fp.add RNE x3 x21))))
(assert (fp.lt (fp.add RNE (fp.mul RNE x18 x6) (fp.mul RNE x5 x15)) (fp.div RNE (fp.neg x5) (fp.neg x3))))
(check-sat)
