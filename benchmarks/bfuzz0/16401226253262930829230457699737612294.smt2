(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.sub RNE (fp.neg x16) (fp.div RNE x16 x2)) (fp.neg (fp.add RNE x15 x12))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE x9 x12) (fp.neg x11)) (fp.add RNE (fp.div RNE x15 x8) (fp.mul RNE x11 x7))))
(assert (fp.leq (fp.add RNE (fp.sub RNE x4 x16) (fp.div RNE x0 x0)) (fp.neg (fp.mul RNE x14 x1))))
(assert (fp.gt (fp.add RNE (fp.mul RNE x4 x16) (fp.add RNE x1 x4)) (fp.div RNE (fp.div RNE x17 x18) (fp.mul RNE x6 x16))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE x19 x3) (fp.sub RNE x8 x3)) (fp.sub RNE (fp.div RNE x5 x10) (fp.mul RNE x5 x19))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x15 x15) (fp.mul RNE x11 x3)) (fp.div RNE (fp.add RNE x16 x1) (fp.mul RNE x15 x4))))
(assert (fp.leq (fp.add RNE (fp.add RNE x3 x10) (fp.mul RNE x7 x19)) (fp.add RNE (fp.neg x19) (fp.neg x8))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x9 x16) (fp.div RNE x2 x9)) (fp.sub RNE (fp.neg x3) (fp.add RNE x17 x17))))
(assert (fp.eq (fp.div RNE (fp.add RNE x1 x8) (fp.mul RNE x10 x0)) (fp.add RNE (fp.neg x7) (fp.add RNE x14 x17))))
(assert (fp.geq (fp.neg (fp.div RNE x13 x13)) (fp.mul RNE (fp.add RNE x6 x10) (fp.add RNE x15 x19))))
(assert (fp.eq (fp.div RNE (fp.neg x9) (fp.add RNE x5 x9)) (fp.div RNE (fp.div RNE x18 x4) (fp.sub RNE x19 x11))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x15 x0) (fp.add RNE x6 x7)) (fp.add RNE (fp.sub RNE x16 x18) (fp.add RNE x1 x5))))
(assert (fp.eq (fp.neg (fp.add RNE x16 x16)) (fp.add RNE (fp.add RNE x13 x2) (fp.mul RNE x13 x0))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x16 x2) (fp.div RNE x14 x3)) (fp.mul RNE (fp.add RNE x10 x7) (fp.div RNE x11 x8))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x18 x15) (fp.mul RNE x2 x1)) (fp.add RNE (fp.neg x10) (fp.mul RNE x11 x12))))
(assert (fp.gt (fp.mul RNE (fp.div RNE x15 x15) (fp.add RNE x12 x18)) (fp.sub RNE (fp.neg x1) (fp.add RNE x18 x2))))
(check-sat)
