(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.mul RNE x1 x0) (fp.neg x8)))
(assert (fp.leq (fp.neg x10) (fp.mul RNE x0 x2)))
(assert (fp.gt (fp.mul RNE x13 x5) (fp.add RNE x12 x8)))
(assert (fp.geq (fp.neg x11) (fp.add RNE x1 x0)))
(assert (fp.eq (fp.add RNE x8 x1) (fp.div RNE x5 x8)))
(assert (fp.geq (fp.div RNE x7 x13) (fp.add RNE x4 x1)))
(assert (fp.leq (fp.neg x0) (fp.neg x7)))
(assert (fp.eq (fp.add RNE x11 x7) (fp.add RNE x3 x7)))
(assert (fp.leq (fp.sub RNE x2 x14) (fp.div RNE x10 x5)))
(check-sat)
