(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(declare-const x22 (_ FloatingPoint 8 24))
(assert (fp.geq (fp.neg (fp.neg x1)) (fp.neg (fp.sub RNE x5 x17))))
(assert (fp.gt (fp.mul RNE (fp.sub RNE x19 x9) (fp.add RNE x16 x10)) (fp.sub RNE (fp.neg x11) (fp.neg x17))))
(assert (fp.leq (fp.add RNE (fp.neg x17) (fp.sub RNE x15 x7)) (fp.sub RNE (fp.sub RNE x4 x10) (fp.sub RNE x19 x6))))
(assert (fp.lt (fp.neg (fp.neg x22)) (fp.add RNE (fp.add RNE x10 x4) (fp.neg x13))))
(assert (fp.geq (fp.div RNE (fp.mul RNE x10 x16) (fp.add RNE x10 x14)) (fp.sub RNE (fp.div RNE x5 x13) (fp.sub RNE x5 x17))))
(assert (fp.geq (fp.sub RNE (fp.neg x6) (fp.mul RNE x0 x1)) (fp.neg (fp.neg x2))))
(assert (fp.lt (fp.neg (fp.mul RNE x15 x11)) (fp.mul RNE (fp.add RNE x19 x18) (fp.add RNE x17 x17))))
(assert (fp.gt (fp.mul RNE (fp.mul RNE x9 x16) (fp.mul RNE x17 x0)) (fp.neg (fp.mul RNE x4 x20))))
(assert (fp.eq (fp.div RNE (fp.sub RNE x18 x14) (fp.neg x21)) (fp.mul RNE (fp.add RNE x12 x19) (fp.neg x2))))
(assert (fp.leq (fp.div RNE (fp.div RNE x16 x20) (fp.div RNE x13 x13)) (fp.mul RNE (fp.mul RNE x18 x22) (fp.add RNE x16 x13))))
(assert (fp.lt (fp.sub RNE (fp.sub RNE x7 x19) (fp.add RNE x17 x18)) (fp.add RNE (fp.sub RNE x6 x6) (fp.sub RNE x3 x17))))
(assert (fp.eq (fp.div RNE (fp.neg x3) (fp.sub RNE x5 x3)) (fp.neg (fp.add RNE x14 x17))))
(check-sat)
