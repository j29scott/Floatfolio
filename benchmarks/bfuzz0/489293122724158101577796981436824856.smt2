(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(assert (fp.gt (fp.add RNE (fp.add RNE x6 x9) (fp.neg x12)) (fp.div RNE (fp.div RNE x6 x9) (fp.div RNE x9 x5))))
(assert (fp.geq (fp.div RNE (fp.sub RNE x5 x6) (fp.div RNE x2 x10)) (fp.add RNE (fp.mul RNE x5 x1) (fp.div RNE x13 x4))))
(assert (fp.eq (fp.mul RNE (fp.div RNE x8 x2) (fp.neg x0)) (fp.div RNE (fp.div RNE x9 x3) (fp.neg x6))))
(assert (fp.leq (fp.mul RNE (fp.neg x13) (fp.mul RNE x4 x7)) (fp.div RNE (fp.sub RNE x10 x5) (fp.div RNE x6 x2))))
(assert (fp.gt (fp.div RNE (fp.neg x12) (fp.add RNE x8 x9)) (fp.add RNE (fp.mul RNE x1 x0) (fp.mul RNE x5 x5))))
(assert (fp.lt (fp.div RNE (fp.mul RNE x11 x0) (fp.sub RNE x7 x2)) (fp.sub RNE (fp.sub RNE x10 x2) (fp.div RNE x3 x12))))
(assert (fp.lt (fp.add RNE (fp.div RNE x11 x6) (fp.mul RNE x10 x6)) (fp.neg (fp.div RNE x4 x5))))
(assert (fp.eq (fp.sub RNE (fp.div RNE x7 x4) (fp.add RNE x5 x10)) (fp.div RNE (fp.mul RNE x4 x12) (fp.neg x5))))
(assert (fp.leq (fp.div RNE (fp.add RNE x12 x2) (fp.sub RNE x12 x4)) (fp.sub RNE (fp.add RNE x11 x10) (fp.div RNE x9 x11))))
(assert (fp.lt (fp.add RNE (fp.add RNE x3 x9) (fp.neg x2)) (fp.add RNE (fp.neg x11) (fp.neg x3))))
(assert (fp.geq (fp.add RNE (fp.sub RNE x2 x2) (fp.neg x5)) (fp.div RNE (fp.mul RNE x0 x12) (fp.mul RNE x12 x13))))
(assert (fp.leq (fp.neg (fp.sub RNE x8 x11)) (fp.add RNE (fp.sub RNE x13 x0) (fp.mul RNE x10 x1))))
(assert (fp.geq (fp.div RNE (fp.add RNE x3 x11) (fp.sub RNE x13 x11)) (fp.mul RNE (fp.add RNE x10 x4) (fp.neg x9))))
(assert (fp.leq (fp.neg (fp.neg x11)) (fp.add RNE (fp.sub RNE x1 x4) (fp.mul RNE x3 x12))))
(check-sat)
