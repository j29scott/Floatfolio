(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.div RNE x7 x11) (fp.neg x9)) (fp.div RNE (fp.sub RNE x1 x1) (fp.mul RNE x1 x8))) (fp.mul RNE (fp.neg (fp.neg x10)) (fp.add RNE (fp.mul RNE x1 x9) (fp.sub RNE x2 x4)))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.mul RNE x4 x9) (fp.mul RNE x2 x10)) (fp.mul RNE (fp.sub RNE x5 x10) (fp.add RNE x8 x0))) (fp.div RNE (fp.neg (fp.div RNE x1 x9)) (fp.neg (fp.add RNE x7 x6))))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.add RNE (fp.mul RNE x9 x0) (fp.div RNE x0 x1)) (fp.sub RNE (fp.div RNE x0 x2) (fp.mul RNE x8 x0))) (fp.add RNE (fp.neg (fp.add RNE x0 x7)) (fp.mul RNE (fp.div RNE x5 x0) (fp.mul RNE x7 x0)))) (fp.add RNE (fp.neg (fp.add RNE (fp.neg x5) (fp.add RNE x6 x11))) (fp.neg (fp.mul RNE (fp.add RNE x4 x10) (fp.mul RNE x4 x2))))))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.neg (fp.neg x1)) (fp.div RNE (fp.mul RNE x1 x5) (fp.div RNE x7 x3))) (fp.add RNE (fp.div RNE (fp.neg x1) (fp.div RNE x10 x9)) (fp.add RNE (fp.mul RNE x11 x1) (fp.neg x6)))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.div RNE x10 x11) (fp.neg x3)) (fp.sub RNE (fp.sub RNE x11 x0) (fp.neg x7))) (fp.div RNE (fp.div RNE (fp.sub RNE x4 x7) (fp.add RNE x8 x5)) (fp.mul RNE (fp.add RNE x8 x7) (fp.div RNE x10 x4))))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.neg (fp.div RNE x10 x3))) (fp.mul RNE (fp.div RNE (fp.mul RNE x1 x3) (fp.neg x6)) (fp.div RNE (fp.div RNE x9 x5) (fp.neg x7)))) (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.div RNE x8 x10) (fp.mul RNE x11 x3)) (fp.sub RNE (fp.add RNE x8 x7) (fp.sub RNE x3 x9))) (fp.add RNE (fp.neg (fp.div RNE x8 x7)) (fp.mul RNE (fp.neg x1) (fp.neg x1))))))
(check-sat)
