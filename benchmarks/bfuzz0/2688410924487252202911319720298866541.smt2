(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(declare-const x21 (_ FloatingPoint 11 53))
(declare-const x22 (_ FloatingPoint 11 53))
(declare-const x23 (_ FloatingPoint 11 53))
(declare-const x24 (_ FloatingPoint 11 53))
(declare-const x25 (_ FloatingPoint 11 53))
(declare-const x26 (_ FloatingPoint 11 53))
(declare-const x27 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.neg x19) (fp.add RNE x4 x23)) (fp.mul RNE (fp.sub RNE x11 x5) (fp.add RNE x5 x11))) (fp.neg (fp.add RNE (fp.mul RNE x20 x4) (fp.mul RNE x15 x18)))))
(assert (fp.gt (fp.neg (fp.neg (fp.neg x18))) (fp.sub RNE (fp.div RNE (fp.div RNE x26 x5) (fp.sub RNE x3 x6)) (fp.neg (fp.sub RNE x23 x19)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.add RNE x23 x23) (fp.neg x4))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x15 x0) (fp.sub RNE x8 x17)) (fp.sub RNE (fp.neg x15) (fp.div RNE x17 x3)))))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.add RNE x13 x6) (fp.mul RNE x15 x5)) (fp.mul RNE (fp.add RNE x7 x0) (fp.add RNE x21 x8))) (fp.neg (fp.mul RNE (fp.add RNE x10 x26) (fp.neg x12)))))
(assert (fp.geq (fp.neg (fp.mul RNE (fp.add RNE x18 x3) (fp.mul RNE x16 x6))) (fp.sub RNE (fp.sub RNE (fp.neg x12) (fp.mul RNE x2 x9)) (fp.add RNE (fp.div RNE x16 x22) (fp.mul RNE x3 x16)))))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.add RNE x27 x22) (fp.neg x10)) (fp.div RNE (fp.sub RNE x16 x9) (fp.mul RNE x9 x27))) (fp.add RNE (fp.mul RNE (fp.neg x26) (fp.add RNE x8 x26)) (fp.neg (fp.neg x27)))))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.neg x17) (fp.mul RNE x26 x25)) (fp.neg (fp.sub RNE x4 x19))) (fp.div RNE (fp.sub RNE (fp.mul RNE x18 x17) (fp.div RNE x21 x7)) (fp.div RNE (fp.sub RNE x12 x15) (fp.mul RNE x27 x20)))))
(assert (fp.gt (fp.neg (fp.add RNE (fp.sub RNE x19 x12) (fp.mul RNE x13 x1))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x18 x6) (fp.div RNE x22 x21)) (fp.add RNE (fp.add RNE x1 x20) (fp.neg x24)))))
(assert (fp.gt (fp.div RNE (fp.neg (fp.add RNE x2 x23)) (fp.div RNE (fp.mul RNE x9 x7) (fp.sub RNE x13 x21))) (fp.add RNE (fp.div RNE (fp.sub RNE x7 x4) (fp.add RNE x3 x7)) (fp.sub RNE (fp.neg x1) (fp.mul RNE x2 x17)))))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.add RNE x19 x17) (fp.add RNE x5 x13))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x7 x25) (fp.sub RNE x18 x19)) (fp.add RNE (fp.sub RNE x7 x9) (fp.div RNE x21 x23)))))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.neg x23) (fp.sub RNE x24 x24)) (fp.sub RNE (fp.mul RNE x2 x20) (fp.neg x14))) (fp.sub RNE (fp.neg (fp.mul RNE x2 x21)) (fp.neg (fp.add RNE x9 x11)))))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.neg x12) (fp.add RNE x17 x2)) (fp.sub RNE (fp.mul RNE x3 x24) (fp.add RNE x5 x25))) (fp.add RNE (fp.div RNE (fp.add RNE x7 x16) (fp.sub RNE x6 x1)) (fp.neg (fp.neg x4)))))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.neg x13) (fp.neg x7)) (fp.neg (fp.sub RNE x1 x13))) (fp.neg (fp.mul RNE (fp.div RNE x10 x8) (fp.mul RNE x14 x2)))))
(assert (fp.geq (fp.sub RNE (fp.add RNE (fp.div RNE x12 x14) (fp.mul RNE x5 x6)) (fp.mul RNE (fp.neg x27) (fp.div RNE x8 x20))) (fp.div RNE (fp.neg (fp.sub RNE x10 x3)) (fp.add RNE (fp.neg x19) (fp.mul RNE x21 x1)))))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.mul RNE x14 x17) (fp.mul RNE x27 x1)) (fp.mul RNE (fp.div RNE x3 x6) (fp.sub RNE x26 x5))) (fp.div RNE (fp.sub RNE (fp.add RNE x0 x16) (fp.sub RNE x27 x16)) (fp.sub RNE (fp.div RNE x4 x20) (fp.sub RNE x11 x22)))))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.mul RNE x20 x13) (fp.neg x25)) (fp.div RNE (fp.neg x17) (fp.add RNE x8 x0))) (fp.div RNE (fp.mul RNE (fp.add RNE x23 x16) (fp.div RNE x2 x0)) (fp.neg (fp.add RNE x4 x18)))))
(check-sat)
