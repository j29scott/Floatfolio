(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 11 53))
(declare-const x1 (_ FloatingPoint 11 53))
(declare-const x2 (_ FloatingPoint 11 53))
(declare-const x3 (_ FloatingPoint 11 53))
(declare-const x4 (_ FloatingPoint 11 53))
(declare-const x5 (_ FloatingPoint 11 53))
(declare-const x6 (_ FloatingPoint 11 53))
(declare-const x7 (_ FloatingPoint 11 53))
(declare-const x8 (_ FloatingPoint 11 53))
(declare-const x9 (_ FloatingPoint 11 53))
(declare-const x10 (_ FloatingPoint 11 53))
(declare-const x11 (_ FloatingPoint 11 53))
(declare-const x12 (_ FloatingPoint 11 53))
(declare-const x13 (_ FloatingPoint 11 53))
(declare-const x14 (_ FloatingPoint 11 53))
(declare-const x15 (_ FloatingPoint 11 53))
(declare-const x16 (_ FloatingPoint 11 53))
(declare-const x17 (_ FloatingPoint 11 53))
(declare-const x18 (_ FloatingPoint 11 53))
(declare-const x19 (_ FloatingPoint 11 53))
(declare-const x20 (_ FloatingPoint 11 53))
(assert (fp.leq (fp.div RNE (fp.mul RNE x3 x3) (fp.add RNE x1 x14)) (fp.sub RNE (fp.add RNE x4 x2) (fp.sub RNE x3 x11))))
(assert (fp.lt (fp.mul RNE (fp.mul RNE x6 x8) (fp.sub RNE x8 x16)) (fp.add RNE (fp.neg x7) (fp.neg x13))))
(assert (fp.leq (fp.neg (fp.mul RNE x10 x1)) (fp.sub RNE (fp.sub RNE x11 x14) (fp.sub RNE x3 x13))))
(assert (fp.lt (fp.sub RNE (fp.mul RNE x5 x14) (fp.sub RNE x20 x2)) (fp.div RNE (fp.sub RNE x9 x7) (fp.mul RNE x11 x15))))
(assert (fp.gt (fp.add RNE (fp.neg x12) (fp.div RNE x10 x0)) (fp.neg (fp.div RNE x1 x7))))
(assert (fp.leq (fp.mul RNE (fp.neg x3) (fp.div RNE x11 x7)) (fp.sub RNE (fp.mul RNE x0 x17) (fp.mul RNE x3 x6))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x2 x16) (fp.sub RNE x16 x16)) (fp.add RNE (fp.add RNE x7 x17) (fp.add RNE x4 x4))))
(assert (fp.geq (fp.neg (fp.div RNE x12 x2)) (fp.add RNE (fp.mul RNE x15 x2) (fp.div RNE x0 x4))))
(assert (fp.gt (fp.sub RNE (fp.div RNE x12 x17) (fp.div RNE x6 x9)) (fp.div RNE (fp.mul RNE x20 x0) (fp.neg x16))))
(assert (fp.gt (fp.mul RNE (fp.add RNE x7 x16) (fp.add RNE x6 x1)) (fp.neg (fp.add RNE x2 x1))))
(assert (fp.eq (fp.mul RNE (fp.neg x13) (fp.neg x12)) (fp.div RNE (fp.mul RNE x20 x12) (fp.sub RNE x1 x11))))
(assert (fp.eq (fp.add RNE (fp.neg x6) (fp.add RNE x1 x10)) (fp.add RNE (fp.add RNE x2 x20) (fp.sub RNE x20 x1))))
(assert (fp.leq (fp.sub RNE (fp.add RNE x11 x14) (fp.neg x1)) (fp.mul RNE (fp.mul RNE x6 x8) (fp.sub RNE x10 x17))))
(assert (fp.geq (fp.mul RNE (fp.sub RNE x4 x1) (fp.add RNE x8 x12)) (fp.neg (fp.div RNE x7 x6))))
(assert (fp.eq (fp.mul RNE (fp.add RNE x15 x9) (fp.neg x19)) (fp.mul RNE (fp.mul RNE x9 x5) (fp.add RNE x12 x1))))
(assert (fp.gt (fp.neg (fp.div RNE x10 x8)) (fp.div RNE (fp.mul RNE x0 x12) (fp.mul RNE x16 x12))))
(assert (fp.eq (fp.mul RNE (fp.sub RNE x15 x8) (fp.add RNE x4 x0)) (fp.add RNE (fp.add RNE x6 x4) (fp.mul RNE x8 x16))))
(assert (fp.eq (fp.sub RNE (fp.add RNE x10 x11) (fp.add RNE x9 x5)) (fp.add RNE (fp.sub RNE x0 x6) (fp.mul RNE x3 x17))))
(assert (fp.geq (fp.sub RNE (fp.sub RNE x18 x15) (fp.add RNE x20 x16)) (fp.sub RNE (fp.div RNE x6 x5) (fp.sub RNE x5 x18))))
(check-sat)
