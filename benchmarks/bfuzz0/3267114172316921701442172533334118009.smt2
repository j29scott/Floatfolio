(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(declare-const x10 (_ FloatingPoint 8 24))
(declare-const x11 (_ FloatingPoint 8 24))
(declare-const x12 (_ FloatingPoint 8 24))
(declare-const x13 (_ FloatingPoint 8 24))
(declare-const x14 (_ FloatingPoint 8 24))
(declare-const x15 (_ FloatingPoint 8 24))
(declare-const x16 (_ FloatingPoint 8 24))
(declare-const x17 (_ FloatingPoint 8 24))
(declare-const x18 (_ FloatingPoint 8 24))
(declare-const x19 (_ FloatingPoint 8 24))
(declare-const x20 (_ FloatingPoint 8 24))
(declare-const x21 (_ FloatingPoint 8 24))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.sub RNE (fp.neg x13) (fp.neg x17)) (fp.mul RNE (fp.div RNE x3 x8) (fp.div RNE x4 x7))) (fp.add RNE (fp.mul RNE (fp.add RNE x9 x6) (fp.mul RNE x7 x19)) (fp.sub RNE (fp.div RNE x2 x8) (fp.add RNE x0 x4)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.neg x6) (fp.sub RNE x12 x16)) (fp.sub RNE (fp.mul RNE x2 x3) (fp.div RNE x8 x14))) (fp.mul RNE (fp.mul RNE (fp.sub RNE x3 x1) (fp.neg x2)) (fp.sub RNE (fp.div RNE x3 x12) (fp.add RNE x7 x6))))))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.sub RNE (fp.neg x18) (fp.div RNE x18 x13)) (fp.add RNE (fp.neg x19) (fp.div RNE x20 x7))) (fp.div RNE (fp.neg (fp.mul RNE x1 x2)) (fp.div RNE (fp.add RNE x0 x9) (fp.div RNE x8 x6)))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.div RNE x4 x14) (fp.mul RNE x15 x11)) (fp.div RNE (fp.neg x9) (fp.mul RNE x16 x20))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x20 x15) (fp.mul RNE x21 x12)) (fp.mul RNE (fp.div RNE x5 x14) (fp.mul RNE x9 x10))))))
(assert (fp.gt (fp.add RNE (fp.neg (fp.div RNE (fp.sub RNE x8 x14) (fp.div RNE x14 x17))) (fp.sub RNE (fp.mul RNE (fp.add RNE x13 x16) (fp.neg x8)) (fp.mul RNE (fp.neg x2) (fp.add RNE x8 x7)))) (fp.add RNE (fp.add RNE (fp.mul RNE (fp.div RNE x14 x7) (fp.mul RNE x17 x13)) (fp.div RNE (fp.mul RNE x3 x5) (fp.add RNE x6 x6))) (fp.add RNE (fp.add RNE (fp.neg x8) (fp.add RNE x3 x1)) (fp.mul RNE (fp.add RNE x20 x11) (fp.add RNE x6 x8))))))
(assert (fp.geq (fp.div RNE (fp.neg (fp.add RNE (fp.neg x3) (fp.mul RNE x4 x5))) (fp.sub RNE (fp.neg (fp.mul RNE x17 x7)) (fp.add RNE (fp.neg x1) (fp.div RNE x14 x19)))) (fp.add RNE (fp.add RNE (fp.mul RNE (fp.mul RNE x12 x4) (fp.mul RNE x15 x19)) (fp.div RNE (fp.div RNE x1 x18) (fp.div RNE x11 x5))) (fp.mul RNE (fp.add RNE (fp.sub RNE x9 x9) (fp.neg x0)) (fp.div RNE (fp.div RNE x15 x7) (fp.mul RNE x13 x3))))))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.neg x6) (fp.div RNE x9 x18)) (fp.add RNE (fp.add RNE x18 x1) (fp.div RNE x4 x6))) (fp.div RNE (fp.neg (fp.div RNE x6 x12)) (fp.sub RNE (fp.mul RNE x17 x15) (fp.add RNE x2 x6)))) (fp.add RNE (fp.neg (fp.sub RNE (fp.add RNE x19 x18) (fp.add RNE x19 x8))) (fp.add RNE (fp.add RNE (fp.neg x13) (fp.add RNE x18 x0)) (fp.mul RNE (fp.mul RNE x1 x17) (fp.sub RNE x11 x19))))))
(check-sat)
