:- module(swi).
:- export convert_time / 2.
:- export get_time / 1.
:- export sformat / 3.
:- export sformat / 2.
:- export forall_ / 3.
:- export forall / 2.
:- export predsort_ / 4.
:- export predsort / 3.
:- export select / 3.
:- export merge_set / 3.
:- export between / 3.
:- export sub_string / 5.
:- export string_concat / 3.
:- export string_to_list / 2.
:- export string_to_atom / 2.
:- export line_count / 2.
:- export character_count / 2.
:- export byte_count / 2.
:- export wait_for_input / 3.
:- export set_stream / 2.
:- export seek / 4.
:- export stream_property / 2.
:- export open_null_stream / 1.
:- export predicate_property_ / 3.
:- export current_predicate_ / 3.
:- export predicate_property / 2.
:- export current_predicate / 2.
:- export current_functor / 2.
:- export hash / 1.
:- export index / 1.
:- export hash_term / 2.
:- export current_flag / 1.
:- export flag / 3.
:- export on_signal_ / 4.
:- export current_signal / 3.
:- export on_signal / 3.
:- export call_ / 7.
:- export call_ / 6.
:- export call_ / 5.
:- export call_ / 4.
:- export call_ / 3.
:- export call / 6.
:- export call / 5.
:- export call / 4.
:- export call / 3.
:- export call / 2.
:- export ignore_ / 2.
:- export ignore / 1.
:- export unifiable / 3.
:- export ?= / 2.
:- export \=@= / 2.
:- export =@= / 2.
:- export cyclic_term / 1.
:- export callable / 1.
:- export rational / 3.
:- reexport eclipse_language except call / 2, (dynamic) / 1, ensure_loaded / 1, select / 3, set_stream / 2.
:- reexport cio.
:- reexport catch / 3, close / 2, current_input / 1, current_output / 1, throw / 1, set_stream_position / 2, set_input / 1, set_output / 1, set_stream_position / 2, unify_with_occurs_check / 2 from iso.
:- reexport multifile / 1, op(_16685, _16686, multifile), public / 1, op(_16698, _16699, public), macro((:) / 2, _16706, [clause]), (dynamic) / 1, use_module / 2, ensure_loaded / 1, format / 2, format / 3 from quintus.
:- export op(0, xfx, of).
:- export op(0, xfx, with).
:- export op(0, xfy, do).
:- export op(0, xfx, @).
:- export op(0, fx, -?->).
:- export op(0, fy, not).
:- export op(0, fy, spied).
:- export op(0, fx, delay).
:- export macro((with) / 2, swi : (=) / 2, []).
:- export macro((of) / 2, swi : (=) / 2, []).
:- export op(1150, fx, initialization).
:- export op(1150, fx, module_transparent).
:- export op(1150, fx, multifile).
:- export op(1150, fx, thread_local).
:- export op(1150, fx, volatile).
:- export op(954, xfy, \).
:- export op(600, xfy, :).
:- export op(500, yfx, xor).
:- export op(500, fx, ?).
:- export op(500, fx, \).
:- export op(200, xfx, **).
:- export syntax_option(nested_comments).
:- export syntax_option(iso_escapes).
:- export syntax_option(iso_base_prefix).
:- export syntax_option(doubled_quote_is_quote).
:- export syntax_option(no_array_subscripts).
:- export syntax_option(bar_is_no_atom).
:- export syntax_option(no_attributes).
:- export syntax_option(no_curly_arguments).
:- export syntax_option(nl_in_quotes).
:- export chtab(96, string_quote).
:- export chtab(34, list_quote).
:- export op(700, xfx, [=@=, \=@=]).
:- reexport apply / 2 from apply.
:- tool(forall / 2,forall_ / 3).
:- tool(predsort / 3,predsort_ / 4).
:- tool(predicate_property / 2,predicate_property_ / 3).
:- tool(current_predicate / 2,current_predicate_ / 3).
:- tool(on_signal / 3,on_signal_ / 4).
:- tool(call / 6,call_ / 7).
:- tool(call / 5,call_ / 6).
:- tool(call / 4,call_ / 5).
:- tool(call / 3,call_ / 4).
:- tool(call / 2,call_ / 3).
:- tool(ignore / 1,ignore_ / 2).
:- comment(forall_ / 3, hidden).
:- comment(predsort_ / 4, hidden).
:- comment(predicate_property_ / 3, hidden).
:- comment(current_predicate_ / 3, hidden).
:- comment(on_signal_ / 4, hidden).
:- comment(call_ / 7, hidden).
:- comment(call_ / 6, hidden).
:- comment(call_ / 5, hidden).
:- comment(call_ / 4, hidden).
:- comment(call_ / 3, hidden).
:- comment(ignore_ / 2, hidden).
:- comment(summary, 'SWI-Prolog compatibility package').
:- comment(author, 'J Chamois').
:- comment(copyright, 'This file is in the public domain').
:- comment(date, '$Date: 2008/03/19 02:00:22 $').
:- comment(desc, html('\n    This library is incomplete, and intended to ease the task of\n    porting SWI-Prolog programs to ECLiPSe Prolog, or to add modules\n    written in SWI-Prolog to applications written in ECLiPSe. \n    <P>\n    It reuses parts of the C-Prolog, Quintus and Iso compatibility\n    libraries.\n    <P>\n    The effect of the compatibility library is local to the module where\n    it is loaded. For maximum compatibility, an SWI program should\n    be wrapped in a separate module starting with a directive like\n    <PRE>\n    :- module(mymodule, [], swi).\n    </PRE>\n    In this case, Eclipse-specific language constructs will not be available.\n    <P>\n    If the compatibility package is loaded into a normal Eclipse module, like\n    <PRE>\n    :- module(mymixedmdule).\n    :- use_module(library(swi)).\n    </PRE>\n    then SWI and Eclipse language features can be used together. \n    However, ambiguities must be resolved explicitly and confusion may\n    arise from the different meaning of quotes in Eclipse vs SWI-Prolog.\n    ')).
:- comment(see_also, [library(cio), library(cprolog), library(quintus), library(sicstus)]).
