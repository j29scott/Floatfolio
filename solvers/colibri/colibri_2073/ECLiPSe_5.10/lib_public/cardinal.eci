:- module(cardinal).
:- export my_print_set_handler / 2.
:- export my_unify_sets_handler / 2.
:- export `< / 2.
:- export notin / 2.
:- export in / 2.
:- export `<> / 2.
:- export # / 2.
:- export all_disjoint / 1.
:- export all_union / 2.
:- export card_labeling / 1.
:- export refine / 2.
:- export set_labeling / 2.
:- export set_labeling / 1.
:- export complement / 3.
:- export complement / 2.
:- export sets / 4.
:- export set / 4.
:- export maximum / 2.
:- export minimum / 2.
:- export union_var / 2.
:- export lub / 2.
:- export lub / 4.
:- export glb_poss / 3.
:- export poss / 2.
:- export glb / 2.
:- export domain / 3.
:- export domain / 2.
:- export cardinality / 2.
:- export `>= / 2.
:- export `:: / 2.
:- export `-@ / 2.
:- export `@ / 2.
:- export `$ / 2.
:- export `/= / 2.
:- export `= / 2.
:- export op(650, xfx, `=).
:- export op(650, xfx, `/=).
:- export op(650, xfx, `$).
:- export op(650, xfx, `@).
:- export op(650, xfx, `-@).
:- export op(650, xfx, `::).
:- export op(550, xfx, `>=).
:- export op(500, yfx, `\/).
:- export op(400, yfx, `/\).
:- export op(300, yfx, `\).
:- export op(650, fx, #).
:- export op(650, xfx, `<>).
:- export op(650, xfx, in).
:- export op(650, xfx, notin).
:- export op(650, xfx, `<).
:- export op(300, yfx, \).
:- export struct(cardinal(domain, cardinality, minimum, maximum, union, bounded, glb, lub, bound)).
:- comment(summary, "Finite Set Constraints Library").
:- comment(author, "Francisco Azevedo, CENTRIA").
:- comment(status, evolving).
:- comment(desc, html("Cardinal is a sets constraints library with especial inferences\n\ton sets cardinality and other optional set functions (minimum and maximum for\n\tsets of integers, and union for sets of sets.)\n\t<P>\n\tA set is naturally used to collect distinct elements sharing some property.\n\tCombinatorial search problems over these data structures can thus be naturally\n\tmodelled by high level languages with set abstraction facilities, and efficiently\n\tsolved if constraint reasoning prunes search space when the sets are not fully\n\tknown a priori (i.e. they are variables ranging over a set domain).\n\t<P>\n\tMany complex relations between sets can be expressed with constraints such as set\n\tinclusion, disjointness and equality over set expressions that may include such\n\toperators as intersection, union or difference of sets. Also, as it is often the\n\tcase, one is not interested simply on these relations but on some attribute or\n\tfunction of one or more sets (e.g. the cardinality of a set). For instance, the\n\tgoal of many problems is to maximise or minimise the cardinality of a set. Even\n\tfor satisfaction problems, some sets, although still variables, may be constrained\n\tto a fixed cardinality or a stricter cardinality domain than just the one inferred\n\tby the domain of a set variable (for instance, the cardinality of a set may have\n\tto be restricted to be an even number).\n\t<P>\n\tCardinal represents set variables by set intervals with a lower and an upper bound\n\tconsidering set inclusion as a partial ordering. Consistency techniques are then\n\tapplied to set constraints by interval reasoning. A set domain variable S may be\n\tspecified by an interval [A,B] where A and B are known sets ordered by set inclusion,\n\trepresenting the greatest lower bound and the lowest upper bound of S, respectively.\n\t<P>\n\tThe cardinality of a set S, given as a finite domain variable C (#S=C), is not a\n\tbijective function since two distinct sets may have the same cardinality. Still,\n\tit can be constrained by the cardinalities of the set bounds.\n\t<P>\n\tA simple inference that can be done using cardinality information is to instantiate\n\tthe set to one of the set bounds, when it is known that the set cardinality must be\n\tequal to the cardinality of that bound. But Cardinal does much more than that.\n\tFor instance, consider two set variables\n\tS1,S2, that can assume either set value {} (empty set) or {a,b}. Their set domain\n\tis thus [{},{a,b}] with cardinality 0 or 2. The intersection of S1 and S2 also\n\tyelds set domain [{},{a,b}]. But we need a special inference to conclude that the\n\tintersection cardinality is also either 0 or 2 (it can not be 1). Set solvers\n\tother than Cardinal do not make such inferences.\n\t<P>\n\tInferences using cardinalities can be very useful to deduce more rapidly the\n\tnon-satisfiability of a set of constraints, thus improving efficiency of\n\tcombinatorial search problem solving. As another simple example, if Z is known to be\n\tthe set difference between Y and X, both contained in set {a,b,c,d}, and it is known\n\tthat X has exactly 2 elements, it should be inferred that the cardinality of Z can\n\tnever exceed 2 elements (i.e. from X,Y in {a,b,c,d}, #X=2, Z=Y\\X it should be\n\tinferred that #Z =< 2). A failure could thus be immediately detected upon the\n\tposting of a constraint such as #Z=3.\n\t<P>\n\tInference capabilities such as these are particularly important when solving set\n\tproblems where cardinality plays a special role. Cardinal thus fully uses\n\tconstraint propagation on sets cardinality.\n\t<P>\n\n<B>Intervals and Lattices</B>\n\t<P>\n\tSet intervals define a lattice of sets. The set inclusion relation between two\n\tsets defines a partial order on P(U), the powerset over a certain universe U,\n\tthe set of all subsets of U.\n\t<P>\n\tDue to the transitivity rule, the top set, U, includes all sets of P(U);\n\twhile the bottom set, {}, is included in all sets of P(U). Consequently,\n\tsets U and {} constitute an upper bound and a lower bound of P(U), respectively.\n\tIn addition, they are the least upper bound (lub) or join, and the greatest lower\n\tbound (glb) or meet of P(U), since there is no other upper bound contained in\n\t(\221less\222 than) U  nor other lower bound containing (\221greater\222 than) the empty set {}.\n\t<P>\n\tLet us now consider for U={a,b,c,d}, the sub-lattice connecting {a,b,d} and {b}\n\t(thus also including sets {a,b} and {b,d}). Sets {} and {a,b,c,d} are still a\n\tlower and an upper bound, but this time the glb is {b} and the lub is {a,b,d}.\n\t<P>\n\tThe two bounds (glb and lub) define a set interval (e.g. [{b},{a,b,d}]) and may\n\tform the domain of a set variable S, meaning that set S is one of those defined\n\tby its interval (lattice); all other sets outside this domain are excluded from\n\tthe solution. Thus, b is definitely an element of S, while a and d are the only\n\tother possible elements.\n\t<P>\n\tSet interval reasoning allows us to apply consistency techniques such as Bounded\n\tArc Consistency, due to the monotonic property of set inclusion.\n\t<P>\n\tAny set variable must then have a domain consisting of a set interval. In addition,\n\tthis interval should be kept as small as possible, in order to discard all sets\n\tthat are known not to belong to the solution, while not loosing any of the still\n\tpossible values (sets). The smallest such domain is the one with equal glb and lub,\n\ti.e. a domain of the form [B,B], corresponding to a constant set B. For a set\n\tvariable that can assume any set value from a collection of known sets, such as\n\t{{a,b},{a,c},{d}}, the corresponding interval is the convex closure of such\n\tcollection (which in this case is the set interval [{},{a,b,c,d}]). In general,\n\tfor n possible arbitrary sets S1...Sn, the corresponding set variable X has an\n\tinterval domain [glb, lub] where glb is the intersection of all S1...Sn, and lub\n\tis their union.\n\t<P>\n<B>Implementation Notes</B>\n\t<P>\n\tIn Cardinal, all sets are represented as sorted lists, which eases working with\n\tsets and lists interchangeably.\n\t<P>\n\tSet variable bounds are represented by its glb and its lub\\glb, the set of\n\tadditional possible elements, which we refer to as poss.\n\t<P>\n\tCardinal implements a number of set constraints such as inclusion, equality,\n\tinequality, membership, disjointness, and even complement, together with set\n\toperations (union, intersection and difference), as built-in.\n\t<P>\n\tAs mentioned, Cardinal also allows the definition and use of optional set functions\n\t(other than cardinality): minimum and maximum, for sets of integers, and union,\n\tfor sets of sets. Refer to the available predicates for details.\n")).
:- comment(struct(cardinal), [summary : "Cardinal attributes of a set variable", fields : [domain : "Set domain in the form [Glb:NIn,Poss:NMax], where Glb is the set's\n\t\t\tglb, NIn its cardinality, Poss is its poss (i.e. its lub\\glb),\n\t\t\tand NMax is the lub's cardinality (i.e. NIn + #(Poss)).\n\t\t\tIf it is a set of sets and a union function attribute has been\n\t\t\tdeclared, then each element of Poss comes annotated with its\n\t\t\trespective length.", cardinality : "Cardinality function (an integer or an FD variable).", minimum : "Minimum function (an integer or an FD variable),\n\t\t\tfor sets of integers. Free variable if unused.", maximum : "Maximum function (an integer or an FD variable),\n\t\t\tfor sets of integers. Free variable if unused.", union : html("Union function, for sets of sets. Free variable if unused;\n\t\t\totherwise, a list in the form\n\t\t\t[UnionVar, GlbU+PossU, Singles, Lengths], where:<PRE>\nUnionVar: A set (variable or ground) corresponding to the union of the set's elements\n\t(sets themselves);\nGlbU: Set union of the set's glb;\nPossU: Set of possible union elements with counters (X:N), i.e. an ordered\n\tlist of all elements in the sets in set's poss (lub\\glb)\n\twith the number of occurrences attached\nSingles: Set of elements where N=1 in PossU</PRE>"), bounded : "Suspension list.", glb : "Suspension list.", lub : "Suspension list.", bound : "Suspension list."]]).
:- comment(# / 2, [amode : #(?, ?), args : ["SetExpression" : "A Set expression.", "Cardinality" : "An integer or an FD variable."], summary : "Cardinality of a set expression", desc : html("Cardinality is the cardinality of SetExpression, a set term possibly\n\t\tincluding set operators `/\\, `\\/ and `\\ (or \\). <P>\n\t\tSetExpression is first evaluated into a ground set or a set variable and then\n\t\tits Cardinality is applied as in cardinality/2."), resat : "No.", fail_if : "Fails if Cardinality can not be the cardinality of SetExpression.", eg : "\n?- S `::[]..[a,b], #(S,C).\n?- S `::[]..[a,b], #(S `/\\ [b,c],1).\n?- S `::[]..[a,b], #([b,c] `\\/ S `\\ [a,z] `/\\ [g], C).\nC = 2,\n?- S `::[]..[a,b], #(([b,c] `\\/ S `\\ [a,z]) `/\\ [g], C).\nC = 0\n?- S1 `::[]..[a,b], S2 `::[]..[b,c,d], #(S1 `/\\ S2, 2).\nno\n", see_also : [cardinality / 2, `= / 2]]).
:- comment(`$ / 2, [template : "?SetVar1 `$ ?SetVar2", args : ["SetVar1" : "A set variable.", "SetVar2" : "A set variable."], summary : "Set disjointness constraint", desc : html("Constrain sets SetVar1 and SetVar2 to be disjoint. I.e. SetVar1 and\n\t\tSetVar2 should have no common elements (empty intersection)."), resat : "No.", fail_if : "Fails if SetVar1 and SetVar2 can not be disjoint.", eg : "\n?- [] `$ [8], [7] `$ [8], [] `$ [].\nyes\n\n?- [7,8] `$ [8]  ; [7] `$ [7,8] ; [a] `$ [a] ; [a,b] `$ [b,a].\nno\n\n?- sets([X,Y], [],[8,9], [cardinality:1]), X `$ Y, set_labeling([X,Y]).\nX = [8], Y = [9] ;\nX = [9], Y = [8] ;\nno\n\n?- S `:: []+[a,b], X=S, X `$ S.\nS = [], X = []\n\n?- sets([X,Y], [],[7,8,9], [cardinality:2]), X `$ Y.\nno\n\n?- sets([X,Y], [],[7,8,9], [cardinality:[1,2]]), X `$ Y, #(X,2), #(Y,C).\nC = 1\n\n?- X `:: [a]+[b,c,d], Y `:: []+[a,b,c,d,e,f], X `$ Y, c `@ Y, poss(X,PX), poss(Y,PY).\nPX = [b,d], PY = [b,d,e,f]\n", see_also : [all_disjoint / 1, `<> / 2, complement / 2, complement / 3, `/= / 2, `>= / 2]]).
:- comment(`-@ / 2, [template : "?Element `-@ ?SetVariable", args : ["SetVariable" : "A set variable.", "Element" : "A ground term or a variable."], summary : "Set non-membership constraint", desc : html("Constrain SetVariable to not include Element.<P>\n\t\tIf Element is a variable then the constraint\n\t\tis suspended until it becomes ground."), resat : "No.", fail_if : "Fails if Element must be a member of SetVariable.", eg : "\n?- S `:: []..[a,b], a `-@ S, glb_poss(S,G,P).\nG = [], P = [b]\n\n?- S `:: [c]+[a,b], c `-@ S.\nno\n\n?- S `:: [a]+[b,c], z `-@ S, glb_poss(S,G,P).\nG = [a], P = [b,c]\n\n?- S `:: []..[a,b], X `-@ S, glb_poss(S,G,P).\nG = [], P = [a,b]\n\n?- S `:: []..[a,b], X `-@ S, X=b, glb_poss(S,G,P).\nG = [], P = [a]\n", see_also : [`@ / 2, in / 2, notin / 2, `:: / 2]]).
:- comment(`/= / 2, [template : "?SetVar1 `/= ?SetVar2", args : ["SetVar1" : "A set variable.", "SetVar2" : "A set variable."], summary : "Set inequality constraint", desc : html("Constrain sets SetVar1 and SetVar2 to be different.<P>\n\t\tThis constraint is suspended until one of the two sets is bound\n\t\tto another set (variable or ground)."), resat : "No.", fail_if : "Fails if SetVar1 and SetVar2 must be the same set.", eg : "\n?- [] `/= [8], [7] `/= [8], [7,8] `/= [8], [7] `/= [7,8].\nyes\n\n?- [] `/= [] ; [a] `/= [a] ; [a,b] `/= [b,a].\nno\n\n?- sets([X,Y], [],[8,9], [cardinality:1]), X `/= Y, set_labeling([X,Y]).\nX = [8], Y = [9] ;\nX = [9], Y = [8] ;\nno\n\n?- sets([X,Y], [],[8,9], []), X `/= Y, X=Y.\nno\n\n?- X `:: [8]+[8,9], [8,9] `/= X, card_labeling([X]).\nX = [8] ;\nno\n", see_also : [`$ / 2, complement / 2, complement / 3, `= / 2]]).
:- comment(`:: / 2, [template : "?SetVariable `:: ?Domain", args : ["SetVariable" : "A variable.", "Domain" : "A set domain with optional cardinality declaration."], summary : "Set variable declaration", desc : html("Declare or constrain a set domain variable to have Domain as domain.<P>\n\t\tDomain may assume 3 forms: Glb..Lub, Glb+Poss or Glb+Poss:Cardinality.<P>\n\t\tGlb is a ground set denoting the SetVariable's glb. Lub is a ground set\n\t\tdenoting the SetVariable's lub. Poss is a ground set denoting the SetVariable's\n\t\tposs (lub\\glb). Cardinality is the SetVariable's cardinality, which may be\n\t\tan integer, an FD variable, or an integer domain (list or range)."), resat : "No.", fail_if : "Fails if SetVariable can not be constrained accordingly.", eg : "\n?- S `:: []..[a,b].\n?- S `:: []+[a,b].\n?- S `:: []+[a,b]:1.\n?- S `:: [x]+[a,b]:C.\n?- S `:: []+[a,b]:[0,2].\n?- S `:: [c]+[a,b,d,e,f,g,h,i,j,k]:[2,4..7].\n", see_also : [set / 4, sets / 4, cardinality / 2, union_var / 2, minimum / 2, maximum / 2, set_labeling / 1]]).
:- comment(`< / 2, [template : "?SetVar1 `< ?SetVar2", args : ["SetVar1" : "A set variable.", "SetVar2" : "A variable."], summary : "Set inclusion constraint (obsolete)", desc : html("Constrain sets SetVar1 and SetVar2 so that SetVar2 contains SetVar1.<P>\n\t\tObsolete: (`<)/2 is available only for compatibility with conjunto library syntax.\n\t\tIt is equivalent (with swapped arguments) to the preferred `>=/2.\n\t\tSee its description for details."), see_also : [`>= / 2, `= / 2]]).
:- comment(`<> / 2, [template : "?SetVar1 `<> ?SetVar2", args : ["SetVar1" : "A set variable.", "SetVar2" : "A set variable."], summary : "Set disjointness constraint (obsolete)", desc : html("Constrain sets SetVar1 and SetVar2 to be disjoint.<P>\n\t\tObsolete: `<>/2 is available only for compatibility with conjunto library syntax.\n\t\tIt is equivalent to the preferred `$/2. See its description for details."), see_also : [`$ / 2, all_disjoint / 1, complement / 2, complement / 3, `/= / 2, `>= / 2]]).
:- comment(`= / 2, [template : "?SetExp1 `= ?SetExp2", args : ["SetExp1" : "A set expression.", "SetExp2" : "A set expression."], summary : "Set equality constraint", desc : html("Constrain sets in both hand sides of equation so that SetExp1 and\n\t\tSetExp2 represent the same set.<P>\n\t\tA set expression is a set (variable or ground) or a set operation between\n\t\ttwo set expressions. Possible set operations are set union, set intersection\n\t\tand set difference, and the respective operators are `\\/, `/\\ and `\\.\n\t\tThese operators are defined as:\n<PRE>\n:- op(500, yfx, `\\/).   %set union\n:- op(400, yfx, `/\\).   %set intersection\n:- op(300, yfx, `\\ ).   %set difference\n</PRE>"), resat : "No.", fail_if : "Fails if SetExp1 can not be the same set as SetExp2.", eg : "\n/*\nExamples of equalities between set expressions, being S,T,U,V,W,X,Y,Z set variables:\n\nX `= Y\nS `\\/ Y `\\ Z `= T `/\\ S `\\/ U `/\\ W\nV `\\ ([a,b,d] `\\/ W) `\\/ (S `\\ W) `= ((T `/\\ [3,9]) `\\/ W) `\\ U\n*/\n\n% just union:\n?- [8,a,9] `\\/ [i,8,o] `\\/ [] `\\/ [a,8,5] `= U.\nU = [5,8,9,a,i,o]\n\n?- X `\\/ Y `= [8,9], glb_poss(X,GX,PX), glb_poss(Y,GY,PY).\nGX = [], PX = [8,9], GY = [], PY = [8,9]\n\n?- X `:: [a]+[b,c], X `\\/ [b,n] `= U, glb_poss(X,GX,PX), glb_poss(U,GU,PU).\nGX = [a], PX = [b,c], GU = [a,b,n], PU = [c]\n\n?- sets([A,B],[a,b],[d,g,h,j],[cardinality:4]), A`\\/B`=U, #(U,C), fd:dom(C,DomC).\nDomC = [4,5,6]\n\n?- sets([X,Y],[a,b],[d,g,h,j],[]), X`\\/Y`=U, #(U,4), #(Y,C), fd:dom(C,DomC).\nDomC = [2,3,4]\n\n?- sets([S,X], [],[a,b], [cardinality:[0,2]]), U `= X `\\/ S, #(U,C), fd:dom(C,DomC).\nDomC = [0,2]\n\n?- S `:: [a,c]+[b,g,h,j,l]:3, X`::[a]+[b,h,t,u,y]:2, U `= X `\\/ S, #(U,C), fd:dom(C,DomC).\nDomC = [3,4]\n\n?- S `:: [a,c]+[b,g,h,j,l], X`::[a]+[b,h,t,u,y], U `= X `\\/ S, #(U,C), fd:(C::0..3), #(X,CX), fd:dom(CX,DomCX).\nDomCX = [1,2]\n\n\n% just intersection:\n?- I `= [4,6] `/\\ [3,6,8].\nI = [6]\n\n?- [a,b,c,d,e] `/\\ [a,b,c,e,f,g] `/\\ [b,d,e,f,x,y] `= I.\nI = [b,e]\n\n?- X `:: [a]+[b,c], X `/\\ [b,n] `= I, glb_poss(X,GX,PX), glb_poss(I,GI,PI).\nGX = [a], PX = [b,c], GI = [], PI = [b]\n\n?- S `:: [a]+[b,c], X`::[]+[7,8,9], I`::[]+[a,b,c,7,z,99], I `= X `/\\ S.\nI = []\n\n?- sets([A,B],[a,b],[d,g,h,j],[cardinality:5]), A`/\\B`=I, #(I,C), fd:dom(C,DomC).\nDomC = [4,5]\n\n?- S `:: [a,c]+[g,h,j,l], X`::[a]+[b,h,t,u,y], I `= X `/\\ S, #(I,C), fd:dom(C,DomC).\nDomC = [1,2]\n\n\n% just difference:\n?- D `= [4,6] `\\ [3,6,8].\nD = [4]\n\n?- [a,b,c,d,e] `\\ [a,e,f,g] `\\ [b,d,e,f,x,y] `= D.\nD = [c]\n\n?- [a,b,c,d,e] `\\ ([a,e,f,g] `\\ [b,d,e,f,x,y]) `= D.\nD = [b,c,d,e]\n\n?- X `:: [a]+[b,c], X `\\ [b,n] `= D, glb_poss(X,GX,PX), glb_poss(D,GD,PD).\nGX = [a], PX = [b,c], GD = [a], PD = [c]\n\n?- S `:: [a]+[b,c], X`::[]+[7,8,9], D`::[]+[a,b,c,7,z,99], D `= X `\\ S, glb_poss(D,GD,PD).\nGD = [], PD = [7]\n\n?- sets([A,B],[a,b],[d,g,h,j],[cardinality:5]), A`\\B`=D, #(D,C), fd:dom(C,DomC).\nDomC = [0,1]\n\n?- sets([X,Y],[a,b],[d,g,h,j],[]), X`\\Y`=D, #(D,4).\nX = [a,b,d,g,h,j], Y = [a,b]\n\n?- S `:: [a,c,z]+[g,h], X`::[a]+[b,c,h,t], D `= S `\\ X, #(D,C), fd:dom(C,DomC).\nDomC = [1,2,3,4].\n\n?- S `:: []+[a,b], X=S, #(S `\\ X, C).\nC = 0", see_also : [`/= / 2, set_labeling / 1, set_labeling / 2]]).
:- comment(`>= / 2, [template : "?SetVar1 `>= ?SetVar2", args : ["SetVar1" : "A set variable.", "SetVar2" : "A variable."], summary : "Set inclusion constraint", desc : html("Constrain sets SetVar1 and SetVar2 so that SetVar1 contains SetVar2.<P>\n\t\tIf SetVar2 is not yet a set domain variable it is declared as such, using\n\t\tSetVar1's lub."), resat : "No.", fail_if : "Fails if SetVar1 can not contain SetVar2.", eg : "\n?- [7,8,9] `>= [7,9], [7,8,9] `>= [7,8,9], [7,8,9] `>= [], [7,8,9] `>= [9].\nyes\n\n?- [1,7,9] `>= [7,8].\nno\n\n?- X `:: [a]+[b,c,d], Y `:: []+[a,b,c,d,e,f], X `>= Y, poss(Y,PY).\nPY = [a,b,c,d]\n\n?- X `:: [a]+[b,c,d], Y `:: []+[a,b,c,d,e,f], Y `>= X, glb(Y,GY).\nGY = [a]\n\n?- X `:: [a]+[b,c,d,z]:CX, Y `:: []+[a,b,c,d,e,f]:CY, X `>= Y, CX=2, fd:maxdomain(CY,MaxCY).\nMaxCY = 2\n\n?- X `:: [a]+[b,c,d,z]:CX, Y `:: []+[a,b,c,d,e,f]:CY, X `>= Y, CY=3, fd:mindomain(CX,MinCX).\nMinCX = 3.\n", see_also : [`< / 2, `= / 2]]).
:- comment(`@ / 2, [template : "?Element `@ ?SetVariable", args : ["SetVariable" : "A set variable.", "Element" : "A ground term or a variable."], summary : "Set membership constraint", desc : html("Constrain SetVariable to include Element.<P>\n\t\tIf Element is a variable then if SetVariable is a ground singleton,\n\t\tthen Element is unified with its single element, otherwise the constraint\n\t\tis suspended until Element or SetVariable is ground."), resat : "No.", fail_if : "Fails if Element can not be a member of SetVariable.", eg : "\n?- S `:: []..[a,b], a `@ S, glb_poss(S,G,P).\nG = [a], P = [b]\n\n?- S `:: []+[a,b], c `@ S.\nno\n\n?- S `:: [a]+[b,c], a `@ S, glb_poss(S,G,P).\nG = [a], P = [b,c]\n\n?- S `:: []..[a,b], X `@ S, glb_poss(S,G,P).\nG = [], P = [a,b]\n\n?- S `:: []..[a,b], X `@ S, X=b, glb_poss(S,G,P).\nG = [b], P = [a]\n\n?- S `:: [a]+[b,c]:C, X `@ S, C=1.\nX = a\n", see_also : [in / 2, `-@ / 2, notin / 2, `:: / 2]]).
:- comment(all_disjoint / 1, [amode : all_disjoint(+), args : ["SetVars" : "A list of set variables."], summary : "All sets disjointness global constraint", desc : html("Constrain all pairs of sets in SetVars to be disjoint. I.e. No two sets\n\t\tcan have a common element (empty pairwise intersection).<P>\n\t\tThis version of all_disjoint/1 is a weak global constraint, but stronger\n\t\tthan the simple posting of all pairwise disjoint/2 constraints, since\n\t\tit posts the additional constraint that the sum of the cardinalities of\n\t\tSetVars must be less than or equal to the cardinality of the union of all\n\t\tthe initial LUBs."), resat : "No.", fail_if : "Fails if SetVars can not be all disjoint.", eg : "\n?- all_disjoint([[7],[8],[i,k]]).\nyes\n\n?- all_disjoint([[7,8],[i],[8]]).\nno\n\n?- sets([X,Y,Z], [],[1,2,7,8,9], [cardinality:2]), all_disjoint([X,Y,Z]).\nno\n\n?- sets([X,Y,Z], [],[1,2,7,8,9], [cardinality:2]), all_disjoint([X,Y,Z]), 2 `@ X, lub(Y,LubY), lub(Z,LubZ)\nLubY = [1,7,8,9], LubZ = [1,7,8,9]\n", see_also : [`$ / 2, `<> / 2, complement / 2, complement / 3, `/= / 2, `>=, all_union / 2]]).
:- comment(all_union / 2, [amode : all_union(+, ?), args : ["SetVars" : "A list of variables.", "Union" : "A variable or a ground set."], summary : "Union constraint of a list of sets", desc : html("Constraint: Union is the set union of SetVars.<P>\n\t\tAny variable in SetVars that is not yet a set domain variable, is declared\n\t\tas such using Union's lub."), resat : "No.", fail_if : "Fails if Union can not be the union of SetVars.", eg : "\n?- all_union([[8,a,9],[i,8,o],[],[a,8,5]], U).\nU = [5,8,9,a,i,o].\n\n?- all_union([X,Z,S,Y,T], [8,9]), glb_poss(X,GX,PX), glb_poss(Y,GY,PY).\nGX = [], PX = [8,9], GY = [], PY = [8,9]\n\n?- X `:: [a]+[b,c], all_union([X,[b,n],X], U), glb_poss(X,GX,PX), glb_poss(U,GU,PU).\nGX = [a], PX = [b,c], GU = [a,b,n], PU = [c]\n\n?- sets([X,Y,Z],[a,b],[d,g,h,j],[cardinality:4]), all_union([X,Y,Z],U), #(U,C), fd:dom(C,DomC).\nDomC = [4,5,6]\n\n?- sets([X,Y,Z],[a,b],[d,g,h,j],[]), all_union([X,Y,Z],U), #(U,4), #(Y,C), fd:dom(C,DomC).\nDomC = [2,3,4]\n", see_also : [`= / 2, all_disjoint / 1]]).
:- comment(card_labeling / 1, [amode : card_labeling(?), args : ["SetVars" : "A list of set variables."], summary : "Label cardinality of set variables", desc : html("Instantiate all cardinalities of variables in SetVars from first to\n\t\tlast, using indomain/1 predicate of fd library.<P>\n\t\tcard_labeling/1 is defined as:\n<PRE>\n  card_labeling([]).\n  card_labeling([H|T]):-\n\tcardinality(H, C),\n\tindomain(C),\n\tcard_labeling(T).\n</PRE>\n"), resat : "Yes.", fail_if : "Fails if cardinalities of SetVars can not be labeled (because constraint\n\t\tpropagation leads to a failure).", eg : "\n?- S `:: [a]+[b,c]:CS, T `:: [1] + [2], card_labeling([S, T]).\nCS = 1, S = [a], T = [1] ;\nCS = 1, S = [a], T = [1, 2] ;\nCS = 2, T = [1] ;\nCS = 2, T = [1, 2] ;\nCS = 3, S = [a,b,c], T = [1] ;\nCS = 3, S = [a,b,c], T = [1, 2] ;\nno\n\n?- S `:: [a] + [b,c,d,e,f]:[2,3,6,9], card_labeling([S]), cardinality(S,C).\nC = 2 ;\nC = 3 ;\nC = 6, S = [a,b,c,d,e,f] ;\nno\n\n", see_also : [set_labeling / 2, refine / 2, cardinality / 2]]).
:- comment(cardinality / 2, [amode : cardinality(?, ?), args : ["SetVariable" : "A Set (variable or ground).", "Cardinality" : "An integer or an FD variable."], summary : "Cardinality of a set", desc : html("Cardinality is the cardinality of SetVariable. If Cardinality is given\n\t\t(as an integer or FD variable), then SetVariable is constrained to have such cardinality.\n\t\tIf Cardinality is a free variable, then it is unified with the set's cardinality as\n\t\tan FD variable or an integer (if it is already known)."), resat : "No.", fail_if : "Fails if Cardinality can not be the cardinality of SetVariable.", eg : "\n?- S `::[]..[a,b], cardinality(S,C).\n?- S `::[]..[a,b], cardinality(S,1).\n?- S `::[]+[a,b]:1, cardinality(S,C).\nC = 1\n\n?- cardinality([a,b],C).\nC = 2\n\n?- S `::[c]+[a,b]:[1,3], C #> 1, cardinality(S,C).\nS = [a,b,c]\nC = 3", see_also : [# / 2]]).
:- comment(complement / 2, [amode : complement(?, ?), args : ["SetVar" : "A variable.", "Complement" : "A variable"], summary : "Set complement constraint", desc : html("Constrain sets so that Complement is the complement set of SetVar.\n\t\t(The universe is taken as the union of their LUBs.)."), resat : "No.", fail_if : "Fails if Complement can not be the set complement of SetVar (in their universe).", eg : "\n?- complement([8,9], []), complement([8,9], [t]).\nyes\n\n?- complement([8,9], [8]).\nno\n\n?- complement([8,9], N).\nN = []\n\n?- sets([X,Y], [],[7,8,9], []), complement(X,Y), 8 `@ Y, glb_poss(X,GX,PX), glb_poss(Y,GY,PY).\nGX = [], PX = [7,9], GY = [8], PY = [7,9]\n\n?- sets([X,Y], [],[7,8,9], [cardinality:C]), complement(X,Y), card_labeling([X]).\nno\n\n?- sets([X,Y], [],[7,8,9], []), complement(X,Y), X `>= Y, set_labeling(up,[Y]).\nY = [], X = [7,8,9] ;\nno\n\n?- sets([X,Y], [],[7,8,9], [minimum:Min]), complement(X,Y), refine(up,X).\nno\n\n?- sets([X,Y], [],[7,8,9], []), complement(X,Y), #(X,1), #(Y,CY).\nCY = 2\n", see_also : [complement / 3, `$ / 2, `= / 2]]).
:- comment(complement / 3, [amode : complement(?, ++, ?), args : ["SetVar" : "A variable.", "Universe" : "A ground set.", "Complement" : "A variable"], summary : "Set complement constraint", desc : html("Constrain sets so that Complement is the complement set of SetVar,\n\t\twith respect to the given Universe. I.e. Complement is Universe \\ SetVar.<P>\n\t\tIf a variable (SetVar or Complement) is not yet a set domain variable,\n\t\tit is declared as such, limited by the Universe.<P>\n\t\tThis constraint is usually more efficient (stronger) than posting an\n\t\tequivalent set difference constraint, due to specific inferences."), resat : "No.", fail_if : "Fails if Complement can not be the set complement of SetVar in set universe Universe.", eg : "\n?- complement([7,8], [1,7,8,9], N).\nN = [1,9]\n\n?- complement(N, [1,7,8,9], [7,8]).\nN = [1,9]\n\n?- X `:: [a]+[b,c,d], Y `:: []+[a,b,c,d,e,f], complement(X, [a,b,c,d,e,f,g], Y).\nno\n\n?- X `:: [a]+[b,c,d], Y `:: []+[a,b,c,d,e,f], complement(X,[a,b,f],Y), domain(X,DX),domain(Y,DY).\nDX = [[a]:1,[b]:2], DY = [[f]:1,[b]:2]\n\n?- X `:: [a]+[b,c,d], Y `:: []+[a,b,c,d,e,f], complement(X, [a,b,c,d,e,f], Y), domain(Y,DY).\nDY = [[e,f]:2,[b,c,d]:5]\n", see_also : [complement / 2, `$ / 2, `= / 2]]).
:- comment(domain / 2, [amode : domain(?, -), args : ["SetVariable" : "A set variable.", "Domain" : "A list (pair) with glb and poss."], summary : "Accessing the domain of a set", desc : html("Domain is unified with the domain of SetVariable in the form [Glb:NIn,Poss:NMax],\n\t\twhere Glb is the (greatest) lower bound of SetVariable, and NIn its length,\n\t\tPoss is the set of still possible elements of SetVariable (i.e. its lub\\glb),\n\t\tand NMax is the lub's cardinality (i.e. NIn + #(Poss)).<P>\n\t\tIf SetVariable is a set of sets and a union function attribute has been set,\n\t\tthen each element of Poss comes annotated with its respective length."), resat : "No.", fail_if : "Fails if Domain can not be unified with the current domain of SetVariable.", eg : "\n?- S `::[c]+[a,b], domain(S,D).\nD = [[c]:1, [a,b]:3]\n\n?- set(S, [],[[a,b],[b,c],[a,c],[b]],[union:[a,b,c]]), domain(S,D).\nD = [[]:0, [[a,b]:2, [a,c]:2, [b]:1, [b,c]:2]:4]\n", see_also : [domain / 3, glb / 2, poss / 2, glb_poss / 3, lub / 2, lub / 4]]).
:- comment(domain / 3, [amode : domain(?, ?, ?), args : ["SetVariable" : "A set variable.", "Cardinality" : "An FD variable", "Domain" : "A list (pair) with glb and poss."], summary : "Accessing the domain of a set", desc : html("Domain is unified with the domain of SetVariable (which has cardinality\n\t\tCardinality) in the form [Glb:NIn,Poss:NMax],\n\t\twhere Glb is the (greatest) lower bound of SetVariable, and NIn its length,\n\t\tPoss is the set of still possible elements of SetVariable (i.e. its lub\\glb),\n\t\tand NMax is the lub's cardinality (i.e. NIn + #(Poss)).\n\t\t<P>\n\t\tIf SetVariable is a set of sets and a union function attribute has been set,\n\t\tthen each element of Poss comes annotated with its respective length.\n\t\t<P>\n\t\tUse domain/3 instead of domain/2 whenever Cardinality variable is available,\n\t\tfor efficiency reasons, since in the case of SetVariable being already\n\t\tground, it is not neccessary to recalculate its length (to retrieve\n\t\t[Setvariable:Cardinality,[]:Cardinality]. This is due to the loss of\n\t\tattributes of variables when these become instantiated.\n\t\t<P>\n\t\tCardinality should be input to domain/3. Do not use this predicate to\n\t\tretrieve the cardinality of a set, for it will only work when set is ground."), resat : "No.", fail_if : "Fails if Domain can not be unified with the current domain of SetVariable.", eg : "\n?- S `::[c]+[a,b]:C, domain(S,C,D).\nD = [[c]:1, [a,b]:3]\n\n?- S `::[c]+[a,b]:C, S=[a,c], domain(S,C,D).\nD = [[a,c]:2, []:2]\n\n?- set(S, [],[[a,b],[b,c],[a,c],[b]],[union:[a,b,c],cardinality:C]), domain(S,C,D).\nD = [[]:0, [[a,b]:2, [a,c]:2, [b]:1, [b,c]:2]:4]\n", see_also : [domain / 2, glb / 2, poss / 2, glb_poss / 3, lub / 2, lub / 4, cardinality / 2, # / 2]]).
:- comment(glb / 2, [amode : glb(?, -), args : ["SetVariable" : "A set variable.", "Glb" : "A set."], summary : "Obtaining a set's glb", desc : html("Glb is unified with the (greatest) lower bound of SetVariable."), resat : "No.", fail_if : "Fails if Glb can not be unified with the current glb of SetVariable.", eg : "\n?- S `::[c]+[a,b], glb(S,G).\nG = [c]\n", see_also : [glb_poss / 3, domain / 2, domain / 3, lub / 2, lub / 4, poss / 2]]).
:- comment(glb_poss / 3, [amode : glb_poss(?, -, -), args : ["SetVariable" : "A set variable.", "Glb" : "A set.", "Poss" : "A set."], summary : "Obtaining both the glb and the still possible elements of a set", desc : html("Glb is unified with the (greatest) lower bound of SetVariable.<P>\n\t\tPoss is unified with the set of still possible elements of SetVariable\n\t\t(i.e. its lub\\glb).<P>\n\t\tIf SetVariable is a set of sets and a union function attribute has been set,\n\t\tthen each element of Poss comes annotated with its respective length."), resat : "No.", fail_if : "Fails if Glb can not be unified with the current glb of SetVariable or\n\t\tif Poss can not be unified with the current poss (lub\\glb) of SetVariable.", eg : "\n?- S `::[c]+[a,b], glb_poss(S,G,P).\nG = [c]\nP = [a,b]\n\n?- set(S, [],[[a,b],[b,c],[a,c],[b]],[union:[a,b,c]]), glb_poss(S,G,P).\nG = []\nP = [[a, b] : 2, [a, c] : 2, [b] : 1, [b, c] : 2]\n", see_also : [glb / 2, poss / 2, domain / 2, domain / 3, lub / 2, lub / 4]]).
:- comment(in / 2, [template : "?Element in ?SetVariable", args : ["SetVariable" : "A set variable.", "Element" : "A ground term or a variable."], summary : "Set membership constraint", desc : html("Constrain SetVariable to include Element.<P>\n\t\tin/2 is available for compatibility with conjunto library syntax.\n\t\tIt is equivalent to the preferred `@/2. See its description for details."), resat : "No.", fail_if : "Fails if Element can not be a member of SetVariable.", see_also : [`@ / 2, `-@ / 2, notin / 2, `:: / 2]]).
:- comment(lub / 2, [amode : lub(?, -), args : ["SetVariable" : "A set variable.", "Lub" : "A set."], summary : "Obtaining a set's lub", desc : html("Lub is unified with the (least) upper bound of SetVariable."), resat : "No.", fail_if : "Fails if Lub can not be unified with the current lub of SetVariable.", eg : "\n?- S `::[c]+[a,b], lub(S,L).\nL = [a,b,c]\n", see_also : [lub / 4, glb / 2, poss / 2, glb_poss / 3, domain / 2, domain / 3]]).
:- comment(lub / 4, [amode : lub(?, -, -, -), args : ["SetVariable" : "A set variable.", "Glb" : "A set.", "Poss" : "A set.", "Lub" : "A set."], summary : "Obtaining a set's lub, together with its glb and poss (lub\\glb)", desc : html("Lub is unified with the (least) upper bound of SetVariable.<P>\n\t\tGlb is unified with the (greatest) lower bound of SetVariable.<P>\n\t\tPoss is unified with the set of still possible elements of SetVariable\n\t\t(i.e. its lub\\glb).<P>\n\t\tIf SetVariable is a set of sets and a union function attribute has been set,\n\t\tthen each element of Poss comes annotated with its respective length."), resat : "No.", fail_if : "Fails if Lub can not be unified with the current lub of SetVariable or\n\t\tif Glb can not be unified with the current glb of SetVariable or\n\t\tif Poss can not be unified with the current poss (lub\\glb) of SetVariable.", eg : "\n?- S `::[c]+[a,b], lub(S,G,P,L).\nG = [c]\nP = [a,b]\nL = [a,b,c]\n\n?- set(S, [],[[a,b],[b,c],[a,c],[b]],[union:[a,b,c]]), lub(S,G,P,L).\nG = []\nP = [[a, b] : 2, [a, c] : 2, [b] : 1, [b, c] : 2]\nL = [[a, b], [a, c], [b], [b, c]]\n", see_also : [lub / 2, glb_poss / 3, glb / 2, poss / 2, domain / 2, domain / 3]]).
:- comment(maximum / 2, [amode : maximum(?, ?), args : ["SetVariable" : "A Set (variable or ground) of integers.", "Max" : "An integer or an FD variable."], summary : "Maximum of a set of integers", desc : html("Max is the maximum (i.e. the highest element) of SetVariable.<P>\n\t\tIf Max is given (as an integer or FD variable) then SetVariable is\n\t\tconstrained to have such maximum.\n\t\tIf Max is a free variable, then it is unified with the set's maximum as\n\t\tan FD variable or an integer (if it is already known).<P>\n\t\tmaximum/2 can thus be used either to declare (or constrain) a maximum\n\t\tfunction or to retrieve it."), resat : "No.", fail_if : "Fails if Max can not be the maximum of SetVariable.", eg : "\n?- S`::[]..[1,2], maximum(S,M).\n?- set(S,[],[1,2],[maximum:2], maximum(S,M).\nM = 2\n\n?- S`::[]+[1,2], maximum(S,1).\nS = [1]\n\n?- set(S,[],[1,2],[maximum:1], maximum(S,M).\nS = [1]\nM = 1", see_also : [minimum / 2, set / 4, sets / 4, cardinality / 2]]).
:- comment(minimum / 2, [amode : minimum(?, ?), args : ["SetVariable" : "A Set (variable or ground) of integers.", "Min" : "An integer or an FD variable."], summary : "Minimum of a set of integers", desc : html("Min is the minimum (i.e. the lowest element) of SetVariable.<P>\n\t\tIf Min is given (as an integer or FD variable) then SetVariable is\n\t\tconstrained to have such minimum.\n\t\tIf Min is a free variable, then it is unified with the set's minimum as\n\t\tan FD variable or an integer (if it is already known).<P>\n\t\tminimum/2 can thus be used either to declare (or constrain) a minimum\n\t\tfunction or to retrieve it."), resat : "No.", fail_if : "Fails if Min can not be the minimum of SetVariable.", eg : "\n?- S`::[]..[1,2], minimum(S,M).\n?- set(S,[],[1,2],[minimum:1], minimum(S,M).\nM = 1\n\n?- S`::[]+[1,2], minimum(S,2).\nS = [2]\n\n?- set(S,[],[1,2],[minimum:2], minimum(S,M).\nS = [2]\nM = 2", see_also : [maximum / 2, set / 4, sets / 4, cardinality / 2]]).
:- comment(my_print_set_handler / 2, hidden).
:- comment(my_unify_sets_handler / 2, hidden).
:- comment(notin / 2, [template : "?Element notin ?SetVariable", args : ["SetVariable" : "A set variable.", "Element" : "A ground term or a variable."], summary : "Set non-membership constraint", desc : html("Constrain SetVariable to not include Element.<P>\n\t\tnotin/2 is available for compatibility with conjunto library syntax.\n\t\tIt is equivalent to the preferred `-@/2. See its description for details."), resat : "No.", fail_if : "Fails if Element must be a member of SetVariable.", see_also : [`-@ / 2, `@ / 2, in / 2, `:: / 2]]).
:- comment(poss / 2, [amode : poss(?, -), args : ["SetVariable" : "A set variable.", "Poss" : "A set."], summary : "Obtaining the still possible elements of a set (lub\\glb)", desc : html("Poss is unified with the set of still possible elements of SetVariable\n\t\t(i.e. its lub\\glb).<P>\n\t\tIf SetVariable is a set of sets and a union function attribute has been set,\n\t\tthen each element of Poss comes annotated with its respective length."), resat : "No.", fail_if : "Fails if Poss can not be unified with the current poss (lub\\glb) of SetVariable.", eg : "\n?- S `::[c]+[a,b], poss(S,P).\nP = [a,b]\n\n?- S `::[[c]]+[[a,b]], poss(S,P).\nP = [[a,b]]\n\n?- set(S, [],[[a,b],[b,c],[a,c],[b]],[union:[a,b,c]]), poss(S,P).\nP = [[a, b] : 2, [a, c] : 2, [b] : 1, [b, c] : 2]\n", see_also : [glb / 2, glb_poss / 3, domain / 2, domain / 3, lub / 2, lub / 4]]).
:- comment(refine / 2, [amode : refine(++, ?), args : ["UpDown" : "Atom ('up' or 'down').", "SetVar" : "A set variable."], summary : "Refine a set variable's domain", desc : html("Pick the first element of SetVar's poss (lub\\glb) and try to include it\n\t\tin its glb, or to definitely exclude it from the domain.<P>\n\t\tIf heuristic UpDown is 'up' then inclusion is tried first; otherwise (down)\n\t\texclusion is tried first."), resat : "Yes.", fail_if : "Fails if Var can not be refined (it is either ground or both the inclusion\n\t\tand exclusion of the first element of its poss leads to a failure due to\n\t\tunsatisfied constraints).", eg : "\n?- S `:: [a]+[b,c], refine(up,S), glb_poss(S,G,P).\nG = [a,b], P = [c] ;\nG = [a], P = [c] ;\nno\n\n?- S `:: [a]+[b,c], refine(down,S), glb_poss(S,G,P).\nG = [a], P = [c] ;\nG = [a,b], P = [c] ;\nno\n", see_also : [set_labeling / 2, set_labeling / 1]]).
:- comment(set / 4, [amode : set(?, ++, ++, +), args : ["SetVariable" : "A variable.", "Glb" : "A ground set.", "Poss" : "A ground set.", "Functions" : "A list."], summary : "Set variable declaration with optional functions", desc : html("Declare or constrain a set domain variable to have Glb as assured\n\t\telements and Poss as the possible additional elements.<P>\n\t\tFunctions is a list of functions over SetVariable in the form\n\t\tFunctionName:FunctionValue, where FunctionName can be 'cardinality',\n\t\t'minimum', 'maximum' or 'union':\n<PRE>\n  cardinality: FunctionValue can be an integer, an FD variable or an integer domain (list or range)\n  union: (SetVariable must be a set of sets.) FunctionValue can be a set, a set variable\n\tor a set domain in the form GlbUnion+PossUnion, representing the glb and poss of\n\tthe union of SetVariable\n  minimum and maximum: (SetVariable must be a nonempty set of integers.)\n\tFunctionValue can be an integer, an FD variable or an integer domain\n</PRE>\n\t\tCardinal inferences over SetVariable and its union, minimum and maximum\n\t\tfunctions will be performed only if these functions are explicitly\n\t\tdeclared, whereas the cardinality function and respective inferences\n\t\twill always be present even if this (cardinality) function is not\n\t\texplicitly declared. Note that a simple function declaration such as\n\t\tminimum:_ is sufficient to make it 'active'."), resat : "No.", fail_if : "Fails if SetVariable can not be constrained accordingly.", eg : "\n?- set(S,[],[a,b],[]).\n?- set(S,[],[a,b],[cardinality:1]).\n?- set(S,[],[a,b],[cardinality:C]).\n?- set(S,[],[a,b],[cardinality:[0,2]]).\n?- set(S,[c],[a,b,d,e,f,g,h,i,j,k],[cardinality:[2,4..7]]).\n?- set(S,[],[1,3,4,5,7],[minimum:Min,maximum:Max]), fd:(Max #> Min+2).\n?- set(S, [], [[1,2,5],[2,4],[3,5],[1,3,4]],\n\t[cardinality:2, union:[1,2,3,4,5]]).   %set-covering\n?- set(S, [], [[1,2,5],[2,4],[3,5],[1,3,4]], [union:[1]+[2,4,5]]).\n", see_also : [sets / 4, `:: / 2, cardinality / 2, union_var / 2, minimum / 2, maximum / 2, set_labeling / 1]]).
:- comment(set_labeling / 1, [amode : set_labeling(?), args : ["SetVars" : "A variable or a list of set variables."], summary : "Label set variable(s)", desc : html("Instantiate all variables in SetVars from first to last, with\n\t\tconsecutive refinements of their domains until they are ground.<P>\n\t\tFor each set variable, for each element in its poss (lub\\glb), inclusion\n\t\tis tried first.<P>\n\t\tSetVars can be a set variable instead of a list. Labeling a single set\n\t\tvariable S can thus be done both with set_labeling([S]) or with\n\t\tset_labeling(S)."), resat : "Yes.", fail_if : "Fails if SetVars can not be labeled (there is no solution to the CSP).", eg : "\n?- S `:: [a] + [b, c], T `:: [1] + [2], set_labeling([S, T]).\nS = [a, b, c], T = [1, 2] ;\nS = [a, b, c], T = [1] ;\nS = [a, b], T = [1, 2] ;\nS = [a, b], T = [1] ;\nS = [a, c], T = [1, 2] ;\nS = [a, c], T = [1] ;\nS = [a], T = [1, 2] ;\nS = [a], T = [1] ;\nno\n\n?- S `:: [a] + [b, c], T `:: [1] + [2], set_labeling(S).\nS = [a, b, c] ;\nS = [a, b] ;\nS = [a, c] ;\nS = [a] ;\nno\n\n", see_also : [set_labeling / 2, refine / 2]]).
:- comment(set_labeling / 2, [amode : set_labeling(++, +), args : ["UpDown" : "Atom: 'up' or 'down'.", "SetVars" : "List of set variables."], summary : "Label set variables", desc : html("Instantiate all variables in SetVars from first to last, with\n\t\tconsecutive refinements of their domains until they are ground.<P>\n\t\tIf heuristic UpDown is 'up' then, for each set variable, for each element\n\t\tin its poss (lub\\glb), inclusion is tried first; otherwise (down)\n\t\texclusion is tried first."), resat : "Yes.", fail_if : "Fails if SetVars can not be labeled (there is no solution to the CSP).", eg : "\n?- S `:: [a] + [b, c], T `:: [1] + [2], set_labeling(up, [S, T]).\nS = [a, b, c], T = [1, 2] ;\nS = [a, b, c], T = [1] ;\nS = [a, b], T = [1, 2] ;\nS = [a, b], T = [1] ;\nS = [a, c], T = [1, 2] ;\nS = [a, c], T = [1] ;\nS = [a], T = [1, 2] ;\nS = [a], T = [1] ;\nno\n\n?- S `:: [a] + [b, c], T `:: [1] + [2], set_labeling(down, [S, T]).\nS = [a], T = [1] ;\nS = [a], T = [1, 2] ;\nS = [a, c], T = [1] ;\nS = [a, c], T = [1, 2] ;\nS = [a, b], T = [1] ;\nS = [a, b], T = [1, 2] ;\nS = [a, b, c], T = [1] ;\nS = [a, b, c], T = [1, 2] ;\nno\n", see_also : [set_labeling / 1, refine / 2]]).
:- comment(sets / 4, [amode : sets(+, ++, ++, +), args : ["SetVariables" : "A list of variables.", "Glb" : "A ground set.", "Poss" : "A ground set.", "Functions" : "A list."], summary : "Set variables declaration with optional functions", desc : html("Declare or constrain set domain variables to have Glb as assured\n\t\telements and Poss as the possible additional elements.<P>\n\t\tFunctions is a list of functions over each SetVariable in SetVariables in the form\n\t\tFunctionName:FunctionValue, where FunctionName can be 'cardinality',\n\t\t'minimum', 'maximum' or 'union':<P>\n<PRE>\n  cardinality: FunctionValue can be an integer, an FD variable or an integer domain (list or range)\n  union: (SetVariable must be a set of sets.) FunctionValue can be a set, a set variable\n\tor a set domain in the form GlbUnion+PossUnion, representing the glb and poss of\n\tthe union of SetVariable\n  minimum and maximum: (SetVariable must be a nonempty set of integers.)\n\tFunctionValue can be an integer, an FD variable or an integer domain\n</PRE>\n\t\tCardinal inferences over SetVariable and its union, minimum and maximum\n\t\tfunctions will be performed only if these functions are explicitly\n\t\tdeclared, whereas the cardinality function and respective inferences\n\t\twill always be present even if this (cardinality) function is not\n\t\texplicitly declared. Note that a simple function declaration such as\n\t\tminimum:_ is sufficient to make it 'active'.<P>\n\t\tIf a FunctionValue is given as a variable or as a fixed (integer or set)\n\t\tvalue, then it will be the same for all of SetVariables. If it is given\n\t\tas a domain, then function values for SetVariables may be different\n\t\t(a different domain variable is created for each SetVariable)."), resat : "No.", fail_if : "Fails if SetVariables can not be constrained accordingly.", eg : "\n?- sets([S],[],[a,b],[]).\n?- sets([S,T],[],[a,b],[cardinality:1]).\n?- sets([X,Y,Z],[],[a,b],[cardinality:C]).\n?- sets([X,Y,Z],[],[a,b],[cardinality:[0,2]]).\n?- sets([X,Y,Z],[c],[a,b,d,e,f,g,h,i,j,k],[cardinality:[2,4..7]]).\n?- sets([X,Y,Z],[],[1,3,4,5,7],[minimum:Min,maximum:1..9]), fd:(Max #> Min+2).\n?- sets([X,Y,Z], [], [[1,2,5],[2,4],[3,5],[1,3,4]], [union:[1]+[2,4,5]]).\n", see_also : [set / 4, `:: / 2, cardinality / 2, union_var / 2, minimum / 2, maximum / 2, set_labeling / 1]]).
:- comment(union_var / 2, [amode : union_var(?, ?), args : ["SetVariable" : "A Set (variable or ground) of sets.", "UnionVar" : "A Set (variable or ground)."], summary : "Union of a set of sets", desc : html("UnionVar is the union of sets in SetVariable. If UnionVar is given\n\t\t(as a ground set or a set variable), then SetVariable is constrained to have such union.\n\t\tIf UnionVar is a free variable, then it is unified with the set's union as\n\t\ta set variable or a ground set (if it is already known).<P>\n\t\tunion_var/2 can thus be used either to declare (or constrain) a union\n\t\tfunction or to retrieve it."), resat : "No.", fail_if : "Fails if UnionVar can not be the union of SetVariable.", eg : "\n?- S `::[]..[[a],[b]], union_var(S,U).\n?- S `::[]..[[a],[b],[a,b]], union_var(S,[a,b]).\n?- union_var([[a,b],[b,c]], U).\nU = [a,b,c]", see_also : [set / 4, sets / 4, cardinality / 2]]).
