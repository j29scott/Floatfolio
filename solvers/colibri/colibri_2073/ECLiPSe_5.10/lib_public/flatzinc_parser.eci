:- module(flatzinc_parser).
:- export read_item / 2.
:- comment(summary, "A parser for FlatZinc").
:- comment(author, "Joachim Schimpf, supported by Cisco Systems and NICTA Victoria").
:- comment(copyright, "Cisco Systems Inc, licensed under CMPL").
:- comment(date, "$Date: 2008/06/20 17:21:23 $").
:- comment(see_also, [library(flatzinc_syntax)]).
:- comment(desc, html("\n<P>\nA parser for FlatZinc, based on 'Specification of FlatZinc' (Nov 7 2007).\nIt reads and returns one item at a time, as am ECLiPSe structure which\nclosely resembles the FZ input.\n</P>\n<P>\nFor FlatZinc, it seems an item-wise parser is a good idea, since the\nitems can be processed one at a time by ECLiPSe to set up the model.\n</P>\n")).
:- comment(read_item / 2, [summary : "Read one item from a FlatZinc input stream", amode : (read_item(+, -) is nondet), args : ["Stream" : "ECLiPSe stream name or handle", "Item" : "Output: an ECLiPSe term that describes the FlatZinc item"], fail_if : "Fails if end_of_file is reached", exceptions : [fz_abort : "syntax error"], desc : html("<P>\n\tReads one FlatZinc item (up to and including the terminating\n\tsemicolon) from Stream, and returns it as an ECLiPSe structure.\n\tFails when end_of_file has been reached.\n    </P>"), eg : "\n    ?- read_item(input, Item).\n    > float: x=3.14;\n    Item = float : x = 3.14\n    Yes (0.00s cpu)\n\n    ?- read_item(input, Item).\n    > solve minimize x;\n    Item = minimize(solve, x)\n    Yes (0.03s cpu)\n\n    ?- read_item(input, Item).\n    > var int: i::foo::bar;\n    Item = var(int) : (i :: (foo :: bar))\n    Yes (0.02s cpu)\n\n    ?- read_item(input, Item).\n    > constraint int_lt(x[2], 3);\n    Item = constraint(int_lt(subscript(x, [2]), 3))\n    Yes (0.00s cpu)\n\n    ?- read_item(input, Item).\n    > set of  int: s={1,2,3};\n    Item = (set of int) : s = {[1, 2, 3]}\n    Yes (0.05s cpu)\n\n    ?- read_item(input, Item).\n    > array [1..3] of var int: a;\n    Item = (array([1 .. 3]) of var(int)) : a\n    Yes (0.03s cpu)\n\n    ?- read_item(input, Item).\n    > var 1..5: i;\n    Item = var(1 .. 5) : i\n    Yes (0.03s cpu)\n\n"]).
