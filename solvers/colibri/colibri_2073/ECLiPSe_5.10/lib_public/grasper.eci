:- module(grasper).
:- export terminate_susps / 2.
:- export kill_susps / 1.
:- export hash_add_all / 2.
:- export export_graph / 2.
:- export graph_labeling / 3.
:- export graph_labeling / 1.
:- export complementary_graph / 2.
:- export reverse_graph / 2.
:- export oriented_graph / 2.
:- export underlying_graph / 2.
:- export induced_subgraph / 2.
:- export subgraph / 2.
:- export path / 3.
:- export weakly_connected / 1.
:- export strongly_connected / 1.
:- export connected / 1.
:- export asymmetric / 1.
:- export symmetric / 1.
:- export reachables / 3.
:- export successors / 3.
:- export predecessors / 3.
:- export weight / 3.
:- export size / 2.
:- export order / 2.
:- export getEdgeSet / 2.
:- export getVertexSet / 2.
:- export undirgraph / 3.
:- export dirgraph / 3.
:- comment(summary, "Finite Graphs Constraints Library").
:- comment(author, "Ruben Duarte Viegas, CENTRIA").
:- comment(status, prototype).
:- comment(date, "$DATE$").
:- comment(asymmetric / 1, [amode : asymmetric(+), args : ["Graph" : "A graph."], summary : "Ensures Graph is asymmetric", desc : html("Ensures that for every edge (x,y) added to the Graph the symmetric edge (y,x) is removed."), resat : "?", fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if Graph can not be enforced to be asymmetric.\r\n\t\t\t", eg : "\r\n?- asymmetric(G).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[2,3],[3,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), asymmetric(G).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), asymmetric(G).\r\nV = V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _658, fd:[0..3]}, _550, _551, _552, [], [], ['SUSP-_2571-susp'], ['SUSP-_2181-dead'])}\r\nE = E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _867, fd:[0..6]}, _759, _760, _761, [], ['SUSP-_3006-susp', 'SUSP-_2581-susp'], [], ['SUSP-_2882-dead'])}\r\nG = dirgraph(V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _658, fd:[0..3]}, _550, _551, _552, [], [], ['SUSP-_2571-susp'], ['SUSP-_2181-dead'])}, E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _867, fd:[0..6]}, _759, _760, _761, [], ['SUSP-_3006-susp', 'SUSP-_2581-susp'], [], ['SUSP-_2882-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), asymmetric(G).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _688, fd : [2, 3]}, _580, _581, _582, [], [], ['SUSP-_2633-susp'], ['SUSP-_2243-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 3], [3, 1], [3, 2]] : 5], Card{cardinal : _902, fd : [1 .. 5]}, _794, _795, _796, [], ['SUSP-_3117-susp', 'SUSP-_2643-susp'], [], ['SUSP-_2970-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _688, fd : [2, 3]}, _580, _581, _582, [], [], ['SUSP-_2633-susp'], ['SUSP-_2243-dead'])}, E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 3], [3, 1], [3, 2]] : 5], Card{cardinal : _902, fd : [1 .. 5]}, _794, _795, _796, [], ['SUSP-_3117-susp', 'SUSP-_2643-susp'], [], ['SUSP-_2970-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1]], dirgraph(G,V,E), asymmetric(G).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _658, fd : [2, 3]}, _550, _551, _552, [], [], ['SUSP-_2556-susp'], ['SUSP-_2166-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 3], [3, 1]] : 4], Card{cardinal : _864, fd : [1 .. 4]}, _756, _757, _758, [], ['SUSP-_3040-susp', 'SUSP-_2566-susp'], [], ['SUSP-_2893-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _658, fd : [2, 3]}, _550, _551, _552, [], [], ['SUSP-_2556-susp'], ['SUSP-_2166-dead'])}, E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 3], [3, 1]] : 4], Card{cardinal : _864, fd : [1 .. 4]}, _756, _757, _758, [], ['SUSP-_3040-susp', 'SUSP-_2566-susp'], [], ['SUSP-_2893-dead'])})\r\n\t\t\t"]).
:- comment(complementary_graph / 2, [amode : complementary_graph(+, ?), args : ["Graph" : "A graph.", "ComplementaryGraph" : "The complementary graph of Graph."], summary : "Obtains the complementary graph of a given graph.", desc : html("Obtains the complementary graph of a given graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if Graph can not be constrained to have ComplementaryGraph as its complementary graph (ComplementarGraph is a graph variable).\r\n\t\t\t", eg : "\r\n?- complementary_graph(G,CG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], CE`::[]..[[1,2],[3,2],[1,3]], dirgraph(G,V,E), dirgraph(CG,V,CE), complementary_graph(G,CG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), complementary_graph(G,CG), graph_labeling(G).\r\nV = [1, 2]\r\nE = [[1, 2]]\r\nG = dirgraph([1, 2], [[1, 2]])\r\nCG = dirgraph([1, 2], [[1, 1], [2, 1], [2, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2]]\r\nG = dirgraph([1, 2, 3], [[1, 2]])\r\nCG = dirgraph([1, 2, 3], [[1, 1], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [3, 1]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [3, 1]])\r\nCG = dirgraph([1, 2, 3], [[1, 1], [1, 3], [2, 1], [2, 2], [2, 3], [3, 2], [3, 3]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3]])\r\nCG = dirgraph([1, 2, 3], [[1, 1], [1, 3], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3], [3, 1]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3], [3, 1]])\r\nCG = dirgraph([1, 2, 3], [[1, 1], [1, 3], [2, 1], [2, 2], [3, 2], [3, 3]])\r\nYes\r\n\r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], CE`::[[2,3],[3,2]]..[[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]], dirgraph(G,V,E), dirgraph(CG,V,CE), complementary_graph(G,CG), graph_labeling(G).\r\nV = [2, 3]\r\nE = []\r\nCE = [[2, 2], [2, 3], [3, 2], [3, 3]]\r\nG = dirgraph([2, 3], [])\r\nCG = dirgraph([2, 3], [[2, 2], [2, 3], [3, 2], [3, 3]])\r\nYes\r\n\t\t\t"]).
:- comment(connected / 1, [amode : connected(+), args : ["Graph" : "A graph."], summary : "Guarantees that an undirected graph Graph is connected.", desc : html("Guarantees that an undirected graph Graph is connected, i.e., that each vertex is reachable from any other one."), fail_if : "Fails \r\n\t\t\t if Graph is not an undirected graph variable or\r\n\t\t\t if Graph can not be constrained to be connected.\r\n\t\t\t", eg : "\r\n?- connected(G).\r\nNo.\r\n\r\n?- V`::[1,2]..[1,2,3,4], E`::[]..[[1,3],[2,4],[3,1],[4,2]], undirgraph(G,V,E), connected(G).\r\nNo.\r\n\r\n?- V`::[1,2]..[1,2,3], E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E), connected(G), graph_labeling(G).\r\nV = [1, 2]\r\nE = [[1, 2], [2, 1]]\r\nG = undirgraph([1, 2], [[1, 2], [2, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 3], [2, 3], [3, 1], [3, 2]]\r\nG = undirgraph([1, 2, 3], [[1, 3], [2, 3], [3, 1], [3, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 1], [2, 3], [3, 2]]\r\nG = undirgraph([1, 2, 3], [[1, 2], [2, 1], [2, 3], [3, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [1, 3], [2, 1], [3, 1]]\r\nG = undirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [3, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]\r\nG = undirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]])\r\nYes\r\n\t\t\t"]).
:- comment(dirgraph / 3, [amode : dirgraph(-, +, +), args : ["Graph" : "A directed graph.", "VertexSet" : "The vertex-set that constitutes Graph.", "EdgeSet" : "The edge-set that constitutes Graph."], summary : "Directed graph constructor.", desc : html("Creates Graph as a directed graph variable composed by the vertexes in VertexSet and the edges in EdgeSet."), fail_if : "Fails \r\n\t\t\t if VertexSet is not a set variable,\r\n\t\t\t if EdgeSet is not a set variable or\r\n\t\t\t if EdgeSet cannot be contained in (VertexSet x VertexSet).\r\n\t\t\t", eg : "\r\n?- E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], dirgraph(G,V,E).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[[4,5]]..[[1,2],[2,3],[3,1],[4,5]], dirgraph(G,V,E).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E).\r\nV = V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _543, fd:[0..3]}, _435, _436, _437, [], [], ['SUSP-_2315-susp'], ['SUSP-_1925-dead'])}\r\nE = E{cardinal([[]:0, [[1, 2], [2, 3], [3, 1]]:3], Card{cardinal : _728, fd:[0..3]}, _620, _621, _622, [], ['SUSP-_2325-susp'], [], ['SUSP-_1641-dead'])}\r\nG = dirgraph(V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _543, fd:[0..3]}, _435, _436, _437, [], [], ['SUSP-_2315-susp'], ['SUSP-_1925-dead'])}, E{cardinal([[]:0, [[1, 2], [2, 3], [3, 1]]:3], Card{cardinal : _728, fd:[0..3]}, _620, _621, _622, [], ['SUSP-_2325-susp'], [], ['SUSP-_1641-dead'])})\r\n\r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1],[4,5]], dirgraph(G,V,E).\r\nV = V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _573, fd:[0..3]}, _465, _466, _467, [], [], ['SUSP-_2391-susp'], ['SUSP-_2001-dead'])}\r\nE = E{cardinal([[]:0, [[1, 2], [2, 3], [3, 1]]:3], Card{cardinal : _766, fd:[0..3]}, _658, _659, _660, [], ['SUSP-_2401-susp'], [], ['SUSP-_1717-dead'])}\r\nG = dirgraph(V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _573, fd:[0..3]}, _465, _466, _467, [], [], ['SUSP-_2391-susp'], ['SUSP-_2001-dead'])}, E{cardinal([[]:0, [[1, 2], [2, 3], [3, 1]]:3], Card{cardinal : _766, fd:[0..3]}, _658, _659, _660, [], ['SUSP-_2401-susp'], [], ['SUSP-_1717-dead'])})\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E).\r\nV = V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _573, fd:[2, 3]}, _465, _466, _467, [], [], ['SUSP-_2363-susp'], ['SUSP-_1987-dead'])}\r\nE = E{cardinal([[[1, 2]]:1, [[2, 3], [3, 1]]:3], Card{cardinal : _763, fd:[1..3]}, _655, _656, _657, [], ['SUSP-_2373-susp'], [], ['SUSP-_1681-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _573, fd:[2, 3]}, _465, _466, _467, [], [], ['SUSP-_2363-susp'], ['SUSP-_1987-dead'])}, E{cardinal([[[1, 2]]:1, [[2, 3], [3, 1]]:3], Card{cardinal : _763, fd:[1..3]}, _655, _656, _657, [], ['SUSP-_2373-susp'], [], ['SUSP-_1681-dead'])})\r\n\t\t\t"]).
:- comment(export_graph / 2, [amode : export_graph(+, ++), args : ["Graph" : "A graph.", "File" : "Name of the file where a GraphViz 'dot' format of the graph is to be exported."], summary : "Exports Graph to Filename in a .dot format which can then be loaded by GraphViz.", desc : html("Exports Graph to Filename in a .dot format which can then be loaded by GraphViz.")]).
:- comment(getEdgeSet / 2, [amode : getEdgeSet(+, ?), args : ["Graph" : "A graph.", "EdgeSet" : "Graph's edge-set."], summary : "Obtains a graph's edge-set.", desc : html("Obtains a graph's edge-set."), fail_if : "Fails\r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if EdgeSet can not be matched with Graph's edge-set.\r\n\t\t\t", eg : "\r\n?- getEdgeSet(G,E).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), getEdgeSet(G,[[2,3],[3,2]]).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), getEdgeSet(G,E_1).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}\r\nE = E_1{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}, E_1{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])})\r\nE_1 = E_1{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), getEdgeSet(G,[[1,2],[2,3],[3,1]]).\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3], [3, 1]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3], [3, 1]])\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), E_1`::[]..[[1,2],[2,3],[3,1]], getEdgeSet(G,E_1).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _830, fd : [2, 3]}, _722, _723, _724, [], [], ['SUSP-_2775-susp'], ['SUSP-_2385-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _1044, fd : [1 .. 3]}, Min1, Max1, Union2, [], ['SUSP-_2785-susp'], [], [])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _830, fd : [2, 3]}, _722, _723, _724, [], [], ['SUSP-_2775-susp'], ['SUSP-_2385-dead'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _1044, fd : [1 .. 3]}, Min1, Max1, Union2, [], ['SUSP-_2785-susp'], [], [])})\r\nE_1 = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _1044, fd : [1 .. 3]}, Min1, Max1, Union2, [], ['SUSP-_2785-susp'], [], [])}\r\n\t\t\t"]).
:- comment(getVertexSet / 2, [amode : getVertexSet(+, ?), args : ["Graph" : "A graph.", "VertexSet" : "Graph's vertex-set."], summary : "Obtains a graph's vertex-set.", desc : html("Obtains a graph's vertex-set."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if VertexSet can not be matched with Graph's vertex-set.\r\n\t\t\t", eg : "\r\n?- getVertexSet(G,V).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), getVertexSet(G,[2,3]).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), getVertexSet(G,V_1).\r\nV = V_1{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])}\r\nG = dirgraph(V_1{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}, E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])})\r\nV_1 = V_1{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), getVertexSet(G,[1,2]).\r\nV = [1, 2]\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 1]] : 2], Card{cardinal : _962, fd : [1, 2]}, _854, _855, _856, [], ['SUSP-_3006-dead', 'SUSP-_2703-susp'], [], ['SUSP-_3312-dead'])}\r\nG = dirgraph([1, 2], E{cardinal([[[1, 2]] : 1, [[2, 1]] : 2], Card{cardinal : _962, fd : [1, 2]}, _854, _855, _856, [], ['SUSP-_3006-dead', 'SUSP-_2703-susp'], [], ['SUSP-_3312-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), V_1`::[]..[1,2], getVertexSet(G,V_1).\r\nV = V{cardinal([[] : 0, [1, 2] : 2], Card{cardinal : _730, fd : [0 .. 2]}, Min1, Max1, Union2, [], [], ['SUSP-_2643-susp'], [])}\r\nE = E{cardinal([[] : 0, [[1, 2], [2, 1]] : 2], Card{cardinal : _939, fd : [0 .. 2]}, _831, _832, _833, [], ['SUSP-_3239-dead', 'SUSP-_2653-susp'], [], ['SUSP-_3547-dead'])}\r\nG = dirgraph(V{cardinal([[] : 0, [1, 2] : 2], Card{cardinal : _730, fd : [0 .. 2]}, Min1, Max1, Union2, [], [], ['SUSP-_2643-susp'], [])}, E{cardinal([[] : 0, [[1, 2], [2, 1]] : 2], Card{cardinal : _939, fd : [0 .. 2]}, _831, _832, _833, [], ['SUSP-_3239-dead', 'SUSP-_2653-susp'], [], ['SUSP-_3547-dead'])})\r\nV_1 = V{cardinal([[] : 0, [1, 2] : 2], Card{cardinal : _730, fd : [0 .. 2]}, Min1, Max1, Union2, [], [], ['SUSP-_2643-susp'], [])}\r\n\t\t\t"]).
:- comment(graph_labeling / 1, [amode : graph_labeling(+), args : ["Graph" : "A graph."], summary : "Labels a graph variable.", desc : html("Labels a graph variable."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable.\r\n\t\t\t", eg : "\r\n?- graph_labeling(G).\r\nNo.\r\n\r\n?- V`::[]..[1,2], E`::[]..[[1,2],[2,1]], dirgraph(G,V,E), graph_labeling(G).\r\nV = []\r\nE = []\r\nG = dirgraph([], [])\r\nYes ? ;\r\n\r\nV = [2]\r\nE = []\r\nG = dirgraph([2], [])\r\nYes ? ;\r\n\r\nV = [1]\r\nE = []\r\nG = dirgraph([1], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = []\r\nG = dirgraph([1, 2], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[2, 1]]\r\nG = dirgraph([1, 2], [[2, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2]]\r\nG = dirgraph([1, 2], [[1, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2], [2, 1]]\r\nG = dirgraph([1, 2], [[1, 2], [2, 1]])\r\nYes\r\n\r\n?- V`::[]..[1,2], E`::[]..[[1,2],[2,1]], undirgraph(G,V,E), graph_labeling(G).\r\nV = []\r\nE = []\r\nG = undirgraph([], [])\r\nYes ? ;\r\n\r\nV = [2]\r\nE = []\r\nG = undirgraph([2], [])\r\nYes ? ;\r\n\r\nV = [1]\r\nE = []\r\nG = undirgraph([1], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = []\r\nG = undirgraph([1, 2], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2], [2, 1]]\r\nG = undirgraph([1, 2], [[1, 2], [2, 1]])\r\nYes\r\n\t\t\t"]).
:- comment(graph_labeling / 3, [amode : graph_labeling(+, ++, ++), args : ["Graph" : "A graph.", "VertexHeuristic" : "'up' for starting vertex inclusion first / 'down' for starting vertex exclusion first.", "EdgeHeuristic" : "'up' for starting edge inclusion first / 'down' for starting edge exclusion first."], summary : "Labels a graph variable using VertexHeuristic and EdgeHeuristic.", desc : html("Labels a graph variable using VertexHeuristic and EdgeHeuristic."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable,\r\n\t\t\t if VertexHeuristic is not in {down,up} or\r\n\t\t\t if EdgeHeuristic is not in {down,up}.\r\n\t\t\t", eg : "\r\n?- graph_labeling(G,down,up).\r\nNo.\r\n\r\n?- V`::[]..[1,2], E`::[]..[[1,2],[2,1]], dirgraph(G,V,E), graph_labeling(G,d,up).\r\nNo.\r\n\r\n?- V`::[]..[1,2], E`::[]..[[1,2],[2,1]], dirgraph(G,V,E), graph_labeling(G,down,u).\r\nNo.\r\n\r\n?- V`::[]..[1,2], E`::[]..[[1,2],[2,1]], dirgraph(G,V,E), graph_labeling(G,down,up).\r\nV = []\r\nE = []\r\nG = dirgraph([], [])\r\nYes ? ;\r\n\r\nV = [2]\r\nE = []\r\nG = dirgraph([2], [])\r\nYes ? ;\r\n\r\nV = [1]\r\nE = []\r\nG = dirgraph([1], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2], [2, 1]]\r\nG = dirgraph([1, 2], [[1, 2], [2, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2]]\r\nG = dirgraph([1, 2], [[1, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[2, 1]]\r\nG = dirgraph([1, 2], [[2, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = []\r\nG = dirgraph([1, 2], [])\r\nYes\r\n\t\t\t"]).
:- comment(hash_add_all / 2, hidden).
:- comment(induced_subgraph / 2, hidden).
:- comment(kill_susps / 1, hidden).
:- comment(order / 2, [amode : order(+, ?), args : ["Graph" : "A graph.", "Order" : "The order of the graph."], summary : "Obtains a graph's order.", desc : html("Determines the number of vertices composing a graph variable."), fail_if : "Fails\r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if Graph can not be constrained to have a vertex-set with a cardinality delimited by Order.\r\n\t\t\t", eg : "\r\n?- order(Graph,Order).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), order(G,0).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), order(G,4).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), order(G,Order).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Order{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Order{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}, E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])})\r\nOrder = Order{cardinal : _700, fd : [2, 3]}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), order(G,2).\r\nV = [1, 2]\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 1]] : 2], Card{cardinal : _909, fd : [1, 2]}, _801, _802, _803, [], ['SUSP-_2957-dead', 'SUSP-_2650-susp'], [], ['SUSP-_3263-dead'])}\r\nG = dirgraph([1, 2], E{cardinal([[[1, 2]] : 1, [[2, 1]] : 2], Card{cardinal : _909, fd : [1, 2]}, _801, _802, _803, [], ['SUSP-_2957-dead', 'SUSP-_2650-susp'], [], ['SUSP-_3263-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), order(G,3).\r\nV = [1, 2, 3]\r\nE = E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _909, fd : [1 .. 6]}, _801, _802, _803, [], ['SUSP-_2650-susp'], [], ['SUSP-_1944-dead'])}\r\nG = dirgraph([1, 2, 3], E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _909, fd : [1 .. 6]}, _801, _802, _803, [], ['SUSP-_2650-susp'], [], ['SUSP-_1944-dead'])})\r\n\t\t\t"]).
:- comment(oriented_graph / 2, [amode : oriented_graph(+, ?), args : ["UndirectedGraph" : "An undirected graph.", "DirectedGraph" : "The oriented directed graph of UndirectedGraph."], summary : "Obtains an oriented graph of a given undirected graph.", desc : html("Obtains an oriented graph of a given undirected graph."), fail_if : "Fails \r\n\t\t\t if UndirectedGraph is not an undirected graph variable or\r\n\t\t\t if UndirectedGraph can not be contrained to have DirectedGraph as an oriented graph (DirectedGraph is a directed graph variable).\r\n\t\t\t", eg : "\r\n?- oriented_graph(UG,DG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], DE`::[[3,1]]..[[1,2],[2,3],[3,1]], UE`::[]..[[1,2],[2,1],[2,3],[3,2]], dirgraph(DG,V,DE), undirgraph(UG,V,UE), oriented_graph(UG,DG).\r\nNo.\r\n\r\n?- undirgraph(UG,[1,2,3],[[1,2],[2,1]]), oriented_graph(UG,DG), graph_labeling(DG).\r\nUG = undirgraph([1, 2, 3], [[1, 2], [2, 1]])\r\nDG = dirgraph([1, 2, 3], [[2, 1]])\r\nYes ? ;\r\n\r\nUG = undirgraph([1, 2, 3], [[1, 2], [2, 1]])\r\nDG = dirgraph([1, 2, 3], [[1, 2]])\r\nYes ? ;\r\n\r\nUG = undirgraph([1, 2, 3], [[1, 2], [2, 1]])\r\nDG = dirgraph([1, 2, 3], [[1, 2], [2, 1]])\r\nYes\r\n\r\n?- V`::[]..[1,2,3], DE`::[]..[[1,2],[3,1]], UE`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(DG,V,DE), undirgraph(UG,V,UE), oriented_graph(UG,DG), size(DG,Size), Size #> 0, graph_labeling(DG).\r\nV = [1, 3]\r\nDE = [[3, 1]]\r\nUE = [[1, 3], [3, 1]]\r\nDG = dirgraph([1, 3], [[3, 1]])\r\nUG = undirgraph([1, 3], [[1, 3], [3, 1]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nDE = [[1, 2]]\r\nUE = [[1, 2], [2, 1]]\r\nDG = dirgraph([1, 2], [[1, 2]])\r\nUG = undirgraph([1, 2], [[1, 2], [2, 1]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[3, 1]]\r\nUE = [[1, 3], [3, 1]]\r\nDG = dirgraph([1, 2, 3], [[3, 1]])\r\nUG = undirgraph([1, 2, 3], [[1, 3], [3, 1]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[1, 2]]\r\nUE = [[1, 2], [2, 1]]\r\nDG = dirgraph([1, 2, 3], [[1, 2]])\r\nUG = undirgraph([1, 2, 3], [[1, 2], [2, 1]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[1, 2], [3, 1]]\r\nUE = [[1, 2], [1, 3], [2, 1], [3, 1]]\r\nDG = dirgraph([1, 2, 3], [[1, 2], [3, 1]])\r\nUG = undirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [3, 1]])\r\nSize = 2\r\nYes\r\n\t\t\t"]).
:- comment(path / 3, [amode : path(+, +, +), args : ["Graph" : "A graph.", "OriginVertex" : "Initial vertex in the path between OriginVertex and TerminusVertex in Graph.", "TerminusVertex" : "Final vertex in the path between OriginVertex and TerminusVertex in Graph."], summary : "Ensures Graph represents a path between OriginVertex and TerminusVertex in Graph.", desc : html("Ensures Graph represents a path between OriginVertex and TerminusVertex in Graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable,\r\n\t\t\t if OriginVertex does not belong to Graph's vertex-set,\r\n\t\t\t if TerminusVertex does not belong to Graph's vertex-set or\r\n\t\t\t if Graph can not be constrained to define a path between OriginVertex and TerminusVertex.\r\n\t\t\t", eg : "\r\n?- path(G,Origin,Terminus).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3,4], E`::[]..[[1,2],[1,3],[1,4],[2,4],[3,4]], dirgraph(G,V,E), path(G, 1, 5).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3,4], E`::[]..[[1,2],[1,3],[1,4],[2,4],[3,4]], dirgraph(G,V,E), path(G, 5, 1).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3,4], E`::[]..[[1,2],[1,3],[1,4],[2,4],[3,4]], dirgraph(G,V,E), path(G, 4, 1).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3,4], E`::[]..[[1,2],[1,3],[1,4],[2,4],[3,4]], dirgraph(G,V,E), path(G, 1, 4), graph_labeling(G).\r\nV = [1, 4]\r\nE = [[1, 4]]\r\nG = dirgraph([1, 4], [[1, 4]])\r\nYes ? ;\r\n\r\nV = [1, 3, 4]\r\nE = [[1, 3], [3, 4]]\r\nG = dirgraph([1, 3, 4], [[1, 3], [3, 4]])\r\nYes ? ;\r\n\r\nV = [1, 2, 4]\r\nE = [[1, 2], [2, 4]]\r\nG = dirgraph([1, 2, 4], [[1, 2], [2, 4]])\r\nYes\r\n\r\n?- V`::[]..[1,2,3,4], E`::[]..[[1,2],[1,3],[1,4],[2,1],[2,4],[3,1],[3,4],[4,1],[4,2],[4,3]], undirgraph(G,V,E), path(G, 1, 4), graph_labeling(G).\r\nV = [1, 3, 4]\r\nE = [[1, 3], [3, 1], [3, 4], [4, 3]]\r\nG = undirgraph([1, 3, 4], [[1, 3], [3, 1], [3, 4], [4, 3]])\r\nYes ? ;\r\n\r\nV = [1, 3, 4]\r\nE = [[1, 3], [1, 4], [3, 1], [3, 4], [4, 1], [4, 3]]\r\nG = undirgraph([1, 3, 4], [[1, 3], [1, 4], [3, 1], [3, 4], [4, 1], [4, 3]])\r\nYes ? ;\r\n\r\nV = [1, 2, 4]\r\nE = [[1, 2], [2, 1], [2, 4], [4, 2]]\r\nG = undirgraph([1, 2, 4], [[1, 2], [2, 1], [2, 4], [4, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 4]\r\nE = [[1, 2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2]]\r\nG = undirgraph([1, 2, 4], [[1, 2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3, 4]\r\nE = [[1, 2], [1, 3], [2, 1], [2, 4], [3, 1], [3, 4], [4, 2], [4, 3]]\r\nG = undirgraph([1, 2, 3, 4], [[1, 2], [1, 3], [2, 1], [2, 4], [3, 1], [3, 4], [4, 2], [4, 3]])\r\nYes\r\n\t\t\t"]).
:- comment(predecessors / 3, [amode : predecessors(+, +, ?), args : ["Graph" : "A graph.", "Vertex" : "A vertex of Graph.", "PredSet" : "Set of predecessors of Vertex in Graph."], summary : "Determines the predecessor-set of a vertex in a graph.", desc : html("Determines the predecessor-set of a vertex in a graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable,\r\n\t\t\t if Vertex does not belong to Graph's vertex-set or\r\n\t\t\t if Graph can not be constrained to have the vertices in PredSet as predecessors of Vertex.\r\n\t\t\t", eg : "\r\n?- predecessors(G,V,Preds).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), predecessors(G,4,Preds).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), predecessors(G,2,[1,3,4]).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), predecessors(G,2,Preds).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _647, fd : [2, 3]}, _539, _540, _541, [], [], ['SUSP-_2921-susp', 'SUSP-_2484-susp'], ['SUSP-_3073-susp'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _845, fd : [1 .. 4]}, _737, _738, _739, [], ['SUSP-_3506-susp', 'SUSP-_2494-susp'], ['SUSP-_3518-susp'], ['SUSP-_1802-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _647, fd : [2, 3]}, _539, _540, _541, [], [], ['SUSP-_2921-susp', 'SUSP-_2484-susp'], ['SUSP-_3073-susp'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _845, fd : [1 .. 4]}, _737, _738, _739, [], ['SUSP-_3506-susp', 'SUSP-_2494-susp'], ['SUSP-_3518-susp'], ['SUSP-_1802-dead'])})\r\nPreds = Preds{cardinal([[1] : 1, [3] : 2], PredCard{cardinal : _2731, fd : [1, 2]}, _2623, _2624, _2625, [], ['SUSP-_3530-susp', 'SUSP-_2803-susp'], ['SUSP-_3542-susp'], ['SUSP-_3073-susp'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), predecessors(G,2,[1]).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _652, fd : [2, 3]}, _544, _545, _546, [], [], ['SUSP-_2798-dead', 'SUSP-_2489-susp'], ['SUSP-_2879-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _850, fd : [1 .. 4]}, _742, _743, _744, [], ['SUSP-_2939-susp', 'SUSP-_2499-susp'], ['SUSP-_2951-susp'], ['SUSP-_1807-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _652, fd : [2, 3]}, _544, _545, _546, [], [], ['SUSP-_2798-dead', 'SUSP-_2489-susp'], ['SUSP-_2879-dead'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _850, fd : [1 .. 4]}, _742, _743, _744, [], ['SUSP-_2939-susp', 'SUSP-_2499-susp'], ['SUSP-_2951-susp'], ['SUSP-_1807-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), predecessors(G,2,[1,3]).\r\nV = [1, 2, 3]\r\nE = E{cardinal([[[1, 2], [3, 2]]:2, [[2, 3], [3, 1]]:4], Card{cardinal : _860, fd:[2..4]}, _752, _753, _754, [], ['SUSP-_4324-susp', 'SUSP-_2509-susp'], ['SUSP-_4336-susp'], ['SUSP-_4141-dead'])}\r\nG = dirgraph([1, 2, 3], E{cardinal([[[1, 2], [3, 2]]:2, [[2, 3], [3, 1]]:4], Card{cardinal : _860, fd:[2..4]}, _752, _753, _754, [], ['SUSP-_4324-susp', 'SUSP-_2509-susp'], ['SUSP-_4336-susp'], ['SUSP-_4141-dead'])})\r\n\t\t\t"]).
:- comment(reachables / 3, [amode : reachables(+, +, ?), args : ["Graph" : "A graph.", "SourceVertex" : "A vertex of Graph.", "ReachSet" : "Set of vertices reachable from SourceVertex in Graph."], summary : "Determines the reachables-set of a vertex in a graph.", desc : html("Determines the reachables-set of a vertex in a graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable,\r\n\t\t\t if SourceVertex does not belong to Graph's vertex-set or\r\n\t\t\t if Graph can not be constrained to have the vertices in ReachSet reachable from Vertex.\r\n\t\t\t", eg : "\r\n?- reachables(G,V,Reachs).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), reachables(G,4,Reachs).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), reachables(G,3,[1,3,4]).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), reachables(G,3,Reachs).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _647, fd : [2, 3]}, _539, _540, _541, [], [], ['SUSP-_2484-susp'], ['SUSP-_2108-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _845, fd : [1 .. 4]}, _737, _738, _739, [], ['SUSP-_3145-susp', 'SUSP-_2494-susp'], ['SUSP-_3133-susp'], ['SUSP-_1802-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _647, fd : [2, 3]}, _539, _540, _541, [], [], ['SUSP-_2484-susp'], ['SUSP-_2108-dead'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _845, fd : [1 .. 4]}, _737, _738, _739, [], ['SUSP-_3145-susp', 'SUSP-_2494-susp'], ['SUSP-_3133-susp'], ['SUSP-_1802-dead'])})\r\nReachs = Reachs{cardinal([[3] : 1, [1, 2] : 3], Card{cardinal : _3086, fd : [1 .. 3]}, _2978, _2979, _2980, [], ['SUSP-_3121-susp'], ['SUSP-_3110-susp'], [])}\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), reachables(G,3,Reachs), 1 `@ Reachs.\r\nV = [1, 2, 3]\r\nE = E{cardinal([[[1, 2], [3, 1]] : 2, [[2, 3], [3, 2]] : 4], Card{cardinal : _873, fd : [2 .. 4]}, _765, _766, _767, [], ['SUSP-_3173-susp', 'SUSP-_2522-susp'], ['SUSP-_5570-dead', 'SUSP-_3161-susp'], ['SUSP-_5651-dead'])}\r\nG = dirgraph([1, 2, 3], E{cardinal([[[1, 2], [3, 1]] : 2, [[2, 3], [3, 2]] : 4], Card{cardinal : _873, fd : [2 .. 4]}, _765, _766, _767, [], ['SUSP-_3173-susp', 'SUSP-_2522-susp'], ['SUSP-_5570-dead', 'SUSP-_3161-susp'], ['SUSP-_5651-dead'])})\r\nReachs = [1, 2, 3]\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), reachables(G,3,Reachs), 1 `-@ Reachs.\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _675, fd : [2, 3]}, _567, _568, _569, [], [], ['SUSP-_2512-susp'], ['SUSP-_2136-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 2]] : 3], Card{cardinal : _873, fd : [1 .. 3]}, _765, _766, _767, [], ['SUSP-_3480-dead', 'SUSP-_3173-susp', 'SUSP-_2522-susp'], ['SUSP-_3161-susp'], ['SUSP-_3665-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _675, fd : [2, 3]}, _567, _568, _569, [], [], ['SUSP-_2512-susp'], ['SUSP-_2136-dead'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 2]] : 3], Card{cardinal : _873, fd : [1 .. 3]}, _765, _766, _767, [], ['SUSP-_3480-dead', 'SUSP-_3173-susp', 'SUSP-_2522-susp'], ['SUSP-_3161-susp'], ['SUSP-_3665-dead'])})\r\nReachs = Reachs{cardinal([[3] : 1, [2] : 2], Card{cardinal : _3114, fd : [1, 2]}, _3006, _3007, _3008, [], ['SUSP-_4091-dead', 'SUSP-_3149-susp'], ['SUSP-_3138-susp'], ['SUSP-_4317-dead'])}\r\n\t\t\t"]).
:- comment(reverse_graph / 2, [amode : reverse_graph(+, ?), args : ["Graph" : "A graph.", "ReverseGraph" : "The reverse graph of Graph."], summary : "Obtains the reverse graph of a given graph.", desc : html("Obtains the reverse graph of a given graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if Graph can not be contrained to have ReverseGraph as its reverse graph (ReverseGraph is a graph variable).\r\n\t\t\t", eg : "\r\n?- reverse_graph(G,RG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), dirgraph(RG,V,E), reverse_graph(G,RG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), reverse_graph(G,RG), size(G,2), graph_labeling(G).\r\nV = [1, 2, 3]\r\nE = [[2, 3], [3, 1]]\r\nG = dirgraph([1, 2, 3], [[2, 3], [3, 1]])\r\nRG = dirgraph([1, 2, 3], [[1, 3], [3, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [3, 1]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [3, 1]])\r\nRG = dirgraph([1, 2, 3], [[1, 3], [2, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3]])\r\nRG = dirgraph([1, 2, 3], [[2, 1], [3, 2]])\r\nYes\r\n\r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], RE`::[[3,2]]..[[1,3],[2,1],[3,2]], dirgraph(G,V,E), dirgraph(RG,V,RE), reverse_graph(G,RG), graph_labeling(G).\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3]]\r\nRE = [[2, 1], [3, 2]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3]])\r\nRG = dirgraph([1, 2, 3], [[2, 1], [3, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3], [3, 1]]\r\nRE = [[1, 3], [2, 1], [3, 2]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3], [3, 1]])\r\nRG = dirgraph([1, 2, 3], [[1, 3], [2, 1], [3, 2]])\r\nYes\r\n\t\t\t"]).
:- comment(size / 2, [amode : size(+, ?), args : ["Graph" : "A graph.", "Size" : "The size of the graph."], summary : "Obtains a graph's size.", desc : html("Determines the number of edges composing a graph variable."), fail_if : "Fails\r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if Graph can not be constrained to have an edge-set with a cardinality delimited by Size.\r\n\t\t\t", eg : "\r\n?- size(Graph,Size).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), size(G,0).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), size(G,7).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), size(G,Size).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Size{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_2645-susp'], ['SUSP-_2255-dead'])}, E{cardinal([[[1, 2]] : 1, [[1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] : 6], Size{cardinal : _914, fd : [1 .. 6]}, _806, _807, _808, [], ['SUSP-_2655-susp'], [], ['SUSP-_1949-dead'])})\r\nSize = Size{cardinal : _914, fd : [1 .. 6]}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E), size(G,Size).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_3898-susp'], ['SUSP-_3508-dead'])}\r\nE = E{cardinal([[[1, 2], [2, 1]] : 2, [[1, 3], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [2 .. 6]}, _806, _807, _808, [], ['SUSP-_3908-susp', 'SUSP-_1758-susp'], ['SUSP-_1767-susp'], ['SUSP-_2823-dead'])}\r\nG = undirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _700, fd : [2, 3]}, _592, _593, _594, [], [], ['SUSP-_3898-susp'], ['SUSP-_3508-dead'])}, E{cardinal([[[1, 2], [2, 1]] : 2, [[1, 3], [2, 3], [3, 1], [3, 2]] : 6], Card{cardinal : _914, fd : [2 .. 6]}, _806, _807, _808, [], ['SUSP-_3908-susp', 'SUSP-_1758-susp'], ['SUSP-_1767-susp'], ['SUSP-_2823-dead'])})\r\nSize = _4017{cardinal : _4022, fd : [1 .. 3]}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), size(G,1).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _695, fd : [2, 3]}, _587, _588, _589, [], [], ['SUSP-_2640-susp'], ['SUSP-_2250-dead'])}\r\nE = [[1, 2]]\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _695, fd : [2, 3]}, _587, _588, _589, [], [], ['SUSP-_2640-susp'], ['SUSP-_2250-dead'])}, [[1, 2]])\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E), size(G,1).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _695, fd : [2, 3]}, _587, _588, _589, [], [], ['SUSP-_3893-susp'], ['SUSP-_3503-dead'])}\r\nE = [[1, 2], [2, 1]]\r\nG = undirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _695, fd : [2, 3]}, _587, _588, _589, [], [], ['SUSP-_3893-susp'], ['SUSP-_3503-dead'])}, [[1, 2], [2, 1]])\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), size(G,6).\r\nV = [1, 2, 3]\r\nE = [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]])\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E), size(G,3).\r\nV = [1, 2, 3]\r\nE = [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]\r\nG = undirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]])\r\n\t\t\t"]).
:- comment(strongly_connected / 1, [amode : strongly_connected(+), args : ["Graph" : "A graph."], summary : "Guarantees that a directed graph Graph is strongly connected.", desc : html("Guarantees that a directed graph Graph is strongly connected, i.e., that each vertex is reachable from any other one."), fail_if : "Fails \r\n\t\t\t if Graph is not a directed graph variable or\r\n\t\t\t if Graph can not be constrained to be strongly connected.\r\n\t\t\t", eg : "\r\n?- strongly_connected(G).\r\nNo.\r\n\r\n?- V`::[1,2]..[1,2,3,4], E`::[]..[[1,3],[2,4],[4,1],[4,3]], dirgraph(G,V,E), strongly_connected(G).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,1]], dirgraph(G,V,E), strongly_connected(G), graph_labeling(G).\r\nV = []\r\nE = []\r\nG = dirgraph([], [])\r\nYes ? ;\r\n\r\nV = [3]\r\nE = []\r\nG = dirgraph([3], [])\r\nYes ? ;\r\n\r\nV = [2]\r\nE = []\r\nG = dirgraph([2], [])\r\nYes ? ;\r\n\r\nV = [1]\r\nE = []\r\nG = dirgraph([1], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2], [2, 1]]\r\nG = dirgraph([1, 2], [[1, 2], [2, 1]])\r\nYes\r\n\t\t\t"]).
:- comment(subgraph / 2, [amode : subgraph(?, +), args : ["SubGraph" : "A subgraph of Graph.", "Graph" : "A graph."], summary : "Constraints SubGraph to be a subgraph of Graph.", desc : html("Constraints SubGraph to be a subgraph of Graph."), fail_if : "Fails\r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if SubGraph can not be constrained to be contained in Graph.\r\n\t\t\t", eg : "\r\n?- subgraph(SG,G).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], SE`::[[4,5]]..[[1,2],[2,3],[3,1],[4,5]], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(SG,V,SE), dirgraph(G,V,E), subgraph(SG,G).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), subgraph(SG,G).\r\nV = V{cardinal([[] : 0, [1, 2, 3] : 3], Card{cardinal : _580, fd : [0 .. 3]}, _472, _473, _474, [], [], ['SUSP-_2766-susp', 'SUSP-_2352-susp'], ['SUSP-_2926-susp'])}\r\nE = E{cardinal([[] : 0, [[1, 2], [2, 3], [3, 1]] : 3], Card{cardinal : _765, fd : [0 .. 3]}, _657, _658, _659, [], ['SUSP-_2362-susp'], ['SUSP-_3323-susp'], ['SUSP-_3483-susp'])}\r\nG = dirgraph(V{cardinal([[] : 0, [1, 2, 3] : 3], Card{cardinal : _580, fd : [0 .. 3]}, _472, _473, _474, [], [], ['SUSP-_2766-susp', 'SUSP-_2352-susp'], ['SUSP-_2926-susp'])}, E{cardinal([[] : 0, [[1, 2], [2, 3], [3, 1]] : 3], Card{cardinal : _765, fd : [0 .. 3]}, _657, _658, _659, [], ['SUSP-_2362-susp'], ['SUSP-_3323-susp'], ['SUSP-_3483-susp'])})\r\nSG = dirgraph(SubVertexSet{cardinal([[] : 0, [1, 2, 3] : 3], Card{cardinal : _2576, fd : [0 .. 3]}, _2468, _2469, _2470, [], ['SUSP-_2648-susp'], ['SUSP-_5069-susp'], ['SUSP-_4679-dead', 'SUSP-_2926-susp'])}, SubEdgeSet{cardinal([[] : 0, [[1, 2], [2, 3], [3, 1]] : 3], Card{cardinal : _3133, fd : [0 .. 3]}, _3025, _3026, _3027, [], ['SUSP-_5079-susp', 'SUSP-_3205-susp'], [], ['SUSP-_4395-dead', 'SUSP-_3483-susp'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), subgraph(SG,G), getVertexSet(G,VSet), 1 `-@ VSet.\r\nV = VSet{cardinal([[] : 0, [2, 3] : 2], Card{cardinal : _645, fd : [0 .. 2]}, _537, _538, _539, [], [], ['SUSP-_2831-susp', 'SUSP-_2417-susp'], ['SUSP-_2991-susp'])}\r\nE = E{cardinal([[] : 0, [[2, 3]] : 1], Card{cardinal : _830, fd : [0, 1]}, _722, _723, _724, [], ['SUSP-_6162-dead', 'SUSP-_2427-susp'], ['SUSP-_3388-susp'], ['SUSP-_6513-dead', 'SUSP-_3548-susp'])}\r\nG = dirgraph(VSet{cardinal([[] : 0, [2, 3] : 2], Card{cardinal : _645, fd : [0 .. 2]}, _537, _538, _539, [], [], ['SUSP-_2831-susp', 'SUSP-_2417-susp'], ['SUSP-_2991-susp'])}, E{cardinal([[] : 0, [[2, 3]] : 1], Card{cardinal : _830, fd : [0, 1]}, _722, _723, _724, [], ['SUSP-_6162-dead', 'SUSP-_2427-susp'], ['SUSP-_3388-susp'], ['SUSP-_6513-dead', 'SUSP-_3548-susp'])})\r\nSG = dirgraph(SubVertexSet{cardinal([[] : 0, [2, 3] : 2], Card{cardinal : _2641, fd : [0 .. 2]}, _2533, _2534, _2535, [], ['SUSP-_2713-susp'], ['SUSP-_5134-susp'], ['SUSP-_4744-dead', 'SUSP-_2991-susp'])}, SubEdgeSet{cardinal([[] : 0, [[2, 3]] : 1], Card{cardinal : _3198, fd : [0, 1]}, _3090, _3091, _3092, [], ['SUSP-_5697-dead', 'SUSP-_5144-susp', 'SUSP-_3270-susp'], [], ['SUSP-_5949-dead', 'SUSP-_3548-susp'])})\r\nVSet = VSet{cardinal([[] : 0, [2, 3] : 2], Card{cardinal : _645, fd : [0 .. 2]}, _537, _538, _539, [], [], ['SUSP-_2831-susp', 'SUSP-_2417-susp'], ['SUSP-_2991-susp'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), subgraph(SG,G), getVertexSet(SG,VSet), 1 `-@ VSet.\r\nV = V{cardinal([[] : 0, [1, 2, 3] : 3], Card{cardinal : _645, fd : [0 .. 3]}, _537, _538, _539, [], [], ['SUSP-_2831-susp', 'SUSP-_2417-susp'], ['SUSP-_2991-susp'])}\r\nE = E{cardinal([[] : 0, [[1, 2], [2, 3], [3, 1]] : 3], Card{cardinal : _830, fd : [0 .. 3]}, _722, _723, _724, [], ['SUSP-_2427-susp'], ['SUSP-_3388-susp'], ['SUSP-_3548-susp'])}\r\nG = dirgraph(V{cardinal([[] : 0, [1, 2, 3] : 3], Card{cardinal : _645, fd : [0 .. 3]}, _537, _538, _539, [], [], ['SUSP-_2831-susp', 'SUSP-_2417-susp'], ['SUSP-_2991-susp'])}, E{cardinal([[] : 0, [[1, 2], [2, 3], [3, 1]] : 3], Card{cardinal : _830, fd : [0 .. 3]}, _722, _723, _724, [], ['SUSP-_2427-susp'], ['SUSP-_3388-susp'], ['SUSP-_3548-susp'])})\r\nSG = dirgraph(VSet{cardinal([[] : 0, [2, 3] : 2], Card{cardinal : _2641, fd : [0 .. 2]}, _2533, _2534, _2535, [], ['SUSP-_2713-susp'], ['SUSP-_5134-susp'], ['SUSP-_4744-dead', 'SUSP-_2991-susp'])}, SubEdgeSet{cardinal([[] : 0, [[2, 3]] : 1], Card{cardinal : _3198, fd : [0, 1]}, _3090, _3091, _3092, [], ['SUSP-_5481-dead', 'SUSP-_5144-susp', 'SUSP-_3270-susp'], [], ['SUSP-_5733-dead', 'SUSP-_3548-susp'])})\r\nVSet = VSet{cardinal([[] : 0, [2, 3] : 2], Card{cardinal : _2641, fd : [0 .. 2]}, _2533, _2534, _2535, [], ['SUSP-_2713-susp'], ['SUSP-_5134-susp'], ['SUSP-_4744-dead', 'SUSP-_2991-susp'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), subgraph(SG,G), getEdgeSet(G,ESet), [1,2] `@ ESet.\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _665, fd : [2, 3]}, _557, _558, _559, [], [], ['SUSP-_5574-dead', 'SUSP-_2851-susp', 'SUSP-_2437-susp'], ['SUSP-_5655-dead', 'SUSP-_3011-susp'])}\r\nE = ESet{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _850, fd : [1 .. 3]}, _742, _743, _744, [], ['SUSP-_2447-susp'], ['SUSP-_3408-susp'], ['SUSP-_3568-susp'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _665, fd : [2, 3]}, _557, _558, _559, [], [], ['SUSP-_5574-dead', 'SUSP-_2851-susp', 'SUSP-_2437-susp'], ['SUSP-_5655-dead', 'SUSP-_3011-susp'])}, ESet{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _850, fd : [1 .. 3]}, _742, _743, _744, [], ['SUSP-_2447-susp'], ['SUSP-_3408-susp'], ['SUSP-_3568-susp'])})\r\nSG = dirgraph(SubVertexSet{cardinal([[] : 0, [1, 2, 3] : 3], Card{cardinal : _2661, fd : [0 .. 3]}, _2553, _2554, _2555, [], ['SUSP-_2733-susp'], ['SUSP-_5154-susp'], ['SUSP-_4764-dead', 'SUSP-_3011-susp'])}, SubEdgeSet{cardinal([[] : 0, [[1, 2], [2, 3], [3, 1]] : 3], Card{cardinal : _3218, fd : [0 .. 3]}, _3110, _3111, _3112, [], ['SUSP-_5164-susp', 'SUSP-_3290-susp'], [], ['SUSP-_4480-dead', 'SUSP-_3568-susp'])})\r\nESet = ESet{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _850, fd : [1 .. 3]}, _742, _743, _744, [], ['SUSP-_2447-susp'], ['SUSP-_3408-susp'], ['SUSP-_3568-susp'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), subgraph(SG,G), getEdgeSet(SG,ESet), [1,2] `@ ESet.\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _665, fd : [2, 3]}, _557, _558, _559, [], [], ['SUSP-_5768-dead', 'SUSP-_2851-susp', 'SUSP-_2437-susp'], ['SUSP-_5849-dead', 'SUSP-_3011-susp'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _850, fd : [1 .. 3]}, _742, _743, _744, [], ['SUSP-_2447-susp'], ['SUSP-_3408-susp'], ['SUSP-_3568-susp'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _665, fd : [2, 3]}, _557, _558, _559, [], [], ['SUSP-_5768-dead', 'SUSP-_2851-susp', 'SUSP-_2437-susp'], ['SUSP-_5849-dead', 'SUSP-_3011-susp'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _850, fd : [1 .. 3]}, _742, _743, _744, [], ['SUSP-_2447-susp'], ['SUSP-_3408-susp'], ['SUSP-_3568-susp'])})\r\nSG = dirgraph(SubVertexSet{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _2661, fd : [2, 3]}, _2553, _2554, _2555, [], ['SUSP-_2733-susp'], ['SUSP-_6246-dead', 'SUSP-_5154-susp'], ['SUSP-_6327-dead', 'SUSP-_3011-susp'])}, ESet{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _3218, fd : [1 .. 3]}, _3110, _3111, _3112, [], ['SUSP-_5164-susp', 'SUSP-_3290-susp'], [], ['SUSP-_4480-dead', 'SUSP-_3568-susp'])})\r\nESet = ESet{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _3218, fd : [1 .. 3]}, _3110, _3111, _3112, [], ['SUSP-_5164-susp', 'SUSP-_3290-susp'], [], ['SUSP-_4480-dead', 'SUSP-_3568-susp'])}\r\n\t\t\t"]).
:- comment(successors / 3, [amode : successors(+, +, ?), args : ["Graph" : "A graph.", "Vertex" : "A vertex of Graph.", "SuccSet" : "Set of successors of Vertex in Graph."], summary : "Determines the successor-set of a vertex in a graph.", desc : html("Determines the successor-set of a vertex in a graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable,\r\n\t\t\t if Vertex does not belong to Graph's vertex-set or\r\n\t\t\t if Graph can not be constrained to have the vertices in SuccSet as successors of Vertex.\r\n\t\t\t", eg : "\r\n?- successors(G,V,Succs).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), successors(G,4,Succs).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), successors(G,3,[1,3,4]).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), successors(G,3,Succs).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _647, fd : [2, 3]}, _539, _540, _541, [], [], ['SUSP-_2921-susp', 'SUSP-_2484-susp'], ['SUSP-_3073-susp'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _845, fd : [1 .. 4]}, _737, _738, _739, [], ['SUSP-_3359-susp', 'SUSP-_2494-susp'], ['SUSP-_3371-susp'], ['SUSP-_1802-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _647, fd : [2, 3]}, _539, _540, _541, [], [], ['SUSP-_2921-susp', 'SUSP-_2484-susp'], ['SUSP-_3073-susp'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1], [3, 2]] : 4], Card{cardinal : _845, fd : [1 .. 4]}, _737, _738, _739, [], ['SUSP-_3359-susp', 'SUSP-_2494-susp'], ['SUSP-_3371-susp'], ['SUSP-_1802-dead'])})\r\nSuccs = Succs{cardinal([[] : 0, [1, 2] : 2], SuccCard{cardinal : _2731, fd : [0 .. 2]}, _2623, _2624, _2625, [], ['SUSP-_3383-susp', 'SUSP-_2803-susp'], ['SUSP-_3395-susp'], ['SUSP-_3073-susp'])}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), successors(G,3,[1]).\r\nV = [1, 2, 3]\r\nE = E{cardinal([[[1, 2], [3, 1]]:2, [[2, 3]]:3], Card{cardinal : _850, fd:[2, 3]}, _742, _743, _744, [], ['SUSP-_4597-susp', 'SUSP-_2499-susp'], ['SUSP-_4609-susp'], ['SUSP-_4406-dead'])}\r\nG = dirgraph([1, 2, 3], E{cardinal([[[1, 2], [3, 1]]:2, [[2, 3]]:3], Card{cardinal : _850, fd:[2, 3]}, _742, _743, _744, [], ['SUSP-_4597-susp', 'SUSP-_2499-susp'], ['SUSP-_4609-susp'], ['SUSP-_4406-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1],[3,2]], dirgraph(G,V,E), successors(G,3,[1,2]).\r\nV = [1, 2, 3]\r\nE = E{cardinal([[[1, 2], [3, 1], [3, 2]]:3, [[2, 3]]:4], Card{cardinal : _860, fd:[3, 4]}, _752, _753, _754, [], ['SUSP-_5007-susp', 'SUSP-_2509-susp'], ['SUSP-_5019-susp'], ['SUSP-_4830-dead'])}\r\nG = dirgraph([1, 2, 3], E{cardinal([[[1, 2], [3, 1], [3, 2]]:3, [[2, 3]]:4], Card{cardinal : _860, fd:[3, 4]}, _752, _753, _754, [], ['SUSP-_5007-susp', 'SUSP-_2509-susp'], ['SUSP-_5019-susp'], ['SUSP-_4830-dead'])})\t\t\t"]).
:- comment(symmetric / 1, [amode : symmetric(+), args : ["Graph" : "A graph."], summary : "Ensures Graph is symmetric", desc : html("Ensures that for every edge (x,y) added to the Graph the symmetric edge (y,x) is also added.<br />\r\n\t\t\t\t\tEnsures that for every edge (x,y) removed from the Graph the symmetric edge (y,x) is also removed."), fail_if : "Fails \r\n\t\t\t if Graph is not a graph variable or\r\n\t\t\t if Graph can not be enforced to be symmetric.\r\n\t\t\t", eg : "\r\n?- symmetric(G).\r\nNo.\r\n\t\t\t \r\n?- V`::[]..[1,2,3], E`::[[2,3]]..[[1,2],[1,3],[2,1],[2,3],[3,1]], dirgraph(G,V,E), symmetric(G).\r\nNo.\r\n\t\t\t \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), symmetric(G).\r\nV = V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _628, fd:[0..3]}, _520, _521, _522, [], [], ['SUSP-_2494-susp'], ['SUSP-_2104-dead'])}\r\nE = E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [3, 1]]:4], Card{cardinal : _829, fd:[0..4]}, _721, _722, _723, [], ['SUSP-_3338-susp', 'SUSP-_2504-susp'], ['SUSP-_3347-susp'], ['SUSP-_3248-dead'])}\r\nG = dirgraph(V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _628, fd:[0..3]}, _520, _521, _522, [], [], ['SUSP-_2494-susp'], ['SUSP-_2104-dead'])}, E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [3, 1]]:4], Card{cardinal : _829, fd:[0..4]}, _721, _722, _723, [], ['SUSP-_3338-susp', 'SUSP-_2504-susp'], ['SUSP-_3347-susp'], ['SUSP-_3248-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], dirgraph(G,V,E), symmetric(G).\r\nV = V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _688, fd:[2, 3]}, _580, _581, _582, [], [], ['SUSP-_3503-dead', 'SUSP-_2633-susp'], ['SUSP-_3584-dead'])}\r\nE = E{cardinal([[[1, 2], [2, 1]]:2, [[1, 3], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _902, fd:[2..6]}, _794, _795, _796, [], ['SUSP-_4193-susp', 'SUSP-_2643-susp'], ['SUSP-_4202-susp'], ['SUSP-_4109-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _688, fd:[2, 3]}, _580, _581, _582, [], [], ['SUSP-_3503-dead', 'SUSP-_2633-susp'], ['SUSP-_3584-dead'])}, E{cardinal([[[1, 2], [2, 1]]:2, [[1, 3], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _902, fd:[2..6]}, _794, _795, _796, [], ['SUSP-_4193-susp', 'SUSP-_2643-susp'], ['SUSP-_4202-susp'], ['SUSP-_4109-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[1,3],[2,1],[2,3],[3,1]], dirgraph(G,V,E), symmetric(G).\r\nV = V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _658, fd:[2, 3]}, _550, _551, _552, [], [], ['SUSP-_3426-dead', 'SUSP-_2556-susp'], ['SUSP-_3507-dead'])}\r\nE = E{cardinal([[[1, 2], [2, 1]]:2, [[1, 3], [3, 1]]:4], Card{cardinal : _864, fd:[2..4]}, _756, _757, _758, [], ['SUSP-_4162-susp', 'SUSP-_2566-susp'], ['SUSP-_4171-susp'], ['SUSP-_4052-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _658, fd:[2, 3]}, _550, _551, _552, [], [], ['SUSP-_3426-dead', 'SUSP-_2556-susp'], ['SUSP-_3507-dead'])}, E{cardinal([[[1, 2], [2, 1]]:2, [[1, 3], [3, 1]]:4], Card{cardinal : _864, fd:[2..4]}, _756, _757, _758, [], ['SUSP-_4162-susp', 'SUSP-_2566-susp'], ['SUSP-_4171-susp'], ['SUSP-_4052-dead'])})\r\n\t\t\t"]).
:- comment(terminate_susps / 2, hidden).
:- comment(underlying_graph / 2, [amode : underlying_graph(+, ?), args : ["DirectedGraph" : "A directed graph.", "UndirectedGraph" : "The underlying undirected graph of DirectedGraph."], summary : "Obtains an underlying graph of a given directed graph.", desc : html("Obtains an underlying graph of a given directed graph."), fail_if : "Fails \r\n\t\t\t if DirectedGraph is not a directed graph variable or\r\n\t\t\t if DirectedGraph can not be contrained to have UndirectedGraph as its underlying graph (UndirectedGraph is a undirected graph variable).\r\n\t\t\t", eg : "\r\n?- underlying_graph(DG,UG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], DE`::[[3,1]]..[[1,2],[2,3],[3,1]], UE`::[]..[[1,2],[2,1],[2,3],[3,2]], dirgraph(DG,V,DE), undirgraph(UG,V,UE), underlying_graph(DG,UG).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], DE`::[[3,1]]..[[1,2],[2,3],[3,1]], dirgraph(DG,V,DE), underlying_graph(DG,UG), graph_labeling(DG).\r\nV = [1, 3]\r\nDE = [[3, 1]]\r\nDG = dirgraph([1, 3], [[3, 1]])\r\nUG = undirgraph([1, 3], [[1, 3], [3, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[3, 1]]\r\nDG = dirgraph([1, 2, 3], [[3, 1]])\r\nUG = undirgraph([1, 2, 3], [[1, 3], [3, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[2, 3], [3, 1]]\r\nDG = dirgraph([1, 2, 3], [[2, 3], [3, 1]])\r\nUG = undirgraph([1, 2, 3], [[1, 3], [2, 3], [3, 1], [3, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[1, 2], [3, 1]]\r\nDG = dirgraph([1, 2, 3], [[1, 2], [3, 1]])\r\nUG = undirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [3, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[1, 2], [2, 3], [3, 1]]\r\nDG = dirgraph([1, 2, 3], [[1, 2], [2, 3], [3, 1]])\r\nUG = undirgraph([1, 2, 3], [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]])\r\nYes\r\n\r\n?- V`::[]..[1,2,3], DE`::[]..[[1,2],[2,3],[3,1]], UE`::[]..[[1,2],[2,1],[2,3],[3,2]], dirgraph(DG,V,DE), undirgraph(UG,V,UE), underlying_graph(DG,UG), size(DG,Size), Size #> 0, graph_labeling(DG).\r\nV = [1, 2]\r\nDE = [[1, 2]]\r\nUE = [[1, 2], [2, 1]]\r\nDG = dirgraph([1, 2], [[1, 2]])\r\nUG = undirgraph([1, 2], [[1, 2], [2, 1]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[2, 3]]\r\nUE = [[2, 3], [3, 2]]\r\nDG = dirgraph([1, 2, 3], [[2, 3]])\r\nUG = undirgraph([1, 2, 3], [[2, 3], [3, 2]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[1, 2]]\r\nUE = [[1, 2], [2, 1]]\r\nDG = dirgraph([1, 2, 3], [[1, 2]])\r\nUG = undirgraph([1, 2, 3], [[1, 2], [2, 1]])\r\nSize = 1\r\nYes ? ;\r\n\r\nV = [1, 2, 3]\r\nDE = [[1, 2], [2, 3]]\r\nUE = [[1, 2], [2, 1], [2, 3], [3, 2]]\r\nDG = dirgraph([1, 2, 3], [[1, 2], [2, 3]])\r\nUG = undirgraph([1, 2, 3], [[1, 2], [2, 1], [2, 3], [3, 2]])\r\nSize = 2\r\nYes\r\n\t\t\t"]).
:- comment(undirgraph / 3, [amode : undirgraph(-, +, +), args : ["Graph" : "An undirected graph.", "VertexSet" : "The vertex-set that constitutes Graph.", "EdgeSet" : "The edge-set that constitutes Graph."], summary : "Unirected graph constructor.", desc : html("Creates Graph as an undirected graph variable composed by the vertexes in VertexSet and the edges in EdgeSet."), fail_if : "Fails \r\n\t\t\t if VertexSet is not a set variable,\r\n\t\t\t if EdgeSet is not a set variable or\r\n\t\t\t if EdgeSet can not be contained in (VertexSet x VertexSet).\r\n\t\t\t", eg : "\r\n?- E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E).\r\nNo.\r\n\t\t\t \r\n?- V`::[]..[1,2,3], undirgraph(G,V,E).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[4,5]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2],[4,5],[5,4]], undirgraph(G,V,E).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E).\r\nV = V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _633, fd:[0..3]}, _525, _526, _527, [], [], ['SUSP-_2546-susp'], ['SUSP-_2156-dead'])}\r\nE = E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _842, fd:[0..6]}, _734, _735, _736, [], ['SUSP-_2556-susp'], [], ['SUSP-_1872-dead'])}\r\nG = undirgraph(V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _633, fd:[0..3]}, _525, _526, _527, [], [], ['SUSP-_2546-susp'], ['SUSP-_2156-dead'])}, E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _842, fd:[0..6]}, _734, _735, _736, [], ['SUSP-_2556-susp'], [], ['SUSP-_1872-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2],[4,5],[5,4]], undirgraph(G,V,E).\r\nV = V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _693, fd:[0..3]}, _585, _586, _587, [], [], ['SUSP-_2692-susp'], ['SUSP-_2302-dead'])}\r\nE = E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _918, fd:[0..6]}, _810, _811, _812, [], ['SUSP-_2702-susp'], [], ['SUSP-_2018-dead'])}\r\nG = undirgraph(V{cardinal([[]:0, [1, 2, 3]:3], Card{cardinal : _693, fd:[0..3]}, _585, _586, _587, [], [], ['SUSP-_2692-susp'], ['SUSP-_2302-dead'])}, E{cardinal([[]:0, [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _918, fd:[0..6]}, _810, _811, _812, [], ['SUSP-_2702-susp'], [], ['SUSP-_2018-dead'])})\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2],[2,1]]..[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], undirgraph(G,V,E).\r\nV = V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _693, fd:[2, 3]}, _585, _586, _587, [], [], ['SUSP-_3041-susp'], ['SUSP-_2651-dead'])}\r\nE = E{cardinal([[[1, 2], [2, 1]]:2, [[1, 3], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _917, fd:[2..6]}, _809, _810, _811, [], ['SUSP-_3051-susp'], [], ['SUSP-_1966-dead'])}\r\nG = undirgraph(V{cardinal([[1, 2]:2, [3]:3], Card{cardinal : _693, fd:[2, 3]}, _585, _586, _587, [], [], ['SUSP-_3041-susp'], ['SUSP-_2651-dead'])}, E{cardinal([[[1, 2], [2, 1]]:2, [[1, 3], [2, 3], [3, 1], [3, 2]]:6], Card{cardinal : _917, fd:[2..6]}, _809, _810, _811, [], ['SUSP-_3051-susp'], [], ['SUSP-_1966-dead'])})\r\n\t\t\t"]).
:- comment(weakly_connected / 1, [amode : weakly_connected(+), args : ["Graph" : "A graph."], summary : "Guarantees that a directed graph Graph is weakly connected.", desc : html("Guarantees that a directed graph Graph is weakly connected, i.e., that each vertex is reachable from any other one in the underlying graph of Graph."), fail_if : "Fails \r\n\t\t\t if Graph is not a directed graph variable or\r\n\t\t\t if Graph can not be constrained to be strongly connected.\r\n\t\t\t", eg : "\r\n?- weakly_connected(G).\r\nNo.\r\n\r\n?- V`::[1,2]..[1,2,3,4], E`::[]..[[1,3],[2,4],[3,1],[4,2]], dirgraph(G,V,E), weakly_connected(G).\r\nNo.\r\n\r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,1]], dirgraph(G,V,E), weakly_connected(G), graph_labeling(G).\r\nV = []\r\nE = []\r\nG = dirgraph([], [])\r\nYes ? ;\r\n\r\nV = [3]\r\nE = []\r\nG = dirgraph([3], [])\r\nYes ? ;\r\n\r\nV = [2]\r\nE = []\r\nG = dirgraph([2], [])\r\nYes ? ;\r\n\r\nV = [1]\r\nE = []\r\nG = dirgraph([1], [])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[2, 1]]\r\nG = dirgraph([1, 2], [[2, 1]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2]]\r\nG = dirgraph([1, 2], [[1, 2]])\r\nYes ? ;\r\n\r\nV = [1, 2]\r\nE = [[1, 2], [2, 1]]\r\nG = dirgraph([1, 2], [[1, 2], [2, 1]])\r\nYes\r\n\t\t\t"]).
:- comment(weight / 3, [amode : weight(+, +, ?), args : ["Graph" : "A graph.", "WeightHash" : "An hashtable an hashtable matching some elements (vertex or edge) of Graph to a positive weight. An unweighed element will be considered to have weight 0.", "Weight" : "The sum of the graph's vertices' and edges' weights."], summary : "Calculates the Weight of Graph given a WeightHash.", desc : html("Calculates the Weight of Graph given a WeightHash."), fail_if : "Fails\r\n\t\t\t if Graph is not a graph variable,\r\n\t\t\t if Weight is not an hash variable (lib(hash)) with positive integer weights or\r\n\t\t\t if Graph can not be constrained to have a weight delimited by Weight.\r\n\t\t\t", eg : "\r\n?- weight(G,WH,W).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), weight(G,WH,W).\r\ninstantiation fault in term_hash(1, -1, Size, _2486)\r\nAbort\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), hash_create(WH), hash_add(WH,1,1), hash_add(WH,2,1), hash_add(WH,3,1), hash_add(WH,[1,2],1), hash_add(WH,[2,3],1), hash_add(WH,[3,1],1), weight(G,WH,0).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), hash_create(WH), hash_add(WH,1,1), hash_add(WH,2,1), hash_add(WH,3,1), hash_add(WH,[1,2],1), hash_add(WH,[2,3],1), hash_add(WH,[3,1],1), weight(G,WH,7).\r\nNo.\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), hash_create(WH), hash_add(WH,1,1), hash_add(WH,2,1), hash_add(WH,3,1), hash_add(WH,[1,2],1), hash_add(WH,[2,3],1), hash_add(WH,[3,1],1), weight(G,WH,W).\r\nV = V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _941, fd : [2, 3]}, _833, _834, _835, [], ['SUSP-_3104-susp'], ['SUSP-_3130-susp', 'SUSP-_2731-susp'], ['SUSP-_2355-dead'])}\r\nE = E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _1131, fd : [1 .. 3]}, _1023, _1024, _1025, [], ['SUSP-_3117-susp', 'SUSP-_2741-susp'], ['SUSP-_3143-susp'], ['SUSP-_2049-dead'])}\r\nG = dirgraph(V{cardinal([[1, 2] : 2, [3] : 3], Card{cardinal : _941, fd : [2, 3]}, _833, _834, _835, [], ['SUSP-_3104-susp'], ['SUSP-_3130-susp', 'SUSP-_2731-susp'], ['SUSP-_2355-dead'])}, E{cardinal([[[1, 2]] : 1, [[2, 3], [3, 1]] : 3], Card{cardinal : _1131, fd : [1 .. 3]}, _1023, _1024, _1025, [], ['SUSP-_3117-susp', 'SUSP-_2741-susp'], ['SUSP-_3143-susp'], ['SUSP-_2049-dead'])})\r\nWH = hash(4, 6, [[3, 1] -> 1, [2, 3] -> 1, 1 -> 1, 2 -> 1, [1, 2] -> 1, 3 -> 1])\r\nW = W{cardinal : _3033, fd : [3 .. 6]}\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), hash_create(WH), hash_add(WH,1,1), hash_add(WH,2,1), hash_add(WH,3,1), hash_add(WH,[1,2],1), hash_add(WH,[2,3],1), hash_add(WH,[3,1],1), weight(G,WH,3).\r\nV = [1, 2]\r\nE = [[1, 2]]\r\nG = dirgraph([1, 2], [[1, 2]])\r\nWH = hash(4, 6, [[3, 1] -> 1, [2, 3] -> 1, 1 -> 1, 2 -> 1, [1, 2] -> 1, 3 -> 1])\r\n \r\n?- V`::[]..[1,2,3], E`::[[1,2]]..[[1,2],[2,3],[3,1]], dirgraph(G,V,E), hash_create(WH), hash_add(WH,1,1), hash_add(WH,2,1), hash_add(WH,3,1), hash_add(WH,[1,2],1), hash_add(WH,[2,3],1), hash_add(WH,[3,1],1), weight(G,WH,6).\r\nV = [1, 2, 3]\r\nE = [[1, 2], [2, 3], [3, 1]]\r\nG = dirgraph([1, 2, 3], [[1, 2], [2, 3], [3, 1]])\r\nWH = hash(4, 6, [[3, 1] -> 1, [2, 3] -> 1, 1 -> 1, 2 -> 1, [1, 2] -> 1, 3 -> 1])\r\n\t\t\t"]).
