:- module(fzn_fd).
:- export link_set_to_booleans / 2.
:- export all_disjoint / 1.
:- export sort / 2.
:- export count / 3.
:- export exactly / 3.
:- export at_least / 3.
:- export at_most / 3.
:- export all_different / 1.
:- export maximize / 3.
:- export minimize / 3.
:- export satisfy / 1.
:- export range_fzn_to_solver / 3.
:- export set_solver_to_fzn / 2.
:- export set_fzn_to_solver / 2.
:- export float_solver_to_fzn / 2.
:- export bool_solver_to_fzn / 2.
:- export bool_fzn_to_solver / 2.
:- export bool2int / 2.
:- export array_var_int_element / 3.
:- export array_var_bool_element / 3.
:- export array_int_element / 3.
:- export array_bool_element / 3.
:- export set_in_reif / 3.
:- export set_card / 2.
:- export set_symdiff / 3.
:- export set_diff / 3.
:- export set_union / 3.
:- export set_intersect / 3.
:- export set_subset / 2.
:- export set_in / 2.
:- export array_bool_or / 2.
:- export array_bool_and / 2.
:- export bool_not / 2.
:- export bool_xor / 3.
:- export bool_right_imp / 3.
:- export bool_left_imp / 3.
:- export bool_or / 3.
:- export bool_and / 3.
:- export int_abs / 2.
:- export int_max / 3.
:- export int_min / 3.
:- export int_mod / 3.
:- export int_div / 3.
:- export int_times / 3.
:- export int_minus / 3.
:- export int_plus / 3.
:- export int_negate / 2.
:- export int_lin_gt_reif / 4.
:- export int_lin_lt_reif / 4.
:- export int_lin_ge_reif / 4.
:- export int_lin_le_reif / 4.
:- export int_lin_ne_reif / 4.
:- export int_lin_eq_reif / 4.
:- export bool_gt_reif / 3.
:- export bool_lt_reif / 3.
:- export bool_ge_reif / 3.
:- export bool_le_reif / 3.
:- export bool_ne_reif / 3.
:- export bool_eq_reif / 3.
:- export int_gt_reif / 3.
:- export int_lt_reif / 3.
:- export int_ge_reif / 3.
:- export int_le_reif / 3.
:- export int_ne_reif / 3.
:- export int_eq_reif / 3.
:- export int_lin_gt / 3.
:- export int_lin_lt / 3.
:- export int_lin_ge / 3.
:- export int_lin_le / 3.
:- export int_lin_ne / 3.
:- export int_lin_eq / 3.
:- export set_eq / 2.
:- export bool_gt / 2.
:- export bool_lt / 2.
:- export bool_ge / 2.
:- export bool_le / 2.
:- export bool_ne / 2.
:- export bool_eq / 2.
:- export int_gt / 2.
:- export int_lt / 2.
:- export int_ge / 2.
:- export int_le / 2.
:- export int_ne / 2.
:- export int_eq / 2.
:- export set_declare_array / 2.
:- export set_declare_array / 3.
:- export int_declare_array / 2.
:- export int_declare_array / 3.
:- export int_declare_array / 1.
:- export bool_declare_array / 1.
:- export set_declare / 2.
:- export set_declare / 3.
:- export int_declare / 2.
:- export int_declare / 3.
:- export int_declare / 1.
:- export bool_declare / 1.
:- reexport cumulative / 4 from edge_finder.
:- reexport disjoint / 2 from fd_sets.
:- comment(summary, "Mapping from FlatZinc to lib(fd) and lib(fd_sets)").
:- comment(author, "Joachim Schimpf, supported by Cisco Systems and NICTA Victoria").
:- comment(copyright, "Cisco Systems Inc, licensed under CMPL").
:- comment(date, "$Date: 2008/06/20 17:21:23 $").
:- comment(see_also, [library(flatzinc), library(fd), library(fd_sets), library(fd_global), library(propia), library(branch_and_bound)]).
:- comment(desc, html("\nThis module defines a mapping from FlatZinc operations to lib(fd),\nlib(fd_sets) and lib(fd_global), and is intended to be used in\nconjunction with lib(flatzinc).  It uses lib(propia) to implement\nvariants of the element constraint that are not supported by lib(fd).\nMoreover, lib(branch_and_bound) is used to provide optimization.\n</P><P>\nThis mapping supports bool, integer and set variables.\nIt does currently not support all constraints in reified form,\nin particular set constraints, according to the limitations of\nthe underlying solvers.\n<P>\n")).
